"use strict";(self.webpackChunk_lexical_website=self.webpackChunk_lexical_website||[]).push([["9697"],{80089:function(e,i,n){n.r(i),n.d(i,{frontMatter:()=>d,default:()=>h,contentTitle:()=>c,assets:()=>a,toc:()=>t,metadata:()=>s});var s=JSON.parse('{"id":"api/classes/lexical.LineBreakNode","title":"Class: LineBreakNode","description":"lexical.LineBreakNode","source":"@site/docs/api/classes/lexical.LineBreakNode.md","sourceDirName":"api/classes","slug":"/api/classes/lexical.LineBreakNode","permalink":"/docs/api/classes/lexical.LineBreakNode","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","frontMatter":{"id":"lexical.LineBreakNode","title":"Class: LineBreakNode","custom_edit_url":null},"sidebar":"api","previous":{"title":"LexicalNode","permalink":"/docs/api/classes/lexical.LexicalNode"},"next":{"title":"NodeSelection","permalink":"/docs/api/classes/lexical.NodeSelection"}}'),l=n(52322),r=n(22840);let d={id:"lexical.LineBreakNode",title:"Class: LineBreakNode",custom_edit_url:null},c=void 0,a={},t=[{value:"Hierarchy",id:"hierarchy",level:2},{value:"Constructors",id:"constructors",level:2},{value:"constructor",id:"constructor",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Overrides",id:"overrides",level:4},{value:"Defined in",id:"defined-in",level:4},{value:"Properties",id:"properties",level:2},{value:"constructor",id:"constructor-1",level:3},{value:"Overrides",id:"overrides-1",level:4},{value:"Defined in",id:"defined-in-1",level:4},{value:"Methods",id:"methods",level:2},{value:"createDOM",id:"createdom",level:3},{value:"Returns",id:"returns-1",level:4},{value:"Overrides",id:"overrides-2",level:4},{value:"Defined in",id:"defined-in-2",level:4},{value:"getTextContent",id:"gettextcontent",level:3},{value:"Returns",id:"returns-2",level:4},{value:"Overrides",id:"overrides-3",level:4},{value:"Defined in",id:"defined-in-3",level:4},{value:"isInline",id:"isinline",level:3},{value:"Returns",id:"returns-3",level:4},{value:"Overrides",id:"overrides-4",level:4},{value:"Defined in",id:"defined-in-4",level:4},{value:"updateDOM",id:"updatedom",level:3},{value:"Returns",id:"returns-4",level:4},{value:"Overrides",id:"overrides-5",level:4},{value:"Defined in",id:"defined-in-5",level:4},{value:"clone",id:"clone",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-5",level:4},{value:"Overrides",id:"overrides-6",level:4},{value:"Defined in",id:"defined-in-6",level:4},{value:"getType",id:"gettype",level:3},{value:"Returns",id:"returns-6",level:4},{value:"Overrides",id:"overrides-7",level:4},{value:"Defined in",id:"defined-in-7",level:4},{value:"importDOM",id:"importdom",level:3},{value:"Returns",id:"returns-7",level:4},{value:"Overrides",id:"overrides-8",level:4},{value:"Defined in",id:"defined-in-8",level:4},{value:"importJSON",id:"importjson",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-8",level:4},{value:"Overrides",id:"overrides-9",level:4},{value:"Defined in",id:"defined-in-9",level:4}];function o(e){let i={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.a)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(i.p,{children:[(0,l.jsx)(i.a,{href:"/docs/api/modules/lexical",children:"lexical"}),".LineBreakNode"]}),"\n",(0,l.jsx)(i.h2,{id:"hierarchy",children:"Hierarchy"}),"\n",(0,l.jsxs)(i.ul,{children:["\n",(0,l.jsxs)(i.li,{children:["\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,l.jsx)(i.code,{children:"LexicalNode"})})}),"\n",(0,l.jsxs)(i.p,{children:["\u21B3 ",(0,l.jsx)(i.strong,{children:(0,l.jsx)(i.code,{children:"LineBreakNode"})})]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(i.h2,{id:"constructors",children:"Constructors"}),"\n",(0,l.jsx)(i.h3,{id:"constructor",children:"constructor"}),"\n",(0,l.jsxs)(i.p,{children:["\u2022 ",(0,l.jsx)(i.strong,{children:"new LineBreakNode"}),"(",(0,l.jsx)(i.code,{children:"key?"}),"): ",(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.LineBreakNode",children:(0,l.jsx)(i.code,{children:"LineBreakNode"})})]}),"\n",(0,l.jsx)(i.h4,{id:"parameters",children:"Parameters"}),"\n",(0,l.jsxs)(i.table,{children:[(0,l.jsx)(i.thead,{children:(0,l.jsxs)(i.tr,{children:[(0,l.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(i.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,l.jsx)(i.tbody,{children:(0,l.jsxs)(i.tr,{children:[(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.code,{children:"key?"})}),(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.code,{children:"string"})})]})})]}),"\n",(0,l.jsx)(i.h4,{id:"returns",children:"Returns"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.LineBreakNode",children:(0,l.jsx)(i.code,{children:"LineBreakNode"})})}),"\n",(0,l.jsx)(i.h4,{id:"overrides",children:"Overrides"}),"\n",(0,l.jsxs)(i.p,{children:[(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:"LexicalNode"}),".",(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode#constructor",children:"constructor"})]}),"\n",(0,l.jsx)(i.h4,{id:"defined-in",children:"Defined in"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/nodes/LexicalLineBreakNode.ts#L37",children:"packages/lexical/src/nodes/LexicalLineBreakNode.ts:37"})}),"\n",(0,l.jsx)(i.h2,{id:"properties",children:"Properties"}),"\n",(0,l.jsx)(i.h3,{id:"constructor-1",children:"constructor"}),"\n",(0,l.jsxs)(i.p,{children:["\u2022 ",(0,l.jsx)(i.strong,{children:"constructor"}),": ",(0,l.jsx)(i.a,{href:"/docs/api/modules/lexical#klassconstructor",children:(0,l.jsx)(i.code,{children:"KlassConstructor"})}),"<typeof ",(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.LineBreakNode",children:(0,l.jsx)(i.code,{children:"LineBreakNode"})}),">"]}),"\n",(0,l.jsx)(i.h4,{id:"overrides-1",children:"Overrides"}),"\n",(0,l.jsx)(i.p,{children:"LexicalNode.constructor"}),"\n",(0,l.jsx)(i.h4,{id:"defined-in-1",children:"Defined in"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/nodes/LexicalLineBreakNode.ts#L28",children:"packages/lexical/src/nodes/LexicalLineBreakNode.ts:28"})}),"\n",(0,l.jsx)(i.h2,{id:"methods",children:"Methods"}),"\n",(0,l.jsx)(i.h3,{id:"createdom",children:"createDOM"}),"\n",(0,l.jsxs)(i.p,{children:["\u25B8 ",(0,l.jsx)(i.strong,{children:"createDOM"}),"(): ",(0,l.jsx)(i.code,{children:"HTMLElement"})]}),"\n",(0,l.jsx)(i.p,{children:"Called during the reconciliation process to determine which nodes\nto insert into the DOM for this Lexical Node."}),"\n",(0,l.jsx)(i.p,{children:"This method must return exactly one HTMLElement. Nested elements are not supported."}),"\n",(0,l.jsx)(i.p,{children:"Do not attempt to update the Lexical EditorState during this phase of the update lifecycle."}),"\n",(0,l.jsx)(i.h4,{id:"returns-1",children:"Returns"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.code,{children:"HTMLElement"})}),"\n",(0,l.jsx)(i.h4,{id:"overrides-2",children:"Overrides"}),"\n",(0,l.jsxs)(i.p,{children:[(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:"LexicalNode"}),".",(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode#createdom",children:"createDOM"})]}),"\n",(0,l.jsx)(i.h4,{id:"defined-in-2",children:"Defined in"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/nodes/LexicalLineBreakNode.ts#L45",children:"packages/lexical/src/nodes/LexicalLineBreakNode.ts:45"})}),"\n",(0,l.jsx)(i.hr,{}),"\n",(0,l.jsx)(i.h3,{id:"gettextcontent",children:"getTextContent"}),"\n",(0,l.jsxs)(i.p,{children:["\u25B8 ",(0,l.jsx)(i.strong,{children:"getTextContent"}),"(): ",(0,l.jsx)(i.code,{children:'"\\n"'})]}),"\n",(0,l.jsx)(i.p,{children:"Returns the text content of the node. Override this for\ncustom nodes that should have a representation in plain text\nformat (for copy + paste, for example)"}),"\n",(0,l.jsx)(i.h4,{id:"returns-2",children:"Returns"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.code,{children:'"\\n"'})}),"\n",(0,l.jsx)(i.h4,{id:"overrides-3",children:"Overrides"}),"\n",(0,l.jsxs)(i.p,{children:[(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:"LexicalNode"}),".",(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode#gettextcontent",children:"getTextContent"})]}),"\n",(0,l.jsx)(i.h4,{id:"defined-in-3",children:"Defined in"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/nodes/LexicalLineBreakNode.ts#L41",children:"packages/lexical/src/nodes/LexicalLineBreakNode.ts:41"})}),"\n",(0,l.jsx)(i.hr,{}),"\n",(0,l.jsx)(i.h3,{id:"isinline",children:"isInline"}),"\n",(0,l.jsxs)(i.p,{children:["\u25B8 ",(0,l.jsx)(i.strong,{children:"isInline"}),"(): ",(0,l.jsx)(i.code,{children:"true"})]}),"\n",(0,l.jsx)(i.h4,{id:"returns-3",children:"Returns"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.code,{children:"true"})}),"\n",(0,l.jsx)(i.h4,{id:"overrides-4",children:"Overrides"}),"\n",(0,l.jsxs)(i.p,{children:[(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:"LexicalNode"}),".",(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode#isinline",children:"isInline"})]}),"\n",(0,l.jsx)(i.h4,{id:"defined-in-4",children:"Defined in"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/nodes/LexicalLineBreakNode.ts#L53",children:"packages/lexical/src/nodes/LexicalLineBreakNode.ts:53"})}),"\n",(0,l.jsx)(i.hr,{}),"\n",(0,l.jsx)(i.h3,{id:"updatedom",children:"updateDOM"}),"\n",(0,l.jsxs)(i.p,{children:["\u25B8 ",(0,l.jsx)(i.strong,{children:"updateDOM"}),"(): ",(0,l.jsx)(i.code,{children:"false"})]}),"\n",(0,l.jsx)(i.p,{children:"Called when a node changes and should update the DOM\nin whatever way is necessary to make it align with any changes that might\nhave happened during the update."}),"\n",(0,l.jsx)(i.p,{children:'Returning "true" here will cause lexical to unmount and recreate the DOM node\n(by calling createDOM). You would need to do this if the element tag changes,\nfor instance.'}),"\n",(0,l.jsx)(i.h4,{id:"returns-4",children:"Returns"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.code,{children:"false"})}),"\n",(0,l.jsx)(i.h4,{id:"overrides-5",children:"Overrides"}),"\n",(0,l.jsxs)(i.p,{children:[(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:"LexicalNode"}),".",(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode#updatedom",children:"updateDOM"})]}),"\n",(0,l.jsx)(i.h4,{id:"defined-in-5",children:"Defined in"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/nodes/LexicalLineBreakNode.ts#L49",children:"packages/lexical/src/nodes/LexicalLineBreakNode.ts:49"})}),"\n",(0,l.jsx)(i.hr,{}),"\n",(0,l.jsx)(i.h3,{id:"clone",children:"clone"}),"\n",(0,l.jsxs)(i.p,{children:["\u25B8 ",(0,l.jsx)(i.strong,{children:"clone"}),"(",(0,l.jsx)(i.code,{children:"node"}),"): ",(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.LineBreakNode",children:(0,l.jsx)(i.code,{children:"LineBreakNode"})})]}),"\n",(0,l.jsx)(i.p,{children:"Clones this node, creating a new node with a different key\nand adding it to the EditorState (but not attaching it anywhere!). All nodes must\nimplement this method."}),"\n",(0,l.jsx)(i.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,l.jsxs)(i.table,{children:[(0,l.jsx)(i.thead,{children:(0,l.jsxs)(i.tr,{children:[(0,l.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(i.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,l.jsx)(i.tbody,{children:(0,l.jsxs)(i.tr,{children:[(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.code,{children:"node"})}),(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.LineBreakNode",children:(0,l.jsx)(i.code,{children:"LineBreakNode"})})})]})})]}),"\n",(0,l.jsx)(i.h4,{id:"returns-5",children:"Returns"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.LineBreakNode",children:(0,l.jsx)(i.code,{children:"LineBreakNode"})})}),"\n",(0,l.jsx)(i.h4,{id:"overrides-6",children:"Overrides"}),"\n",(0,l.jsxs)(i.p,{children:[(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:"LexicalNode"}),".",(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode#clone",children:"clone"})]}),"\n",(0,l.jsx)(i.h4,{id:"defined-in-6",children:"Defined in"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/nodes/LexicalLineBreakNode.ts#L33",children:"packages/lexical/src/nodes/LexicalLineBreakNode.ts:33"})}),"\n",(0,l.jsx)(i.hr,{}),"\n",(0,l.jsx)(i.h3,{id:"gettype",children:"getType"}),"\n",(0,l.jsxs)(i.p,{children:["\u25B8 ",(0,l.jsx)(i.strong,{children:"getType"}),"(): ",(0,l.jsx)(i.code,{children:"string"})]}),"\n",(0,l.jsx)(i.p,{children:"Returns the string type of this node. Every node must\nimplement this and it MUST BE UNIQUE amongst nodes registered\non the editor."}),"\n",(0,l.jsx)(i.h4,{id:"returns-6",children:"Returns"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.code,{children:"string"})}),"\n",(0,l.jsx)(i.h4,{id:"overrides-7",children:"Overrides"}),"\n",(0,l.jsxs)(i.p,{children:[(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:"LexicalNode"}),".",(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode#gettype-1",children:"getType"})]}),"\n",(0,l.jsx)(i.h4,{id:"defined-in-7",children:"Defined in"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/nodes/LexicalLineBreakNode.ts#L29",children:"packages/lexical/src/nodes/LexicalLineBreakNode.ts:29"})}),"\n",(0,l.jsx)(i.hr,{}),"\n",(0,l.jsx)(i.h3,{id:"importdom",children:"importDOM"}),"\n",(0,l.jsxs)(i.p,{children:["\u25B8 ",(0,l.jsx)(i.strong,{children:"importDOM"}),"(): ",(0,l.jsx)(i.code,{children:"null"})," | ",(0,l.jsx)(i.a,{href:"/docs/api/modules/lexical#domconversionmap",children:(0,l.jsx)(i.code,{children:"DOMConversionMap"})})]}),"\n",(0,l.jsx)(i.h4,{id:"returns-7",children:"Returns"}),"\n",(0,l.jsxs)(i.p,{children:[(0,l.jsx)(i.code,{children:"null"})," | ",(0,l.jsx)(i.a,{href:"/docs/api/modules/lexical#domconversionmap",children:(0,l.jsx)(i.code,{children:"DOMConversionMap"})})]}),"\n",(0,l.jsx)(i.h4,{id:"overrides-8",children:"Overrides"}),"\n",(0,l.jsx)(i.p,{children:"LexicalNode.importDOM"}),"\n",(0,l.jsx)(i.h4,{id:"defined-in-8",children:"Defined in"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/nodes/LexicalLineBreakNode.ts#L57",children:"packages/lexical/src/nodes/LexicalLineBreakNode.ts:57"})}),"\n",(0,l.jsx)(i.hr,{}),"\n",(0,l.jsx)(i.h3,{id:"importjson",children:"importJSON"}),"\n",(0,l.jsxs)(i.p,{children:["\u25B8 ",(0,l.jsx)(i.strong,{children:"importJSON"}),"(",(0,l.jsx)(i.code,{children:"serializedLineBreakNode"}),"): ",(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.LineBreakNode",children:(0,l.jsx)(i.code,{children:"LineBreakNode"})})]}),"\n",(0,l.jsxs)(i.p,{children:["Controls how the this node is deserialized from JSON. This is usually boilerplate,\nbut provides an abstraction between the node implementation and serialized interface that can\nbe important if you ever make breaking changes to a node schema (by adding or removing properties).\nSee ",(0,l.jsx)(i.a,{href:"https://lexical.dev/docs/concepts/serialization#lexical---html",children:"Serialization & Deserialization"}),"."]}),"\n",(0,l.jsx)(i.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,l.jsxs)(i.table,{children:[(0,l.jsx)(i.thead,{children:(0,l.jsxs)(i.tr,{children:[(0,l.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(i.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,l.jsx)(i.tbody,{children:(0,l.jsxs)(i.tr,{children:[(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.code,{children:"serializedLineBreakNode"})}),(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.a,{href:"/docs/api/modules/lexical#serializedlexicalnode",children:(0,l.jsx)(i.code,{children:"SerializedLexicalNode"})})})]})})]}),"\n",(0,l.jsx)(i.h4,{id:"returns-8",children:"Returns"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.LineBreakNode",children:(0,l.jsx)(i.code,{children:"LineBreakNode"})})}),"\n",(0,l.jsx)(i.h4,{id:"overrides-9",children:"Overrides"}),"\n",(0,l.jsxs)(i.p,{children:[(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:"LexicalNode"}),".",(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode#importjson",children:"importJSON"})]}),"\n",(0,l.jsx)(i.h4,{id:"defined-in-9",children:"Defined in"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/nodes/LexicalLineBreakNode.ts#L71",children:"packages/lexical/src/nodes/LexicalLineBreakNode.ts:71"})})]})}function h(e={}){let{wrapper:i}={...(0,r.a)(),...e.components};return i?(0,l.jsx)(i,{...e,children:(0,l.jsx)(o,{...e})}):o(e)}},22840:function(e,i,n){n.d(i,{Z:()=>c,a:()=>d});var s=n(2784);let l={},r=s.createContext(l);function d(e){let i=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function c(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:d(e.components),s.createElement(r.Provider,{value:i},e.children)}}}]);