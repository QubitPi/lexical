"use strict";(self.webpackChunk_lexical_website=self.webpackChunk_lexical_website||[]).push([["2249"],{45785:function(e,t,i){i.r(t),i.d(t,{frontMatter:()=>l,default:()=>h,contentTitle:()=>r,assets:()=>s,toc:()=>c,metadata:()=>o});var o=JSON.parse('{"id":"collaboration/react","title":"React","description":"Lexical provides LexicalCollaborationPlugin and useCollaborationContext hook within @lexical/react to accelerate creation of the collaborative React backed editors.","source":"@site/docs/collaboration/react.md","sourceDirName":"collaboration","slug":"/collaboration/react","permalink":"/lexical/docs/collaboration/react","draft":false,"unlisted":false,"editUrl":"https://github.com/QubitPi/lexical/tree/main/packages/lexical-website/docs/collaboration/react.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"docs","previous":{"title":"React FAQ","permalink":"/lexical/docs/react/faq"},"next":{"title":"Collaboration FAQ","permalink":"/lexical/docs/collaboration/faq"}}'),n=i(52322),a=i(22840);let l={sidebar_position:1},r="React",s={},c=[{value:"Getting started",id:"getting-started",level:2},{value:"See it in action",id:"see-it-in-action",level:2},{value:"Building collaborative plugins",id:"building-collaborative-plugins",level:2},{value:"Yjs providers",id:"yjs-providers",level:2}];function d(e){let t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"react",children:"React"})}),"\n",(0,n.jsxs)(t.p,{children:["Lexical provides ",(0,n.jsx)(t.code,{children:"LexicalCollaborationPlugin"})," and ",(0,n.jsx)(t.code,{children:"useCollaborationContext"})," hook within ",(0,n.jsx)(t.code,{children:"@lexical/react"})," to accelerate creation of the collaborative React backed editors.\nThis is on top of the Yjs bindings provided by ",(0,n.jsx)(t.code,{children:"@lexical/yjs"}),"."]}),"\n",(0,n.jsx)(t.admonition,{type:"tip",children:(0,n.jsxs)(t.p,{children:["Clone ",(0,n.jsx)(t.a,{href:"https://github.com/facebook/lexical",children:"Lexical GitHub repo"}),", run ",(0,n.jsx)(t.code,{children:"npm i && npm run start"})," and open ",(0,n.jsx)(t.a,{href:"http://localhost:3000/split/?isCollab=true",children:(0,n.jsx)(t.code,{children:"http://localhost:3000/split/?isCollab=true"})})," to launch playground in collaborative mode."]})}),"\n",(0,n.jsx)(t.h2,{id:"getting-started",children:"Getting started"}),"\n",(0,n.jsxs)(t.p,{children:["This guide is based on ",(0,n.jsx)(t.a,{href:"https://github.com/facebook/lexical/tree/main/examples/react-rich",children:"examples/react-rich"})," example."]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Install minimal set of the required dependencies:"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"$ npm i -S @lexical/react @lexical/yjs lexical react react-dom y-websocket yjs\n"})}),"\n",(0,n.jsx)(t.admonition,{type:"note",children:(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"y-websocket"})," is the only officially supported Yjs connection provider at this point. Although other providers may work just fine."]})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Get WebSocket server running:"})}),"\n",(0,n.jsxs)(t.p,{children:["This allows different browser windows and different browsers to find each other and sync Lexical state. On top of this ",(0,n.jsx)(t.code,{children:"YPERSISTENCE"})," allows you to save Yjs documents in between server restarts so clients can simply reconnect and keep editing."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"$ HOST=localhost PORT=1234 YPERSISTENCE=./yjs-wss-db npx y-websocket\n"})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Get basic collaborative Lexical setup:"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-tsx",children:"import {$getRoot, $createParagraphNode, $createTextNode} from 'lexical';\nimport {LexicalComposer} from '@lexical/react/LexicalComposer';\nimport {ContentEditable} from '@lexical/react/LexicalContentEditable';\nimport {LexicalErrorBoundary} from '@lexical/react/LexicalErrorBoundary';\nimport {RichTextPlugin} from '@lexical/react/LexicalRichTextPlugin';\nimport {CollaborationPlugin} from '@lexical/react/LexicalCollaborationPlugin';\nimport * as Y from 'yjs';\nimport {$initialEditorState} from './initialEditorState';\nimport {WebsocketProvider} from 'y-websocket';\n\nfunction Editor() {\n  const initialConfig = {\n    // NOTE: This is critical for collaboration plugin to set editor state to null. It\n    // would indicate that the editor should not try to set any default state\n    // (not even empty one), and let collaboration plugin do it instead\n    editorState: null,\n    namespace: 'Demo',\n    nodes: [],\n    onError: (error: Error) => {\n      throw error;\n    },\n    theme: {},\n  };\n\n  const providerFactory = useCallback(\n    (id: string, yjsDocMap: Map<string, Y.Doc>) => {\n      const doc = getDocFromMap(id, yjsDocMap);\n\n      return new WebsocketProvider('ws://localhost:1234', id, doc, {\n        connect: false,\n      });\n    }, [],\n  );\n\n  return (\n    <LexicalComposer initialConfig={initialConfig}>\n      <RichTextPlugin\n        contentEditable={<ContentEditable className=\"editor-input\" />}\n        placeholder={<div className=\"editor-placeholder\">Enter some rich text...</div>}\n        ErrorBoundary={LexicalErrorBoundary}\n      />\n      <CollaborationPlugin\n        id=\"lexical/react-rich-collab\"\n        providerFactory={providerFactory}\n        // Optional initial editor state in case collaborative Y.Doc won't\n        // have any existing data on server. Then it'll use this value to populate editor.\n        // It accepts same type of values as LexicalComposer editorState\n        // prop (json string, state object, or a function)\n        initialEditorState={$initialEditorState}\n        shouldBootstrap={true}\n      />\n    </LexicalComposer>\n  );\n}\n"})}),"\n",(0,n.jsx)(t.h2,{id:"see-it-in-action",children:"See it in action"}),"\n",(0,n.jsxs)(t.p,{children:["Source code: ",(0,n.jsx)(t.a,{href:"https://github.com/facebook/lexical/tree/main/examples/react-rich-collab",children:"examples/react-rich-collab"})]}),"\n",(0,n.jsx)("iframe",{width:"100%",height:"600",src:"https://stackblitz.com/github/facebook/lexical/tree/main/examples/react-rich-collab?embed=1&file=src%2FApp.tsx&terminalHeight=0&ctl=1&showSidebar=0&devtoolsheight=0&view=preview",sandbox:"allow-forms allow-modals allow-popups allow-popups-to-escape-sandbox allow-presentation allow-same-origin allow-scripts"}),"\n",(0,n.jsx)(t.h2,{id:"building-collaborative-plugins",children:"Building collaborative plugins"}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.a,{href:"https://playground.lexical.dev/",children:"Lexical Playground"})," features set of the collaboration enabled plugins that integrate with primary document via ",(0,n.jsx)(t.code,{children:"useCollaborationContext()"})," hook. Notable mentions:"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical-playground/src/plugins/CommentPlugin",children:(0,n.jsx)(t.code,{children:"CommentPlugin"})})," - features use of the separate provider and Yjs room to sync comments."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.a,{href:"https://github.com/facebook/lexical/blob/main/packages/lexical-playground/src/nodes/ImageComponent.tsx",children:(0,n.jsx)(t.code,{children:"ImageComponent"})})," - features use of the ",(0,n.jsx)(t.code,{children:"LexicalNestedComposer"})," paired with ",(0,n.jsx)(t.code,{children:"CollaborationPlugin"}),"."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.a,{href:"https://github.com/facebook/lexical/blob/main/packages/lexical-playground/src/nodes/PollComponent.tsx",children:(0,n.jsx)(t.code,{children:"PollOptionComponent"})})," - showcases poll implementation using ",(0,n.jsx)(t.code,{children:"clientID"})," from Yjs context."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical-playground/src/plugins/StickyPlugin",children:(0,n.jsx)(t.code,{children:"StickyPlugin"})})," - features use of the ",(0,n.jsx)(t.code,{children:"LexicalNestedComposer"})," paired with ",(0,n.jsx)(t.code,{children:"CollaborationPlugin"})," as well as sticky note position real-time sync."]}),"\n"]}),"\n",(0,n.jsx)(t.admonition,{type:"note",children:(0,n.jsx)(t.p,{children:'While these "playground" plugins aren\'t production ready - they serve as a great example of collaborative Lexical capabilities as well as provide a good starting point.'})}),"\n",(0,n.jsx)(t.h2,{id:"yjs-providers",children:"Yjs providers"}),"\n",(0,n.jsx)(t.p,{children:"Setting up the communication between clients, managing awareness information, and storing shared data for offline usage is quite a hassle. Providers manage all that for you and are the perfect starting point for your collaborative app."}),"\n",(0,n.jsxs)(t.p,{children:["See ",(0,n.jsx)(t.a,{href:"https://docs.yjs.dev/ecosystem/connection-provider",children:"Yjs Website"})," for the list of the officially endorsed providers. Although it's not an exhaustive one."]})]})}function h(e={}){let{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},22840:function(e,t,i){i.d(t,{Z:()=>r,a:()=>l});var o=i(2784);let n={},a=o.createContext(n);function l(e){let t=o.useContext(a);return o.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:l(e.components),o.createElement(a.Provider,{value:t},e.children)}}}]);