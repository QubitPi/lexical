"use strict";(self.webpackChunk_lexical_website=self.webpackChunk_lexical_website||[]).push([["6720"],{97957:function(e,l,i){i.r(l),i.d(l,{frontMatter:()=>c,default:()=>x,contentTitle:()=>d,assets:()=>r,toc:()=>a,metadata:()=>n});var n=JSON.parse('{"id":"api/classes/lexical.RangeSelection","title":"Class: RangeSelection","description":"lexical.RangeSelection","source":"@site/docs/api/classes/lexical.RangeSelection.md","sourceDirName":"api/classes","slug":"/api/classes/lexical.RangeSelection","permalink":"/lexical/docs/api/classes/lexical.RangeSelection","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","frontMatter":{"id":"lexical.RangeSelection","title":"Class: RangeSelection","custom_edit_url":null},"sidebar":"api","previous":{"title":"Point","permalink":"/lexical/docs/api/classes/lexical.Point"},"next":{"title":"RootNode","permalink":"/lexical/docs/api/classes/lexical.RootNode"}}'),t=i(52322),s=i(22840);let c={id:"lexical.RangeSelection",title:"Class: RangeSelection",custom_edit_url:null},d=void 0,r={},a=[{value:"Implements",id:"implements",level:2},{value:"Constructors",id:"constructors",level:2},{value:"constructor",id:"constructor",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Defined in",id:"defined-in",level:4},{value:"Properties",id:"properties",level:2},{value:"_cachedNodes",id:"_cachednodes",level:3},{value:"Implementation of",id:"implementation-of",level:4},{value:"Defined in",id:"defined-in-1",level:4},{value:"anchor",id:"anchor",level:3},{value:"Defined in",id:"defined-in-2",level:4},{value:"dirty",id:"dirty",level:3},{value:"Implementation of",id:"implementation-of-1",level:4},{value:"Defined in",id:"defined-in-3",level:4},{value:"focus",id:"focus",level:3},{value:"Defined in",id:"defined-in-4",level:4},{value:"format",id:"format",level:3},{value:"Defined in",id:"defined-in-5",level:4},{value:"style",id:"style",level:3},{value:"Defined in",id:"defined-in-6",level:4},{value:"Methods",id:"methods",level:2},{value:"applyDOMRange",id:"applydomrange",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Defined in",id:"defined-in-7",level:4},{value:"clone",id:"clone",level:3},{value:"Returns",id:"returns-2",level:4},{value:"Implementation of",id:"implementation-of-2",level:4},{value:"Defined in",id:"defined-in-8",level:4},{value:"deleteCharacter",id:"deletecharacter",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-3",level:4},{value:"Defined in",id:"defined-in-9",level:4},{value:"deleteLine",id:"deleteline",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-4",level:4},{value:"Defined in",id:"defined-in-10",level:4},{value:"deleteWord",id:"deleteword",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-5",level:4},{value:"Defined in",id:"defined-in-11",level:4},{value:"extract",id:"extract",level:3},{value:"Returns",id:"returns-6",level:4},{value:"Implementation of",id:"implementation-of-3",level:4},{value:"Defined in",id:"defined-in-12",level:4},{value:"formatText",id:"formattext",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-7",level:4},{value:"Defined in",id:"defined-in-13",level:4},{value:"forwardDeletion",id:"forwarddeletion",level:3},{value:"Parameters",id:"parameters-6",level:4},{value:"Returns",id:"returns-8",level:4},{value:"Defined in",id:"defined-in-14",level:4},{value:"getCachedNodes",id:"getcachednodes",level:3},{value:"Returns",id:"returns-9",level:4},{value:"Implementation of",id:"implementation-of-4",level:4},{value:"Defined in",id:"defined-in-15",level:4},{value:"getNodes",id:"getnodes",level:3},{value:"Returns",id:"returns-10",level:4},{value:"Implementation of",id:"implementation-of-5",level:4},{value:"Defined in",id:"defined-in-16",level:4},{value:"getStartEndPoints",id:"getstartendpoints",level:3},{value:"Returns",id:"returns-11",level:4},{value:"Implementation of",id:"implementation-of-6",level:4},{value:"Defined in",id:"defined-in-17",level:4},{value:"getTextContent",id:"gettextcontent",level:3},{value:"Returns",id:"returns-12",level:4},{value:"Implementation of",id:"implementation-of-7",level:4},{value:"Defined in",id:"defined-in-18",level:4},{value:"hasFormat",id:"hasformat",level:3},{value:"Parameters",id:"parameters-7",level:4},{value:"Returns",id:"returns-13",level:4},{value:"Defined in",id:"defined-in-19",level:4},{value:"insertLineBreak",id:"insertlinebreak",level:3},{value:"Parameters",id:"parameters-8",level:4},{value:"Returns",id:"returns-14",level:4},{value:"Defined in",id:"defined-in-20",level:4},{value:"insertNodes",id:"insertnodes",level:3},{value:"Parameters",id:"parameters-9",level:4},{value:"Returns",id:"returns-15",level:4},{value:"Implementation of",id:"implementation-of-8",level:4},{value:"Defined in",id:"defined-in-21",level:4},{value:"insertParagraph",id:"insertparagraph",level:3},{value:"Returns",id:"returns-16",level:4},{value:"Defined in",id:"defined-in-22",level:4},{value:"insertRawText",id:"insertrawtext",level:3},{value:"Parameters",id:"parameters-10",level:4},{value:"Returns",id:"returns-17",level:4},{value:"Implementation of",id:"implementation-of-9",level:4},{value:"Defined in",id:"defined-in-23",level:4},{value:"insertText",id:"inserttext",level:3},{value:"Parameters",id:"parameters-11",level:4},{value:"Returns",id:"returns-18",level:4},{value:"Implementation of",id:"implementation-of-10",level:4},{value:"Defined in",id:"defined-in-24",level:4},{value:"is",id:"is",level:3},{value:"Parameters",id:"parameters-12",level:4},{value:"Returns",id:"returns-19",level:4},{value:"Implementation of",id:"implementation-of-11",level:4},{value:"Defined in",id:"defined-in-25",level:4},{value:"isBackward",id:"isbackward",level:3},{value:"Returns",id:"returns-20",level:4},{value:"Implementation of",id:"implementation-of-12",level:4},{value:"Defined in",id:"defined-in-26",level:4},{value:"isCollapsed",id:"iscollapsed",level:3},{value:"Returns",id:"returns-21",level:4},{value:"Implementation of",id:"implementation-of-13",level:4},{value:"Defined in",id:"defined-in-27",level:4},{value:"modify",id:"modify",level:3},{value:"Parameters",id:"parameters-13",level:4},{value:"Returns",id:"returns-22",level:4},{value:"Defined in",id:"defined-in-28",level:4},{value:"removeText",id:"removetext",level:3},{value:"Returns",id:"returns-23",level:4},{value:"Defined in",id:"defined-in-29",level:4},{value:"setCachedNodes",id:"setcachednodes",level:3},{value:"Parameters",id:"parameters-14",level:4},{value:"Returns",id:"returns-24",level:4},{value:"Implementation of",id:"implementation-of-14",level:4},{value:"Defined in",id:"defined-in-30",level:4},{value:"setStyle",id:"setstyle",level:3},{value:"Parameters",id:"parameters-15",level:4},{value:"Returns",id:"returns-25",level:4},{value:"Defined in",id:"defined-in-31",level:4},{value:"setTextNodeRange",id:"settextnoderange",level:3},{value:"Parameters",id:"parameters-16",level:4},{value:"Returns",id:"returns-26",level:4},{value:"Defined in",id:"defined-in-32",level:4},{value:"toggleFormat",id:"toggleformat",level:3},{value:"Parameters",id:"parameters-17",level:4},{value:"Returns",id:"returns-27",level:4},{value:"Defined in",id:"defined-in-33",level:4}];function h(e){let l={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(l.p,{children:[(0,t.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical",children:"lexical"}),".RangeSelection"]}),"\n",(0,t.jsx)(l.h2,{id:"implements",children:"Implements"}),"\n",(0,t.jsxs)(l.ul,{children:["\n",(0,t.jsx)(l.li,{children:(0,t.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.BaseSelection",children:(0,t.jsx)(l.code,{children:"BaseSelection"})})}),"\n"]}),"\n",(0,t.jsx)(l.h2,{id:"constructors",children:"Constructors"}),"\n",(0,t.jsx)(l.h3,{id:"constructor",children:"constructor"}),"\n",(0,t.jsxs)(l.p,{children:["\u2022 ",(0,t.jsx)(l.strong,{children:"new RangeSelection"}),"(",(0,t.jsx)(l.code,{children:"anchor"}),", ",(0,t.jsx)(l.code,{children:"focus"}),", ",(0,t.jsx)(l.code,{children:"format"}),", ",(0,t.jsx)(l.code,{children:"style"}),"): ",(0,t.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.RangeSelection",children:(0,t.jsx)(l.code,{children:"RangeSelection"})})]}),"\n",(0,t.jsx)(l.h4,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsxs)(l.table,{children:[(0,t.jsx)(l.thead,{children:(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,t.jsxs)(l.tbody,{children:[(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"anchor"})}),(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#pointtype",children:(0,t.jsx)(l.code,{children:"PointType"})})})]}),(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"focus"})}),(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#pointtype",children:(0,t.jsx)(l.code,{children:"PointType"})})})]}),(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"format"})}),(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"number"})})]}),(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"style"})}),(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"string"})})]})]})]}),"\n",(0,t.jsx)(l.h4,{id:"returns",children:"Returns"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.RangeSelection",children:(0,t.jsx)(l.code,{children:"RangeSelection"})})}),"\n",(0,t.jsx)(l.h4,{id:"defined-in",children:"Defined in"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalSelection.ts#L468",children:"packages/lexical/src/LexicalSelection.ts:468"})}),"\n",(0,t.jsx)(l.h2,{id:"properties",children:"Properties"}),"\n",(0,t.jsx)(l.h3,{id:"_cachednodes",children:"_cachedNodes"}),"\n",(0,t.jsxs)(l.p,{children:["\u2022 ",(0,t.jsx)(l.strong,{children:"_cachedNodes"}),": ",(0,t.jsx)(l.code,{children:"null"})," | ",(0,t.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,t.jsx)(l.code,{children:"LexicalNode"})}),"[]"]}),"\n",(0,t.jsx)(l.h4,{id:"implementation-of",children:"Implementation of"}),"\n",(0,t.jsxs)(l.p,{children:[(0,t.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.BaseSelection",children:"BaseSelection"}),".",(0,t.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.BaseSelection#_cachednodes",children:"_cachedNodes"})]}),"\n",(0,t.jsx)(l.h4,{id:"defined-in-1",children:"Defined in"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalSelection.ts#L465",children:"packages/lexical/src/LexicalSelection.ts:465"})}),"\n",(0,t.jsx)(l.hr,{}),"\n",(0,t.jsx)(l.h3,{id:"anchor",children:"anchor"}),"\n",(0,t.jsxs)(l.p,{children:["\u2022 ",(0,t.jsx)(l.strong,{children:"anchor"}),": ",(0,t.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#pointtype",children:(0,t.jsx)(l.code,{children:"PointType"})})]}),"\n",(0,t.jsx)(l.h4,{id:"defined-in-2",children:"Defined in"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalSelection.ts#L463",children:"packages/lexical/src/LexicalSelection.ts:463"})}),"\n",(0,t.jsx)(l.hr,{}),"\n",(0,t.jsx)(l.h3,{id:"dirty",children:"dirty"}),"\n",(0,t.jsxs)(l.p,{children:["\u2022 ",(0,t.jsx)(l.strong,{children:"dirty"}),": ",(0,t.jsx)(l.code,{children:"boolean"})]}),"\n",(0,t.jsx)(l.h4,{id:"implementation-of-1",children:"Implementation of"}),"\n",(0,t.jsxs)(l.p,{children:[(0,t.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.BaseSelection",children:"BaseSelection"}),".",(0,t.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.BaseSelection#dirty",children:"dirty"})]}),"\n",(0,t.jsx)(l.h4,{id:"defined-in-3",children:"Defined in"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalSelection.ts#L466",children:"packages/lexical/src/LexicalSelection.ts:466"})}),"\n",(0,t.jsx)(l.hr,{}),"\n",(0,t.jsx)(l.h3,{id:"focus",children:"focus"}),"\n",(0,t.jsxs)(l.p,{children:["\u2022 ",(0,t.jsx)(l.strong,{children:"focus"}),": ",(0,t.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#pointtype",children:(0,t.jsx)(l.code,{children:"PointType"})})]}),"\n",(0,t.jsx)(l.h4,{id:"defined-in-4",children:"Defined in"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalSelection.ts#L464",children:"packages/lexical/src/LexicalSelection.ts:464"})}),"\n",(0,t.jsx)(l.hr,{}),"\n",(0,t.jsx)(l.h3,{id:"format",children:"format"}),"\n",(0,t.jsxs)(l.p,{children:["\u2022 ",(0,t.jsx)(l.strong,{children:"format"}),": ",(0,t.jsx)(l.code,{children:"number"})]}),"\n",(0,t.jsx)(l.h4,{id:"defined-in-5",children:"Defined in"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalSelection.ts#L461",children:"packages/lexical/src/LexicalSelection.ts:461"})}),"\n",(0,t.jsx)(l.hr,{}),"\n",(0,t.jsx)(l.h3,{id:"style",children:"style"}),"\n",(0,t.jsxs)(l.p,{children:["\u2022 ",(0,t.jsx)(l.strong,{children:"style"}),": ",(0,t.jsx)(l.code,{children:"string"})]}),"\n",(0,t.jsx)(l.h4,{id:"defined-in-6",children:"Defined in"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalSelection.ts#L462",children:"packages/lexical/src/LexicalSelection.ts:462"})}),"\n",(0,t.jsx)(l.h2,{id:"methods",children:"Methods"}),"\n",(0,t.jsx)(l.h3,{id:"applydomrange",children:"applyDOMRange"}),"\n",(0,t.jsxs)(l.p,{children:["\u25B8 ",(0,t.jsx)(l.strong,{children:"applyDOMRange"}),"(",(0,t.jsx)(l.code,{children:"range"}),"): ",(0,t.jsx)(l.code,{children:"void"})]}),"\n",(0,t.jsx)(l.p,{children:"Attempts to map a DOM selection range onto this Lexical Selection,\nsetting the anchor, focus, and type accordingly"}),"\n",(0,t.jsx)(l.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,t.jsxs)(l.table,{children:[(0,t.jsx)(l.thead,{children:(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,t.jsx)(l.tbody,{children:(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"range"})}),(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"StaticRange"})}),(0,t.jsx)(l.td,{style:{textAlign:"left"},children:"a DOM Selection range conforming to the StaticRange interface."})]})})]}),"\n",(0,t.jsx)(l.h4,{id:"returns-1",children:"Returns"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.code,{children:"void"})}),"\n",(0,t.jsx)(l.h4,{id:"defined-in-7",children:"Defined in"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalSelection.ts#L647",children:"packages/lexical/src/LexicalSelection.ts:647"})}),"\n",(0,t.jsx)(l.hr,{}),"\n",(0,t.jsx)(l.h3,{id:"clone",children:"clone"}),"\n",(0,t.jsxs)(l.p,{children:["\u25B8 ",(0,t.jsx)(l.strong,{children:"clone"}),"(): ",(0,t.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.RangeSelection",children:(0,t.jsx)(l.code,{children:"RangeSelection"})})]}),"\n",(0,t.jsx)(l.p,{children:"Creates a new RangeSelection, copying over all the property values from this one."}),"\n",(0,t.jsx)(l.h4,{id:"returns-2",children:"Returns"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.RangeSelection",children:(0,t.jsx)(l.code,{children:"RangeSelection"})})}),"\n",(0,t.jsx)(l.p,{children:"a new RangeSelection with the same property values as this one."}),"\n",(0,t.jsx)(l.h4,{id:"implementation-of-2",children:"Implementation of"}),"\n",(0,t.jsxs)(l.p,{children:[(0,t.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.BaseSelection",children:"BaseSelection"}),".",(0,t.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.BaseSelection#clone",children:"clone"})]}),"\n",(0,t.jsx)(l.h4,{id:"defined-in-8",children:"Defined in"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalSelection.ts#L680",children:"packages/lexical/src/LexicalSelection.ts:680"})}),"\n",(0,t.jsx)(l.hr,{}),"\n",(0,t.jsx)(l.h3,{id:"deletecharacter",children:"deleteCharacter"}),"\n",(0,t.jsxs)(l.p,{children:["\u25B8 ",(0,t.jsx)(l.strong,{children:"deleteCharacter"}),"(",(0,t.jsx)(l.code,{children:"isBackward"}),"): ",(0,t.jsx)(l.code,{children:"void"})]}),"\n",(0,t.jsx)(l.p,{children:"Performs one logical character deletion operation on the EditorState based on the current Selection.\nHandles different node types."}),"\n",(0,t.jsx)(l.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,t.jsxs)(l.table,{children:[(0,t.jsx)(l.thead,{children:(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,t.jsx)(l.tbody,{children:(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"isBackward"})}),(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"boolean"})}),(0,t.jsx)(l.td,{style:{textAlign:"left"},children:"whether or not the selection is backwards."})]})})]}),"\n",(0,t.jsx)(l.h4,{id:"returns-3",children:"Returns"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.code,{children:"void"})}),"\n",(0,t.jsx)(l.h4,{id:"defined-in-9",children:"Defined in"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalSelection.ts#L1716",children:"packages/lexical/src/LexicalSelection.ts:1716"})}),"\n",(0,t.jsx)(l.hr,{}),"\n",(0,t.jsx)(l.h3,{id:"deleteline",children:"deleteLine"}),"\n",(0,t.jsxs)(l.p,{children:["\u25B8 ",(0,t.jsx)(l.strong,{children:"deleteLine"}),"(",(0,t.jsx)(l.code,{children:"isBackward"}),"): ",(0,t.jsx)(l.code,{children:"void"})]}),"\n",(0,t.jsx)(l.p,{children:"Performs one logical line deletion operation on the EditorState based on the current Selection.\nHandles different node types."}),"\n",(0,t.jsx)(l.h4,{id:"parameters-3",children:"Parameters"}),"\n",(0,t.jsxs)(l.table,{children:[(0,t.jsx)(l.thead,{children:(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,t.jsx)(l.tbody,{children:(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"isBackward"})}),(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"boolean"})}),(0,t.jsx)(l.td,{style:{textAlign:"left"},children:"whether or not the selection is backwards."})]})})]}),"\n",(0,t.jsx)(l.h4,{id:"returns-4",children:"Returns"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.code,{children:"void"})}),"\n",(0,t.jsx)(l.h4,{id:"defined-in-10",children:"Defined in"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalSelection.ts#L1890",children:"packages/lexical/src/LexicalSelection.ts:1890"})}),"\n",(0,t.jsx)(l.hr,{}),"\n",(0,t.jsx)(l.h3,{id:"deleteword",children:"deleteWord"}),"\n",(0,t.jsxs)(l.p,{children:["\u25B8 ",(0,t.jsx)(l.strong,{children:"deleteWord"}),"(",(0,t.jsx)(l.code,{children:"isBackward"}),"): ",(0,t.jsx)(l.code,{children:"void"})]}),"\n",(0,t.jsx)(l.p,{children:"Performs one logical word deletion operation on the EditorState based on the current Selection.\nHandles different node types."}),"\n",(0,t.jsx)(l.h4,{id:"parameters-4",children:"Parameters"}),"\n",(0,t.jsxs)(l.table,{children:[(0,t.jsx)(l.thead,{children:(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,t.jsx)(l.tbody,{children:(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"isBackward"})}),(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"boolean"})}),(0,t.jsx)(l.td,{style:{textAlign:"left"},children:"whether or not the selection is backwards."})]})})]}),"\n",(0,t.jsx)(l.h4,{id:"returns-5",children:"Returns"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.code,{children:"void"})}),"\n",(0,t.jsx)(l.h4,{id:"defined-in-11",children:"Defined in"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalSelection.ts#L1910",children:"packages/lexical/src/LexicalSelection.ts:1910"})}),"\n",(0,t.jsx)(l.hr,{}),"\n",(0,t.jsx)(l.h3,{id:"extract",children:"extract"}),"\n",(0,t.jsxs)(l.p,{children:["\u25B8 ",(0,t.jsx)(l.strong,{children:"extract"}),"(): ",(0,t.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,t.jsx)(l.code,{children:"LexicalNode"})}),"[]"]}),"\n",(0,t.jsx)(l.p,{children:"Extracts the nodes in the Selection, splitting nodes where necessary\nto get offset-level precision."}),"\n",(0,t.jsx)(l.h4,{id:"returns-6",children:"Returns"}),"\n",(0,t.jsxs)(l.p,{children:[(0,t.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,t.jsx)(l.code,{children:"LexicalNode"})}),"[]"]}),"\n",(0,t.jsx)(l.p,{children:"The nodes in the Selection"}),"\n",(0,t.jsx)(l.h4,{id:"implementation-of-3",children:"Implementation of"}),"\n",(0,t.jsxs)(l.p,{children:[(0,t.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.BaseSelection",children:"BaseSelection"}),".",(0,t.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.BaseSelection#extract",children:"extract"})]}),"\n",(0,t.jsx)(l.h4,{id:"defined-in-12",children:"Defined in"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalSelection.ts#L1479",children:"packages/lexical/src/LexicalSelection.ts:1479"})}),"\n",(0,t.jsx)(l.hr,{}),"\n",(0,t.jsx)(l.h3,{id:"formattext",children:"formatText"}),"\n",(0,t.jsxs)(l.p,{children:["\u25B8 ",(0,t.jsx)(l.strong,{children:"formatText"}),"(",(0,t.jsx)(l.code,{children:"formatType"}),", ",(0,t.jsx)(l.code,{children:"alignWithFormat?"}),"): ",(0,t.jsx)(l.code,{children:"void"})]}),"\n",(0,t.jsx)(l.p,{children:"Applies the provided format to the TextNodes in the Selection, splitting or\nmerging nodes as necessary."}),"\n",(0,t.jsx)(l.h4,{id:"parameters-5",children:"Parameters"}),"\n",(0,t.jsxs)(l.table,{children:[(0,t.jsx)(l.thead,{children:(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Default value"}),(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,t.jsxs)(l.tbody,{children:[(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"formatType"})}),(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#textformattype",children:(0,t.jsx)(l.code,{children:"TextFormatType"})})}),(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"undefined"})}),(0,t.jsx)(l.td,{style:{textAlign:"left"},children:"the format type to apply to the nodes in the Selection."})]}),(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"alignWithFormat"})}),(0,t.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,t.jsx)(l.code,{children:"null"})," | ",(0,t.jsx)(l.code,{children:"number"})]}),(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"null"})}),(0,t.jsx)(l.td,{style:{textAlign:"left"},children:"a 32-bit integer representing formatting flags to align with."})]})]})]}),"\n",(0,t.jsx)(l.h4,{id:"returns-7",children:"Returns"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.code,{children:"void"})}),"\n",(0,t.jsx)(l.h4,{id:"defined-in-13",children:"Defined in"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalSelection.ts#L1164",children:"packages/lexical/src/LexicalSelection.ts:1164"})}),"\n",(0,t.jsx)(l.hr,{}),"\n",(0,t.jsx)(l.h3,{id:"forwarddeletion",children:"forwardDeletion"}),"\n",(0,t.jsxs)(l.p,{children:["\u25B8 ",(0,t.jsx)(l.strong,{children:"forwardDeletion"}),"(",(0,t.jsx)(l.code,{children:"anchor"}),", ",(0,t.jsx)(l.code,{children:"anchorNode"}),", ",(0,t.jsx)(l.code,{children:"isBackward"}),"): ",(0,t.jsx)(l.code,{children:"boolean"})]}),"\n",(0,t.jsx)(l.p,{children:"Helper for handling forward character and word deletion that prevents element nodes\nlike a table, columns layout being destroyed"}),"\n",(0,t.jsx)(l.h4,{id:"parameters-6",children:"Parameters"}),"\n",(0,t.jsxs)(l.table,{children:[(0,t.jsx)(l.thead,{children:(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,t.jsxs)(l.tbody,{children:[(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"anchor"})}),(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#pointtype",children:(0,t.jsx)(l.code,{children:"PointType"})})}),(0,t.jsx)(l.td,{style:{textAlign:"left"},children:"the anchor"})]}),(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"anchorNode"})}),(0,t.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,t.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:(0,t.jsx)(l.code,{children:"ElementNode"})})," | ",(0,t.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.TextNode",children:(0,t.jsx)(l.code,{children:"TextNode"})})]}),(0,t.jsx)(l.td,{style:{textAlign:"left"},children:"the anchor node in the selection"})]}),(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"isBackward"})}),(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"boolean"})}),(0,t.jsx)(l.td,{style:{textAlign:"left"},children:"whether or not selection is backwards"})]})]})]}),"\n",(0,t.jsx)(l.h4,{id:"returns-8",children:"Returns"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.code,{children:"boolean"})}),"\n",(0,t.jsx)(l.h4,{id:"defined-in-14",children:"Defined in"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalSelection.ts#L1684",children:"packages/lexical/src/LexicalSelection.ts:1684"})}),"\n",(0,t.jsx)(l.hr,{}),"\n",(0,t.jsx)(l.h3,{id:"getcachednodes",children:"getCachedNodes"}),"\n",(0,t.jsxs)(l.p,{children:["\u25B8 ",(0,t.jsx)(l.strong,{children:"getCachedNodes"}),"(): ",(0,t.jsx)(l.code,{children:"null"})," | ",(0,t.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,t.jsx)(l.code,{children:"LexicalNode"})}),"[]"]}),"\n",(0,t.jsx)(l.h4,{id:"returns-9",children:"Returns"}),"\n",(0,t.jsxs)(l.p,{children:[(0,t.jsx)(l.code,{children:"null"})," | ",(0,t.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,t.jsx)(l.code,{children:"LexicalNode"})}),"[]"]}),"\n",(0,t.jsx)(l.h4,{id:"implementation-of-4",children:"Implementation of"}),"\n",(0,t.jsxs)(l.p,{children:[(0,t.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.BaseSelection",children:"BaseSelection"}),".",(0,t.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.BaseSelection#getcachednodes",children:"getCachedNodes"})]}),"\n",(0,t.jsx)(l.h4,{id:"defined-in-15",children:"Defined in"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalSelection.ts#L484",children:"packages/lexical/src/LexicalSelection.ts:484"})}),"\n",(0,t.jsx)(l.hr,{}),"\n",(0,t.jsx)(l.h3,{id:"getnodes",children:"getNodes"}),"\n",(0,t.jsxs)(l.p,{children:["\u25B8 ",(0,t.jsx)(l.strong,{children:"getNodes"}),"(): ",(0,t.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,t.jsx)(l.code,{children:"LexicalNode"})}),"[]"]}),"\n",(0,t.jsx)(l.p,{children:"Gets all the nodes in the Selection. Uses caching to make it generally suitable\nfor use in hot paths."}),"\n",(0,t.jsxs)(l.p,{children:["See also the ",(0,t.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.CaretRange",children:"CaretRange"})," APIs (starting with\n",(0,t.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#caretrangefromselection",children:"$caretRangeFromSelection"}),"), which are likely to provide a better\nfoundation for any operation where partial selection is relevant\n(e.g. the anchor or focus are inside an ElementNode and TextNode)"]}),"\n",(0,t.jsx)(l.h4,{id:"returns-10",children:"Returns"}),"\n",(0,t.jsxs)(l.p,{children:[(0,t.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,t.jsx)(l.code,{children:"LexicalNode"})}),"[]"]}),"\n",(0,t.jsx)(l.p,{children:"an Array containing all the nodes in the Selection"}),"\n",(0,t.jsx)(l.h4,{id:"implementation-of-5",children:"Implementation of"}),"\n",(0,t.jsxs)(l.p,{children:[(0,t.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.BaseSelection",children:"BaseSelection"}),".",(0,t.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.BaseSelection#getnodes",children:"getNodes"})]}),"\n",(0,t.jsx)(l.h4,{id:"defined-in-16",children:"Defined in"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalSelection.ts#L531",children:"packages/lexical/src/LexicalSelection.ts:531"})}),"\n",(0,t.jsx)(l.hr,{}),"\n",(0,t.jsx)(l.h3,{id:"getstartendpoints",children:"getStartEndPoints"}),"\n",(0,t.jsxs)(l.p,{children:["\u25B8 ",(0,t.jsx)(l.strong,{children:"getStartEndPoints"}),"(): ",(0,t.jsx)(l.code,{children:"null"})," | [",(0,t.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#pointtype",children:(0,t.jsx)(l.code,{children:"PointType"})}),", ",(0,t.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#pointtype",children:(0,t.jsx)(l.code,{children:"PointType"})}),"]"]}),"\n",(0,t.jsx)(l.h4,{id:"returns-11",children:"Returns"}),"\n",(0,t.jsxs)(l.p,{children:[(0,t.jsx)(l.code,{children:"null"})," | [",(0,t.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#pointtype",children:(0,t.jsx)(l.code,{children:"PointType"})}),", ",(0,t.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#pointtype",children:(0,t.jsx)(l.code,{children:"PointType"})}),"]"]}),"\n",(0,t.jsx)(l.h4,{id:"implementation-of-6",children:"Implementation of"}),"\n",(0,t.jsxs)(l.p,{children:[(0,t.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.BaseSelection",children:"BaseSelection"}),".",(0,t.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.BaseSelection#getstartendpoints",children:"getStartEndPoints"})]}),"\n",(0,t.jsx)(l.h4,{id:"defined-in-17",children:"Defined in"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalSelection.ts#L1931",children:"packages/lexical/src/LexicalSelection.ts:1931"})}),"\n",(0,t.jsx)(l.hr,{}),"\n",(0,t.jsx)(l.h3,{id:"gettextcontent",children:"getTextContent"}),"\n",(0,t.jsxs)(l.p,{children:["\u25B8 ",(0,t.jsx)(l.strong,{children:"getTextContent"}),"(): ",(0,t.jsx)(l.code,{children:"string"})]}),"\n",(0,t.jsx)(l.p,{children:"Gets the (plain) text content of all the nodes in the selection."}),"\n",(0,t.jsx)(l.h4,{id:"returns-12",children:"Returns"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.code,{children:"string"})}),"\n",(0,t.jsx)(l.p,{children:"a string representing the text content of all the nodes in the Selection"}),"\n",(0,t.jsx)(l.h4,{id:"implementation-of-7",children:"Implementation of"}),"\n",(0,t.jsxs)(l.p,{children:[(0,t.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.BaseSelection",children:"BaseSelection"}),".",(0,t.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.BaseSelection#gettextcontent",children:"getTextContent"})]}),"\n",(0,t.jsx)(l.h4,{id:"defined-in-18",children:"Defined in"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalSelection.ts#L579",children:"packages/lexical/src/LexicalSelection.ts:579"})}),"\n",(0,t.jsx)(l.hr,{}),"\n",(0,t.jsx)(l.h3,{id:"hasformat",children:"hasFormat"}),"\n",(0,t.jsxs)(l.p,{children:["\u25B8 ",(0,t.jsx)(l.strong,{children:"hasFormat"}),"(",(0,t.jsx)(l.code,{children:"type"}),"): ",(0,t.jsx)(l.code,{children:"boolean"})]}),"\n",(0,t.jsx)(l.p,{children:"Returns whether the provided TextFormatType is present on the Selection. This will be true if any node in the Selection\nhas the specified format."}),"\n",(0,t.jsx)(l.h4,{id:"parameters-7",children:"Parameters"}),"\n",(0,t.jsxs)(l.table,{children:[(0,t.jsx)(l.thead,{children:(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,t.jsx)(l.tbody,{children:(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"type"})}),(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#textformattype",children:(0,t.jsx)(l.code,{children:"TextFormatType"})})}),(0,t.jsx)(l.td,{style:{textAlign:"left"},children:"the TextFormatType to check for."})]})})]}),"\n",(0,t.jsx)(l.h4,{id:"returns-13",children:"Returns"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.code,{children:"boolean"})}),"\n",(0,t.jsx)(l.p,{children:"true if the provided format is currently toggled on on the Selection, false otherwise."}),"\n",(0,t.jsx)(l.h4,{id:"defined-in-19",children:"Defined in"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalSelection.ts#L719",children:"packages/lexical/src/LexicalSelection.ts:719"})}),"\n",(0,t.jsx)(l.hr,{}),"\n",(0,t.jsx)(l.h3,{id:"insertlinebreak",children:"insertLineBreak"}),"\n",(0,t.jsxs)(l.p,{children:["\u25B8 ",(0,t.jsx)(l.strong,{children:"insertLineBreak"}),"(",(0,t.jsx)(l.code,{children:"selectStart?"}),"): ",(0,t.jsx)(l.code,{children:"void"})]}),"\n",(0,t.jsx)(l.p,{children:"Inserts a logical linebreak, which may be a new LineBreakNode or a new ParagraphNode, into the EditorState at the\ncurrent Selection."}),"\n",(0,t.jsx)(l.h4,{id:"parameters-8",children:"Parameters"}),"\n",(0,t.jsxs)(l.table,{children:[(0,t.jsx)(l.thead,{children:(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,t.jsx)(l.tbody,{children:(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"selectStart?"})}),(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"boolean"})})]})})]}),"\n",(0,t.jsx)(l.h4,{id:"returns-14",children:"Returns"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.code,{children:"void"})}),"\n",(0,t.jsx)(l.h4,{id:"defined-in-20",children:"Defined in"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalSelection.ts#L1462",children:"packages/lexical/src/LexicalSelection.ts:1462"})}),"\n",(0,t.jsx)(l.hr,{}),"\n",(0,t.jsx)(l.h3,{id:"insertnodes",children:"insertNodes"}),"\n",(0,t.jsxs)(l.p,{children:["\u25B8 ",(0,t.jsx)(l.strong,{children:"insertNodes"}),"(",(0,t.jsx)(l.code,{children:"nodes"}),"): ",(0,t.jsx)(l.code,{children:"void"})]}),"\n",(0,t.jsx)(l.p,{children:'Attempts to "intelligently" insert an arbitrary list of Lexical nodes into the EditorState at the\ncurrent Selection according to a set of heuristics that determine how surrounding nodes\nshould be changed, replaced, or moved to accommodate the incoming ones.'}),"\n",(0,t.jsx)(l.h4,{id:"parameters-9",children:"Parameters"}),"\n",(0,t.jsxs)(l.table,{children:[(0,t.jsx)(l.thead,{children:(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,t.jsx)(l.tbody,{children:(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"nodes"})}),(0,t.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,t.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,t.jsx)(l.code,{children:"LexicalNode"})}),"[]"]}),(0,t.jsx)(l.td,{style:{textAlign:"left"},children:"the nodes to insert"})]})})]}),"\n",(0,t.jsx)(l.h4,{id:"returns-15",children:"Returns"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.code,{children:"void"})}),"\n",(0,t.jsx)(l.h4,{id:"implementation-of-8",children:"Implementation of"}),"\n",(0,t.jsxs)(l.p,{children:[(0,t.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.BaseSelection",children:"BaseSelection"}),".",(0,t.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.BaseSelection#insertnodes",children:"insertNodes"})]}),"\n",(0,t.jsx)(l.h4,{id:"defined-in-21",children:"Defined in"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalSelection.ts#L1315",children:"packages/lexical/src/LexicalSelection.ts:1315"})}),"\n",(0,t.jsx)(l.hr,{}),"\n",(0,t.jsx)(l.h3,{id:"insertparagraph",children:"insertParagraph"}),"\n",(0,t.jsxs)(l.p,{children:["\u25B8 ",(0,t.jsx)(l.strong,{children:"insertParagraph"}),"(): ",(0,t.jsx)(l.code,{children:"null"})," | ",(0,t.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:(0,t.jsx)(l.code,{children:"ElementNode"})})]}),"\n",(0,t.jsx)(l.p,{children:"Inserts a new ParagraphNode into the EditorState at the current Selection"}),"\n",(0,t.jsx)(l.h4,{id:"returns-16",children:"Returns"}),"\n",(0,t.jsxs)(l.p,{children:[(0,t.jsx)(l.code,{children:"null"})," | ",(0,t.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:(0,t.jsx)(l.code,{children:"ElementNode"})})]}),"\n",(0,t.jsx)(l.p,{children:"the newly inserted node."}),"\n",(0,t.jsx)(l.h4,{id:"defined-in-22",children:"Defined in"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalSelection.ts#L1431",children:"packages/lexical/src/LexicalSelection.ts:1431"})}),"\n",(0,t.jsx)(l.hr,{}),"\n",(0,t.jsx)(l.h3,{id:"insertrawtext",children:"insertRawText"}),"\n",(0,t.jsxs)(l.p,{children:["\u25B8 ",(0,t.jsx)(l.strong,{children:"insertRawText"}),"(",(0,t.jsx)(l.code,{children:"text"}),"): ",(0,t.jsx)(l.code,{children:"void"})]}),"\n",(0,t.jsx)(l.p,{children:"Attempts to insert the provided text into the EditorState at the current Selection.\nconverts tabs, newlines, and carriage returns into LexicalNodes."}),"\n",(0,t.jsx)(l.h4,{id:"parameters-10",children:"Parameters"}),"\n",(0,t.jsxs)(l.table,{children:[(0,t.jsx)(l.thead,{children:(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,t.jsx)(l.tbody,{children:(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"text"})}),(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"string"})}),(0,t.jsx)(l.td,{style:{textAlign:"left"},children:"the text to insert into the Selection"})]})})]}),"\n",(0,t.jsx)(l.h4,{id:"returns-17",children:"Returns"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.code,{children:"void"})}),"\n",(0,t.jsx)(l.h4,{id:"implementation-of-9",children:"Implementation of"}),"\n",(0,t.jsxs)(l.p,{children:[(0,t.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.BaseSelection",children:"BaseSelection"}),".",(0,t.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.BaseSelection#insertrawtext",children:"insertRawText"})]}),"\n",(0,t.jsx)(l.h4,{id:"defined-in-23",children:"Defined in"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalSelection.ts#L730",children:"packages/lexical/src/LexicalSelection.ts:730"})}),"\n",(0,t.jsx)(l.hr,{}),"\n",(0,t.jsx)(l.h3,{id:"inserttext",children:"insertText"}),"\n",(0,t.jsxs)(l.p,{children:["\u25B8 ",(0,t.jsx)(l.strong,{children:"insertText"}),"(",(0,t.jsx)(l.code,{children:"text"}),"): ",(0,t.jsx)(l.code,{children:"void"})]}),"\n",(0,t.jsx)(l.p,{children:"Insert the provided text into the EditorState at the current Selection."}),"\n",(0,t.jsx)(l.h4,{id:"parameters-11",children:"Parameters"}),"\n",(0,t.jsxs)(l.table,{children:[(0,t.jsx)(l.thead,{children:(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,t.jsx)(l.tbody,{children:(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"text"})}),(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"string"})}),(0,t.jsx)(l.td,{style:{textAlign:"left"},children:"the text to insert into the Selection"})]})})]}),"\n",(0,t.jsx)(l.h4,{id:"returns-18",children:"Returns"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.code,{children:"void"})}),"\n",(0,t.jsx)(l.h4,{id:"implementation-of-10",children:"Implementation of"}),"\n",(0,t.jsxs)(l.p,{children:[(0,t.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.BaseSelection",children:"BaseSelection"}),".",(0,t.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.BaseSelection#inserttext",children:"insertText"})]}),"\n",(0,t.jsx)(l.h4,{id:"defined-in-24",children:"Defined in"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalSelection.ts#L752",children:"packages/lexical/src/LexicalSelection.ts:752"})}),"\n",(0,t.jsx)(l.hr,{}),"\n",(0,t.jsx)(l.h3,{id:"is",children:"is"}),"\n",(0,t.jsxs)(l.p,{children:["\u25B8 ",(0,t.jsx)(l.strong,{children:"is"}),"(",(0,t.jsx)(l.code,{children:"selection"}),"): ",(0,t.jsx)(l.code,{children:"boolean"})]}),"\n",(0,t.jsx)(l.p,{children:"Used to check if the provided selections is equal to this one by value,\nincluding anchor, focus, format, and style properties."}),"\n",(0,t.jsx)(l.h4,{id:"parameters-12",children:"Parameters"}),"\n",(0,t.jsxs)(l.table,{children:[(0,t.jsx)(l.thead,{children:(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,t.jsx)(l.tbody,{children:(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"selection"})}),(0,t.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,t.jsx)(l.code,{children:"null"})," | ",(0,t.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.BaseSelection",children:(0,t.jsx)(l.code,{children:"BaseSelection"})})]}),(0,t.jsx)(l.td,{style:{textAlign:"left"},children:"the Selection to compare this one to."})]})})]}),"\n",(0,t.jsx)(l.h4,{id:"returns-19",children:"Returns"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.code,{children:"boolean"})}),"\n",(0,t.jsx)(l.p,{children:"true if the Selections are equal, false otherwise."}),"\n",(0,t.jsx)(l.h4,{id:"implementation-of-11",children:"Implementation of"}),"\n",(0,t.jsxs)(l.p,{children:[(0,t.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.BaseSelection",children:"BaseSelection"}),".",(0,t.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.BaseSelection#is",children:"is"})]}),"\n",(0,t.jsx)(l.h4,{id:"defined-in-25",children:"Defined in"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalSelection.ts#L498",children:"packages/lexical/src/LexicalSelection.ts:498"})}),"\n",(0,t.jsx)(l.hr,{}),"\n",(0,t.jsx)(l.h3,{id:"isbackward",children:"isBackward"}),"\n",(0,t.jsxs)(l.p,{children:["\u25B8 ",(0,t.jsx)(l.strong,{children:"isBackward"}),"(): ",(0,t.jsx)(l.code,{children:"boolean"})]}),"\n",(0,t.jsx)(l.p,{children:'Returns whether the Selection is "backwards", meaning the focus\nlogically precedes the anchor in the EditorState.'}),"\n",(0,t.jsx)(l.h4,{id:"returns-20",children:"Returns"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.code,{children:"boolean"})}),"\n",(0,t.jsx)(l.p,{children:"true if the Selection is backwards, false otherwise."}),"\n",(0,t.jsx)(l.h4,{id:"implementation-of-12",children:"Implementation of"}),"\n",(0,t.jsxs)(l.p,{children:[(0,t.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.BaseSelection",children:"BaseSelection"}),".",(0,t.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.BaseSelection#isbackward",children:"isBackward"})]}),"\n",(0,t.jsx)(l.h4,{id:"defined-in-26",children:"Defined in"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalSelection.ts#L1927",children:"packages/lexical/src/LexicalSelection.ts:1927"})}),"\n",(0,t.jsx)(l.hr,{}),"\n",(0,t.jsx)(l.h3,{id:"iscollapsed",children:"isCollapsed"}),"\n",(0,t.jsxs)(l.p,{children:["\u25B8 ",(0,t.jsx)(l.strong,{children:"isCollapsed"}),"(): ",(0,t.jsx)(l.code,{children:"boolean"})]}),"\n",(0,t.jsx)(l.p,{children:'Returns whether the Selection is "collapsed", meaning the anchor and focus are\nthe same node and have the same offset.'}),"\n",(0,t.jsx)(l.h4,{id:"returns-21",children:"Returns"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.code,{children:"boolean"})}),"\n",(0,t.jsx)(l.p,{children:"true if the Selection is collapsed, false otherwise."}),"\n",(0,t.jsx)(l.h4,{id:"implementation-of-13",children:"Implementation of"}),"\n",(0,t.jsxs)(l.p,{children:[(0,t.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.BaseSelection",children:"BaseSelection"}),".",(0,t.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.BaseSelection#iscollapsed",children:"isCollapsed"})]}),"\n",(0,t.jsx)(l.h4,{id:"defined-in-27",children:"Defined in"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalSelection.ts#L516",children:"packages/lexical/src/LexicalSelection.ts:516"})}),"\n",(0,t.jsx)(l.hr,{}),"\n",(0,t.jsx)(l.h3,{id:"modify",children:"modify"}),"\n",(0,t.jsxs)(l.p,{children:["\u25B8 ",(0,t.jsx)(l.strong,{children:"modify"}),"(",(0,t.jsx)(l.code,{children:"alter"}),", ",(0,t.jsx)(l.code,{children:"isBackward"}),", ",(0,t.jsx)(l.code,{children:"granularity"}),"): ",(0,t.jsx)(l.code,{children:"void"})]}),"\n",(0,t.jsx)(l.p,{children:'Modifies the Selection according to the parameters and a set of heuristics that account for\nvarious node types. Can be used to safely move or extend selection by one logical "unit" without\ndealing explicitly with all the possible node types.'}),"\n",(0,t.jsx)(l.h4,{id:"parameters-13",children:"Parameters"}),"\n",(0,t.jsxs)(l.table,{children:[(0,t.jsx)(l.thead,{children:(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,t.jsxs)(l.tbody,{children:[(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"alter"})}),(0,t.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,t.jsx)(l.code,{children:'"move"'})," | ",(0,t.jsx)(l.code,{children:'"extend"'})]}),(0,t.jsx)(l.td,{style:{textAlign:"left"},children:"the type of modification to perform"})]}),(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"isBackward"})}),(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"boolean"})}),(0,t.jsx)(l.td,{style:{textAlign:"left"},children:"whether or not selection is backwards"})]}),(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"granularity"})}),(0,t.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,t.jsx)(l.code,{children:'"character"'})," | ",(0,t.jsx)(l.code,{children:'"word"'})," | ",(0,t.jsx)(l.code,{children:'"lineboundary"'})]}),(0,t.jsx)(l.td,{style:{textAlign:"left"},children:"the granularity at which to apply the modification"})]})]})]}),"\n",(0,t.jsx)(l.h4,{id:"returns-22",children:"Returns"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.code,{children:"void"})}),"\n",(0,t.jsx)(l.h4,{id:"defined-in-28",children:"Defined in"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalSelection.ts#L1537",children:"packages/lexical/src/LexicalSelection.ts:1537"})}),"\n",(0,t.jsx)(l.hr,{}),"\n",(0,t.jsx)(l.h3,{id:"removetext",children:"removeText"}),"\n",(0,t.jsxs)(l.p,{children:["\u25B8 ",(0,t.jsx)(l.strong,{children:"removeText"}),"(): ",(0,t.jsx)(l.code,{children:"void"})]}),"\n",(0,t.jsx)(l.p,{children:"Removes the text in the Selection, adjusting the EditorState accordingly."}),"\n",(0,t.jsx)(l.h4,{id:"returns-23",children:"Returns"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.code,{children:"void"})}),"\n",(0,t.jsx)(l.h4,{id:"defined-in-29",children:"Defined in"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalSelection.ts#L1147",children:"packages/lexical/src/LexicalSelection.ts:1147"})}),"\n",(0,t.jsx)(l.hr,{}),"\n",(0,t.jsx)(l.h3,{id:"setcachednodes",children:"setCachedNodes"}),"\n",(0,t.jsxs)(l.p,{children:["\u25B8 ",(0,t.jsx)(l.strong,{children:"setCachedNodes"}),"(",(0,t.jsx)(l.code,{children:"nodes"}),"): ",(0,t.jsx)(l.code,{children:"void"})]}),"\n",(0,t.jsx)(l.h4,{id:"parameters-14",children:"Parameters"}),"\n",(0,t.jsxs)(l.table,{children:[(0,t.jsx)(l.thead,{children:(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,t.jsx)(l.tbody,{children:(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"nodes"})}),(0,t.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,t.jsx)(l.code,{children:"null"})," | ",(0,t.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,t.jsx)(l.code,{children:"LexicalNode"})}),"[]"]})]})})]}),"\n",(0,t.jsx)(l.h4,{id:"returns-24",children:"Returns"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.code,{children:"void"})}),"\n",(0,t.jsx)(l.h4,{id:"implementation-of-14",children:"Implementation of"}),"\n",(0,t.jsxs)(l.p,{children:[(0,t.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.BaseSelection",children:"BaseSelection"}),".",(0,t.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.BaseSelection#setcachednodes",children:"setCachedNodes"})]}),"\n",(0,t.jsx)(l.h4,{id:"defined-in-30",children:"Defined in"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalSelection.ts#L488",children:"packages/lexical/src/LexicalSelection.ts:488"})}),"\n",(0,t.jsx)(l.hr,{}),"\n",(0,t.jsx)(l.h3,{id:"setstyle",children:"setStyle"}),"\n",(0,t.jsxs)(l.p,{children:["\u25B8 ",(0,t.jsx)(l.strong,{children:"setStyle"}),"(",(0,t.jsx)(l.code,{children:"style"}),"): ",(0,t.jsx)(l.code,{children:"void"})]}),"\n",(0,t.jsx)(l.p,{children:"Sets the value of the style property on the Selection"}),"\n",(0,t.jsx)(l.h4,{id:"parameters-15",children:"Parameters"}),"\n",(0,t.jsxs)(l.table,{children:[(0,t.jsx)(l.thead,{children:(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,t.jsx)(l.tbody,{children:(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"style"})}),(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"string"})}),(0,t.jsx)(l.td,{style:{textAlign:"left"},children:"the style to set at the value of the style property."})]})})]}),"\n",(0,t.jsx)(l.h4,{id:"returns-25",children:"Returns"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.code,{children:"void"})}),"\n",(0,t.jsx)(l.h4,{id:"defined-in-31",children:"Defined in"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalSelection.ts#L707",children:"packages/lexical/src/LexicalSelection.ts:707"})}),"\n",(0,t.jsx)(l.hr,{}),"\n",(0,t.jsx)(l.h3,{id:"settextnoderange",children:"setTextNodeRange"}),"\n",(0,t.jsxs)(l.p,{children:["\u25B8 ",(0,t.jsx)(l.strong,{children:"setTextNodeRange"}),"(",(0,t.jsx)(l.code,{children:"anchorNode"}),", ",(0,t.jsx)(l.code,{children:"anchorOffset"}),", ",(0,t.jsx)(l.code,{children:"focusNode"}),", ",(0,t.jsx)(l.code,{children:"focusOffset"}),"): ",(0,t.jsx)(l.code,{children:"void"})]}),"\n",(0,t.jsx)(l.p,{children:'Sets this Selection to be of type "text" at the provided anchor and focus values.'}),"\n",(0,t.jsx)(l.h4,{id:"parameters-16",children:"Parameters"}),"\n",(0,t.jsxs)(l.table,{children:[(0,t.jsx)(l.thead,{children:(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,t.jsxs)(l.tbody,{children:[(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"anchorNode"})}),(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.TextNode",children:(0,t.jsx)(l.code,{children:"TextNode"})})}),(0,t.jsx)(l.td,{style:{textAlign:"left"},children:"the anchor node to set on the Selection"})]}),(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"anchorOffset"})}),(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"number"})}),(0,t.jsx)(l.td,{style:{textAlign:"left"},children:"the offset to set on the Selection"})]}),(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"focusNode"})}),(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.TextNode",children:(0,t.jsx)(l.code,{children:"TextNode"})})}),(0,t.jsx)(l.td,{style:{textAlign:"left"},children:"the focus node to set on the Selection"})]}),(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"focusOffset"})}),(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"number"})}),(0,t.jsx)(l.td,{style:{textAlign:"left"},children:"the focus offset to set on the Selection"})]})]})]}),"\n",(0,t.jsx)(l.h4,{id:"returns-26",children:"Returns"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.code,{children:"void"})}),"\n",(0,t.jsx)(l.h4,{id:"defined-in-32",children:"Defined in"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalSelection.ts#L564",children:"packages/lexical/src/LexicalSelection.ts:564"})}),"\n",(0,t.jsx)(l.hr,{}),"\n",(0,t.jsx)(l.h3,{id:"toggleformat",children:"toggleFormat"}),"\n",(0,t.jsxs)(l.p,{children:["\u25B8 ",(0,t.jsx)(l.strong,{children:"toggleFormat"}),"(",(0,t.jsx)(l.code,{children:"format"}),"): ",(0,t.jsx)(l.code,{children:"void"})]}),"\n",(0,t.jsx)(l.p,{children:"Toggles the provided format on all the TextNodes in the Selection."}),"\n",(0,t.jsx)(l.h4,{id:"parameters-17",children:"Parameters"}),"\n",(0,t.jsxs)(l.table,{children:[(0,t.jsx)(l.thead,{children:(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,t.jsx)(l.tbody,{children:(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"format"})}),(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#textformattype",children:(0,t.jsx)(l.code,{children:"TextFormatType"})})}),(0,t.jsx)(l.td,{style:{textAlign:"left"},children:"a string TextFormatType to toggle on the TextNodes in the selection"})]})})]}),"\n",(0,t.jsx)(l.h4,{id:"returns-27",children:"Returns"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.code,{children:"void"})}),"\n",(0,t.jsx)(l.h4,{id:"defined-in-33",children:"Defined in"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalSelection.ts#L697",children:"packages/lexical/src/LexicalSelection.ts:697"})})]})}function x(e={}){let{wrapper:l}={...(0,s.a)(),...e.components};return l?(0,t.jsx)(l,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},22840:function(e,l,i){i.d(l,{Z:()=>d,a:()=>c});var n=i(2784);let t={},s=n.createContext(t);function c(e){let l=n.useContext(s);return n.useMemo(function(){return"function"==typeof e?e(l):{...l,...e}},[l,e])}function d(e){let l;return l=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),n.createElement(s.Provider,{value:l},e.children)}}}]);