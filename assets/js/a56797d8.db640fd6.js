"use strict";(self.webpackChunk_lexical_website=self.webpackChunk_lexical_website||[]).push([["9305"],{56920:function(e,l,i){i.r(l),i.d(l,{frontMatter:()=>t,default:()=>h,contentTitle:()=>c,assets:()=>r,toc:()=>a,metadata:()=>n});var n=JSON.parse('{"id":"api/modules/lexical","title":"Module: lexical","description":"Classes","source":"@site/docs/api/modules/lexical.md","sourceDirName":"api/modules","slug":"/api/modules/lexical","permalink":"/lexical/docs/api/modules/lexical","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","frontMatter":{"id":"lexical","title":"Module: lexical","custom_edit_url":null},"sidebar":"api","previous":{"title":"Table of Contents","permalink":"/lexical/docs/api/modules"},"next":{"title":"@lexical/clipboard","permalink":"/lexical/docs/api/modules/lexical_clipboard"}}'),d=i(52322),s=i(22840);let t={id:"lexical",title:"Module: lexical",custom_edit_url:null},c=void 0,r={},a=[{value:"Classes",id:"classes",level:2},{value:"Interfaces",id:"interfaces",level:2},{value:"Type Aliases",id:"type-aliases",level:2},{value:"AnyStateConfig",id:"anystateconfig",level:3},{value:"Defined in",id:"defined-in",level:4},{value:"BaseStaticNodeConfig",id:"basestaticnodeconfig",level:3},{value:"Defined in",id:"defined-in-1",level:4},{value:"CaretDirection",id:"caretdirection",level:3},{value:"Defined in",id:"defined-in-2",level:4},{value:"CaretType",id:"carettype",level:3},{value:"Defined in",id:"defined-in-3",level:4},{value:"CommandListener",id:"commandlistener",level:3},{value:"Type parameters",id:"type-parameters",level:4},{value:"Type declaration",id:"type-declaration",level:4},{value:"Parameters",id:"parameters",level:5},{value:"Returns",id:"returns",level:5},{value:"Defined in",id:"defined-in-4",level:4},{value:"CommandListenerPriority",id:"commandlistenerpriority",level:3},{value:"Defined in",id:"defined-in-5",level:4},{value:"CommandPayloadType",id:"commandpayloadtype",level:3},{value:"Type parameters",id:"type-parameters-1",level:4},{value:"Defined in",id:"defined-in-6",level:4},{value:"CommonAncestorResult",id:"commonancestorresult",level:3},{value:"Type parameters",id:"type-parameters-2",level:4},{value:"Defined in",id:"defined-in-7",level:4},{value:"CreateEditorArgs",id:"createeditorargs",level:3},{value:"Type declaration",id:"type-declaration-1",level:4},{value:"Defined in",id:"defined-in-8",level:4},{value:"DOMChildConversion",id:"domchildconversion",level:3},{value:"Type declaration",id:"type-declaration-2",level:4},{value:"Parameters",id:"parameters-1",level:5},{value:"Returns",id:"returns-1",level:5},{value:"Defined in",id:"defined-in-9",level:4},{value:"DOMConversion",id:"domconversion",level:3},{value:"Type parameters",id:"type-parameters-3",level:4},{value:"Type declaration",id:"type-declaration-3",level:4},{value:"Defined in",id:"defined-in-10",level:4},{value:"DOMConversionFn",id:"domconversionfn",level:3},{value:"Type parameters",id:"type-parameters-4",level:4},{value:"Type declaration",id:"type-declaration-4",level:4},{value:"Parameters",id:"parameters-2",level:5},{value:"Returns",id:"returns-2",level:5},{value:"Defined in",id:"defined-in-11",level:4},{value:"DOMConversionMap",id:"domconversionmap",level:3},{value:"Type parameters",id:"type-parameters-5",level:4},{value:"Defined in",id:"defined-in-12",level:4},{value:"DOMConversionOutput",id:"domconversionoutput",level:3},{value:"Type declaration",id:"type-declaration-5",level:4},{value:"Defined in",id:"defined-in-13",level:4},{value:"DOMExportOutput",id:"domexportoutput",level:3},{value:"Type declaration",id:"type-declaration-6",level:4},{value:"Defined in",id:"defined-in-14",level:4},{value:"DOMExportOutputMap",id:"domexportoutputmap",level:3},{value:"Defined in",id:"defined-in-15",level:4},{value:"EditableListener",id:"editablelistener",level:3},{value:"Type declaration",id:"type-declaration-7",level:4},{value:"Parameters",id:"parameters-3",level:5},{value:"Returns",id:"returns-3",level:5},{value:"Defined in",id:"defined-in-16",level:4},{value:"EditorConfig",id:"editorconfig",level:3},{value:"Type declaration",id:"type-declaration-8",level:4},{value:"Defined in",id:"defined-in-17",level:4},{value:"EditorSetOptions",id:"editorsetoptions",level:3},{value:"Type declaration",id:"type-declaration-9",level:4},{value:"Defined in",id:"defined-in-18",level:4},{value:"EditorThemeClassName",id:"editorthemeclassname",level:3},{value:"Defined in",id:"defined-in-19",level:4},{value:"EditorThemeClasses",id:"editorthemeclasses",level:3},{value:"Index signature",id:"index-signature",level:4},{value:"Type declaration",id:"type-declaration-10",level:4},{value:"Defined in",id:"defined-in-20",level:4},{value:"EditorUpdateOptions",id:"editorupdateoptions",level:3},{value:"Type declaration",id:"type-declaration-11",level:4},{value:"Defined in",id:"defined-in-21",level:4},{value:"ElementFormatType",id:"elementformattype",level:3},{value:"Defined in",id:"defined-in-22",level:4},{value:"ElementPoint",id:"elementpoint",level:3},{value:"Type declaration",id:"type-declaration-12",level:4},{value:"Defined in",id:"defined-in-23",level:4},{value:"EventHandler",id:"eventhandler",level:3},{value:"Type declaration",id:"type-declaration-13",level:4},{value:"Parameters",id:"parameters-4",level:5},{value:"Returns",id:"returns-4",level:5},{value:"Defined in",id:"defined-in-24",level:4},{value:"FlipDirection",id:"flipdirection",level:3},{value:"Type parameters",id:"type-parameters-6",level:4},{value:"Defined in",id:"defined-in-25",level:4},{value:"HTMLConfig",id:"htmlconfig",level:3},{value:"Type declaration",id:"type-declaration-14",level:4},{value:"Defined in",id:"defined-in-26",level:4},{value:"Klass",id:"klass",level:3},{value:"Type parameters",id:"type-parameters-7",level:4},{value:"Defined in",id:"defined-in-27",level:4},{value:"KlassConstructor",id:"klassconstructor",level:3},{value:"Type parameters",id:"type-parameters-8",level:4},{value:"Defined in",id:"defined-in-28",level:4},{value:"LexicalCommand",id:"lexicalcommand",level:3},{value:"Type parameters",id:"type-parameters-9",level:4},{value:"Type declaration",id:"type-declaration-15",level:4},{value:"Defined in",id:"defined-in-29",level:4},{value:"LexicalExportJSON",id:"lexicalexportjson",level:3},{value:"Type parameters",id:"type-parameters-10",level:4},{value:"Defined in",id:"defined-in-30",level:4},{value:"LexicalNodeConfig",id:"lexicalnodeconfig",level:3},{value:"Defined in",id:"defined-in-31",level:4},{value:"LexicalNodeReplacement",id:"lexicalnodereplacement",level:3},{value:"Type declaration",id:"type-declaration-16",level:4},{value:"Defined in",id:"defined-in-32",level:4},{value:"LexicalUpdateJSON",id:"lexicalupdatejson",level:3},{value:"Type parameters",id:"type-parameters-11",level:4},{value:"Defined in",id:"defined-in-33",level:4},{value:"MutationListener",id:"mutationlistener",level:3},{value:"Type declaration",id:"type-declaration-17",level:4},{value:"Parameters",id:"parameters-5",level:5},{value:"Returns",id:"returns-5",level:5},{value:"Defined in",id:"defined-in-34",level:4},{value:"NodeCaret",id:"nodecaret",level:3},{value:"Type parameters",id:"type-parameters-12",level:4},{value:"Defined in",id:"defined-in-35",level:4},{value:"NodeKey",id:"nodekey",level:3},{value:"Defined in",id:"defined-in-36",level:4},{value:"NodeMap",id:"nodemap",level:3},{value:"Defined in",id:"defined-in-37",level:4},{value:"NodeMutation",id:"nodemutation",level:3},{value:"Defined in",id:"defined-in-38",level:4},{value:"NodeStateJSON",id:"nodestatejson",level:3},{value:"Type parameters",id:"type-parameters-13",level:4},{value:"Defined in",id:"defined-in-39",level:4},{value:"PasteCommandType",id:"pastecommandtype",level:3},{value:"Defined in",id:"defined-in-40",level:4},{value:"PointCaret",id:"pointcaret",level:3},{value:"Type parameters",id:"type-parameters-14",level:4},{value:"Defined in",id:"defined-in-41",level:4},{value:"PointType",id:"pointtype",level:3},{value:"Defined in",id:"defined-in-42",level:4},{value:"RootListener",id:"rootlistener",level:3},{value:"Type declaration",id:"type-declaration-18",level:4},{value:"Parameters",id:"parameters-6",level:5},{value:"Returns",id:"returns-6",level:5},{value:"Defined in",id:"defined-in-43",level:4},{value:"RootMode",id:"rootmode",level:3},{value:"Defined in",id:"defined-in-44",level:4},{value:"SerializedEditor",id:"serializededitor",level:3},{value:"Type declaration",id:"type-declaration-19",level:4},{value:"Defined in",id:"defined-in-45",level:4},{value:"SerializedElementNode",id:"serializedelementnode",level:3},{value:"Type parameters",id:"type-parameters-15",level:4},{value:"Defined in",id:"defined-in-46",level:4},{value:"SerializedLexicalNode",id:"serializedlexicalnode",level:3},{value:"Type declaration",id:"type-declaration-20",level:4},{value:"Defined in",id:"defined-in-47",level:4},{value:"SerializedLineBreakNode",id:"serializedlinebreaknode",level:3},{value:"Defined in",id:"defined-in-48",level:4},{value:"SerializedParagraphNode",id:"serializedparagraphnode",level:3},{value:"Defined in",id:"defined-in-49",level:4},{value:"SerializedRootNode",id:"serializedrootnode",level:3},{value:"Type parameters",id:"type-parameters-16",level:4},{value:"Defined in",id:"defined-in-50",level:4},{value:"SerializedTabNode",id:"serializedtabnode",level:3},{value:"Defined in",id:"defined-in-51",level:4},{value:"SerializedTextNode",id:"serializedtextnode",level:3},{value:"Defined in",id:"defined-in-52",level:4},{value:"Spread",id:"spread",level:3},{value:"Type parameters",id:"type-parameters-17",level:4},{value:"Defined in",id:"defined-in-53",level:4},{value:"StateConfigKey",id:"stateconfigkey",level:3},{value:"Type parameters",id:"type-parameters-18",level:4},{value:"Defined in",id:"defined-in-54",level:4},{value:"StateConfigValue",id:"stateconfigvalue",level:3},{value:"Type parameters",id:"type-parameters-19",level:4},{value:"Defined in",id:"defined-in-55",level:4},{value:"StateValueOrUpdater",id:"statevalueorupdater",level:3},{value:"Type parameters",id:"type-parameters-20",level:4},{value:"Defined in",id:"defined-in-56",level:4},{value:"StaticNodeConfig",id:"staticnodeconfig",level:3},{value:"Type parameters",id:"type-parameters-21",level:4},{value:"Defined in",id:"defined-in-57",level:4},{value:"TextFormatType",id:"textformattype",level:3},{value:"Defined in",id:"defined-in-58",level:4},{value:"TextModeType",id:"textmodetype",level:3},{value:"Defined in",id:"defined-in-59",level:4},{value:"TextPoint",id:"textpoint",level:3},{value:"Type declaration",id:"type-declaration-21",level:4},{value:"Defined in",id:"defined-in-60",level:4},{value:"TextPointCaretSliceTuple",id:"textpointcaretslicetuple",level:3},{value:"Type parameters",id:"type-parameters-22",level:4},{value:"Defined in",id:"defined-in-61",level:4},{value:"Transform",id:"transform",level:3},{value:"Type parameters",id:"type-parameters-23",level:4},{value:"Type declaration",id:"type-declaration-22",level:4},{value:"Parameters",id:"parameters-7",level:5},{value:"Returns",id:"returns-7",level:5},{value:"Defined in",id:"defined-in-62",level:4},{value:"UpdateListener",id:"updatelistener",level:3},{value:"Type declaration",id:"type-declaration-23",level:4},{value:"Parameters",id:"parameters-8",level:5},{value:"Returns",id:"returns-8",level:5},{value:"Defined in",id:"defined-in-63",level:4},{value:"UpdateTag",id:"updatetag",level:3},{value:"Defined in",id:"defined-in-64",level:4},{value:"ValueOrUpdater",id:"valueorupdater",level:3},{value:"Type parameters",id:"type-parameters-24",level:4},{value:"Defined in",id:"defined-in-65",level:4},{value:"Variables",id:"variables",level:2},{value:"BLUR_COMMAND",id:"blur_command",level:3},{value:"Defined in",id:"defined-in-66",level:4},{value:"CAN_REDO_COMMAND",id:"can_redo_command",level:3},{value:"Defined in",id:"defined-in-67",level:4},{value:"CAN_UNDO_COMMAND",id:"can_undo_command",level:3},{value:"Defined in",id:"defined-in-68",level:4},{value:"CLEAR_EDITOR_COMMAND",id:"clear_editor_command",level:3},{value:"Defined in",id:"defined-in-69",level:4},{value:"CLEAR_HISTORY_COMMAND",id:"clear_history_command",level:3},{value:"Defined in",id:"defined-in-70",level:4},{value:"CLICK_COMMAND",id:"click_command",level:3},{value:"Defined in",id:"defined-in-71",level:4},{value:"COLLABORATION_TAG",id:"collaboration_tag",level:3},{value:"Defined in",id:"defined-in-72",level:4},{value:"COMMAND_PRIORITY_CRITICAL",id:"command_priority_critical",level:3},{value:"Defined in",id:"defined-in-73",level:4},{value:"COMMAND_PRIORITY_EDITOR",id:"command_priority_editor",level:3},{value:"Defined in",id:"defined-in-74",level:4},{value:"COMMAND_PRIORITY_HIGH",id:"command_priority_high",level:3},{value:"Defined in",id:"defined-in-75",level:4},{value:"COMMAND_PRIORITY_LOW",id:"command_priority_low",level:3},{value:"Defined in",id:"defined-in-76",level:4},{value:"COMMAND_PRIORITY_NORMAL",id:"command_priority_normal",level:3},{value:"Defined in",id:"defined-in-77",level:4},{value:"CONTROLLED_TEXT_INSERTION_COMMAND",id:"controlled_text_insertion_command",level:3},{value:"Defined in",id:"defined-in-78",level:4},{value:"COPY_COMMAND",id:"copy_command",level:3},{value:"Defined in",id:"defined-in-79",level:4},{value:"CUT_COMMAND",id:"cut_command",level:3},{value:"Defined in",id:"defined-in-80",level:4},{value:"DELETE_CHARACTER_COMMAND",id:"delete_character_command",level:3},{value:"Defined in",id:"defined-in-81",level:4},{value:"DELETE_LINE_COMMAND",id:"delete_line_command",level:3},{value:"Defined in",id:"defined-in-82",level:4},{value:"DELETE_WORD_COMMAND",id:"delete_word_command",level:3},{value:"Defined in",id:"defined-in-83",level:4},{value:"DRAGEND_COMMAND",id:"dragend_command",level:3},{value:"Defined in",id:"defined-in-84",level:4},{value:"DRAGOVER_COMMAND",id:"dragover_command",level:3},{value:"Defined in",id:"defined-in-85",level:4},{value:"DRAGSTART_COMMAND",id:"dragstart_command",level:3},{value:"Defined in",id:"defined-in-86",level:4},{value:"DROP_COMMAND",id:"drop_command",level:3},{value:"Defined in",id:"defined-in-87",level:4},{value:"FOCUS_COMMAND",id:"focus_command",level:3},{value:"Defined in",id:"defined-in-88",level:4},{value:"FORMAT_ELEMENT_COMMAND",id:"format_element_command",level:3},{value:"Defined in",id:"defined-in-89",level:4},{value:"FORMAT_TEXT_COMMAND",id:"format_text_command",level:3},{value:"Defined in",id:"defined-in-90",level:4},{value:"HISTORIC_TAG",id:"historic_tag",level:3},{value:"Defined in",id:"defined-in-91",level:4},{value:"HISTORY_MERGE_TAG",id:"history_merge_tag",level:3},{value:"Defined in",id:"defined-in-92",level:4},{value:"HISTORY_PUSH_TAG",id:"history_push_tag",level:3},{value:"Defined in",id:"defined-in-93",level:4},{value:"INDENT_CONTENT_COMMAND",id:"indent_content_command",level:3},{value:"Defined in",id:"defined-in-94",level:4},{value:"INSERT_LINE_BREAK_COMMAND",id:"insert_line_break_command",level:3},{value:"Defined in",id:"defined-in-95",level:4},{value:"INSERT_PARAGRAPH_COMMAND",id:"insert_paragraph_command",level:3},{value:"Defined in",id:"defined-in-96",level:4},{value:"INSERT_TAB_COMMAND",id:"insert_tab_command",level:3},{value:"Defined in",id:"defined-in-97",level:4},{value:"IS_ALL_FORMATTING",id:"is_all_formatting",level:3},{value:"Defined in",id:"defined-in-98",level:4},{value:"IS_BOLD",id:"is_bold",level:3},{value:"Defined in",id:"defined-in-99",level:4},{value:"IS_CODE",id:"is_code",level:3},{value:"Defined in",id:"defined-in-100",level:4},{value:"IS_HIGHLIGHT",id:"is_highlight",level:3},{value:"Defined in",id:"defined-in-101",level:4},{value:"IS_ITALIC",id:"is_italic",level:3},{value:"Defined in",id:"defined-in-102",level:4},{value:"IS_STRIKETHROUGH",id:"is_strikethrough",level:3},{value:"Defined in",id:"defined-in-103",level:4},{value:"IS_SUBSCRIPT",id:"is_subscript",level:3},{value:"Defined in",id:"defined-in-104",level:4},{value:"IS_SUPERSCRIPT",id:"is_superscript",level:3},{value:"Defined in",id:"defined-in-105",level:4},{value:"IS_UNDERLINE",id:"is_underline",level:3},{value:"Defined in",id:"defined-in-106",level:4},{value:"KEY_ARROW_DOWN_COMMAND",id:"key_arrow_down_command",level:3},{value:"Defined in",id:"defined-in-107",level:4},{value:"KEY_ARROW_LEFT_COMMAND",id:"key_arrow_left_command",level:3},{value:"Defined in",id:"defined-in-108",level:4},{value:"KEY_ARROW_RIGHT_COMMAND",id:"key_arrow_right_command",level:3},{value:"Defined in",id:"defined-in-109",level:4},{value:"KEY_ARROW_UP_COMMAND",id:"key_arrow_up_command",level:3},{value:"Defined in",id:"defined-in-110",level:4},{value:"KEY_BACKSPACE_COMMAND",id:"key_backspace_command",level:3},{value:"Defined in",id:"defined-in-111",level:4},{value:"KEY_DELETE_COMMAND",id:"key_delete_command",level:3},{value:"Defined in",id:"defined-in-112",level:4},{value:"KEY_DOWN_COMMAND",id:"key_down_command",level:3},{value:"Defined in",id:"defined-in-113",level:4},{value:"KEY_ENTER_COMMAND",id:"key_enter_command",level:3},{value:"Defined in",id:"defined-in-114",level:4},{value:"KEY_ESCAPE_COMMAND",id:"key_escape_command",level:3},{value:"Defined in",id:"defined-in-115",level:4},{value:"KEY_MODIFIER_COMMAND",id:"key_modifier_command",level:3},{value:"Defined in",id:"defined-in-116",level:4},{value:"KEY_SPACE_COMMAND",id:"key_space_command",level:3},{value:"Defined in",id:"defined-in-117",level:4},{value:"KEY_TAB_COMMAND",id:"key_tab_command",level:3},{value:"Defined in",id:"defined-in-118",level:4},{value:"MOVE_TO_END",id:"move_to_end",level:3},{value:"Defined in",id:"defined-in-119",level:4},{value:"MOVE_TO_START",id:"move_to_start",level:3},{value:"Defined in",id:"defined-in-120",level:4},{value:"NODE_STATE_KEY",id:"node_state_key",level:3},{value:"Defined in",id:"defined-in-121",level:4},{value:"OUTDENT_CONTENT_COMMAND",id:"outdent_content_command",level:3},{value:"Defined in",id:"defined-in-122",level:4},{value:"PASTE_COMMAND",id:"paste_command",level:3},{value:"Defined in",id:"defined-in-123",level:4},{value:"PASTE_TAG",id:"paste_tag",level:3},{value:"Defined in",id:"defined-in-124",level:4},{value:"REDO_COMMAND",id:"redo_command",level:3},{value:"Defined in",id:"defined-in-125",level:4},{value:"REMOVE_TEXT_COMMAND",id:"remove_text_command",level:3},{value:"Defined in",id:"defined-in-126",level:4},{value:"SELECTION_CHANGE_COMMAND",id:"selection_change_command",level:3},{value:"Defined in",id:"defined-in-127",level:4},{value:"SELECTION_INSERT_CLIPBOARD_NODES_COMMAND",id:"selection_insert_clipboard_nodes_command",level:3},{value:"Defined in",id:"defined-in-128",level:4},{value:"SELECT_ALL_COMMAND",id:"select_all_command",level:3},{value:"Defined in",id:"defined-in-129",level:4},{value:"SKIP_COLLAB_TAG",id:"skip_collab_tag",level:3},{value:"Defined in",id:"defined-in-130",level:4},{value:"SKIP_DOM_SELECTION_TAG",id:"skip_dom_selection_tag",level:3},{value:"Defined in",id:"defined-in-131",level:4},{value:"SKIP_SCROLL_INTO_VIEW_TAG",id:"skip_scroll_into_view_tag",level:3},{value:"Defined in",id:"defined-in-132",level:4},{value:"TEXT_TYPE_TO_FORMAT",id:"text_type_to_format",level:3},{value:"Defined in",id:"defined-in-133",level:4},{value:"UNDO_COMMAND",id:"undo_command",level:3},{value:"Defined in",id:"defined-in-134",level:4},{value:"Functions",id:"functions",level:2},{value:"$addUpdateTag",id:"addupdatetag",level:3},{value:"Parameters",id:"parameters-9",level:4},{value:"Returns",id:"returns-9",level:4},{value:"Defined in",id:"defined-in-135",level:4},{value:"$applyNodeReplacement",id:"applynodereplacement",level:3},{value:"Type parameters",id:"type-parameters-25",level:4},{value:"Parameters",id:"parameters-10",level:4},{value:"Returns",id:"returns-10",level:4},{value:"Defined in",id:"defined-in-136",level:4},{value:"$caretFromPoint",id:"caretfrompoint",level:3},{value:"Type parameters",id:"type-parameters-26",level:4},{value:"Parameters",id:"parameters-11",level:4},{value:"Returns",id:"returns-11",level:4},{value:"Defined in",id:"defined-in-137",level:4},{value:"$caretRangeFromSelection",id:"caretrangefromselection",level:3},{value:"Parameters",id:"parameters-12",level:4},{value:"Returns",id:"returns-12",level:4},{value:"Defined in",id:"defined-in-138",level:4},{value:"$cloneWithProperties",id:"clonewithproperties",level:3},{value:"Type parameters",id:"type-parameters-27",level:4},{value:"Parameters",id:"parameters-13",level:4},{value:"Returns",id:"returns-13",level:4},{value:"Defined in",id:"defined-in-139",level:4},{value:"$comparePointCaretNext",id:"comparepointcaretnext",level:3},{value:"Parameters",id:"parameters-14",level:4},{value:"Returns",id:"returns-14",level:4},{value:"Defined in",id:"defined-in-140",level:4},{value:"$copyNode",id:"copynode",level:3},{value:"Type parameters",id:"type-parameters-28",level:4},{value:"Parameters",id:"parameters-15",level:4},{value:"Returns",id:"returns-15",level:4},{value:"Defined in",id:"defined-in-141",level:4},{value:"$create",id:"create",level:3},{value:"Type parameters",id:"type-parameters-29",level:4},{value:"Parameters",id:"parameters-16",level:4},{value:"Returns",id:"returns-16",level:4},{value:"Defined in",id:"defined-in-142",level:4},{value:"$createLineBreakNode",id:"createlinebreaknode",level:3},{value:"Returns",id:"returns-17",level:4},{value:"Defined in",id:"defined-in-143",level:4},{value:"$createNodeSelection",id:"createnodeselection",level:3},{value:"Returns",id:"returns-18",level:4},{value:"Defined in",id:"defined-in-144",level:4},{value:"$createParagraphNode",id:"createparagraphnode",level:3},{value:"Returns",id:"returns-19",level:4},{value:"Defined in",id:"defined-in-145",level:4},{value:"$createPoint",id:"createpoint",level:3},{value:"Parameters",id:"parameters-17",level:4},{value:"Returns",id:"returns-20",level:4},{value:"Defined in",id:"defined-in-146",level:4},{value:"$createRangeSelection",id:"createrangeselection",level:3},{value:"Returns",id:"returns-21",level:4},{value:"Defined in",id:"defined-in-147",level:4},{value:"$createRangeSelectionFromDom",id:"createrangeselectionfromdom",level:3},{value:"Parameters",id:"parameters-18",level:4},{value:"Returns",id:"returns-22",level:4},{value:"Defined in",id:"defined-in-148",level:4},{value:"$createTabNode",id:"createtabnode",level:3},{value:"Returns",id:"returns-23",level:4},{value:"Defined in",id:"defined-in-149",level:4},{value:"$createTextNode",id:"createtextnode",level:3},{value:"Parameters",id:"parameters-19",level:4},{value:"Returns",id:"returns-24",level:4},{value:"Defined in",id:"defined-in-150",level:4},{value:"$extendCaretToRange",id:"extendcarettorange",level:3},{value:"Type parameters",id:"type-parameters-30",level:4},{value:"Parameters",id:"parameters-20",level:4},{value:"Returns",id:"returns-25",level:4},{value:"Defined in",id:"defined-in-151",level:4},{value:"$getAdjacentChildCaret",id:"getadjacentchildcaret",level:3},{value:"Type parameters",id:"type-parameters-31",level:4},{value:"Parameters",id:"parameters-21",level:4},{value:"Returns",id:"returns-26",level:4},{value:"Defined in",id:"defined-in-152",level:4},{value:"$getAdjacentNode",id:"getadjacentnode",level:3},{value:"Parameters",id:"parameters-22",level:4},{value:"Returns",id:"returns-27",level:4},{value:"Defined in",id:"defined-in-153",level:4},{value:"$getAdjacentSiblingOrParentSiblingCaret",id:"getadjacentsiblingorparentsiblingcaret",level:3},{value:"Type parameters",id:"type-parameters-32",level:4},{value:"Parameters",id:"parameters-23",level:4},{value:"Returns",id:"returns-28",level:4},{value:"Defined in",id:"defined-in-154",level:4},{value:"$getCaretInDirection",id:"getcaretindirection",level:3},{value:"Type parameters",id:"type-parameters-33",level:4},{value:"Parameters",id:"parameters-24",level:4},{value:"Returns",id:"returns-29",level:4},{value:"Defined in",id:"defined-in-155",level:4},{value:"$getCaretRange",id:"getcaretrange",level:3},{value:"Type parameters",id:"type-parameters-34",level:4},{value:"Parameters",id:"parameters-25",level:4},{value:"Returns",id:"returns-30",level:4},{value:"Defined in",id:"defined-in-156",level:4},{value:"$getCaretRangeInDirection",id:"getcaretrangeindirection",level:3},{value:"Type parameters",id:"type-parameters-35",level:4},{value:"Parameters",id:"parameters-26",level:4},{value:"Returns",id:"returns-31",level:4},{value:"Defined in",id:"defined-in-157",level:4},{value:"$getCharacterOffsets",id:"getcharacteroffsets",level:3},{value:"Parameters",id:"parameters-27",level:4},{value:"Returns",id:"returns-32",level:4},{value:"Defined in",id:"defined-in-158",level:4},{value:"$getChildCaret",id:"getchildcaret",level:3},{value:"Type parameters",id:"type-parameters-36",level:4},{value:"Parameters",id:"parameters-28",level:4},{value:"Returns",id:"returns-33",level:4},{value:"Defined in",id:"defined-in-159",level:4},{value:"$getChildCaretAtIndex",id:"getchildcaretatindex",level:3},{value:"Type parameters",id:"type-parameters-37",level:4},{value:"Parameters",id:"parameters-29",level:4},{value:"Returns",id:"returns-34",level:4},{value:"Defined in",id:"defined-in-160",level:4},{value:"$getChildCaretOrSelf",id:"getchildcaretorself",level:3},{value:"Type parameters",id:"type-parameters-38",level:4},{value:"Parameters",id:"parameters-30",level:4},{value:"Returns",id:"returns-35",level:4},{value:"Defined in",id:"defined-in-161",level:4},{value:"$getCollapsedCaretRange",id:"getcollapsedcaretrange",level:3},{value:"Type parameters",id:"type-parameters-39",level:4},{value:"Parameters",id:"parameters-31",level:4},{value:"Returns",id:"returns-36",level:4},{value:"Defined in",id:"defined-in-162",level:4},{value:"$getCommonAncestor",id:"getcommonancestor",level:3},{value:"Type parameters",id:"type-parameters-40",level:4},{value:"Parameters",id:"parameters-32",level:4},{value:"Returns",id:"returns-37",level:4},{value:"Defined in",id:"defined-in-163",level:4},{value:"$getCommonAncestorResultBranchOrder",id:"getcommonancestorresultbranchorder",level:3},{value:"Type parameters",id:"type-parameters-41",level:4},{value:"Parameters",id:"parameters-33",level:4},{value:"Returns",id:"returns-38",level:4},{value:"Defined in",id:"defined-in-164",level:4},{value:"$getEditor",id:"geteditor",level:3},{value:"Returns",id:"returns-39",level:4},{value:"Defined in",id:"defined-in-165",level:4},{value:"$getNearestNodeFromDOMNode",id:"getnearestnodefromdomnode",level:3},{value:"Parameters",id:"parameters-34",level:4},{value:"Returns",id:"returns-40",level:4},{value:"Defined in",id:"defined-in-166",level:4},{value:"$getNearestRootOrShadowRoot",id:"getnearestrootorshadowroot",level:3},{value:"Parameters",id:"parameters-35",level:4},{value:"Returns",id:"returns-41",level:4},{value:"Defined in",id:"defined-in-167",level:4},{value:"$getNodeByKey",id:"getnodebykey",level:3},{value:"Type parameters",id:"type-parameters-42",level:4},{value:"Parameters",id:"parameters-36",level:4},{value:"Returns",id:"returns-42",level:4},{value:"Defined in",id:"defined-in-168",level:4},{value:"$getNodeByKeyOrThrow",id:"getnodebykeyorthrow",level:3},{value:"Type parameters",id:"type-parameters-43",level:4},{value:"Parameters",id:"parameters-37",level:4},{value:"Returns",id:"returns-43",level:4},{value:"Defined in",id:"defined-in-169",level:4},{value:"$getPreviousSelection",id:"getpreviousselection",level:3},{value:"Returns",id:"returns-44",level:4},{value:"Defined in",id:"defined-in-170",level:4},{value:"$getRoot",id:"getroot",level:3},{value:"Returns",id:"returns-45",level:4},{value:"Defined in",id:"defined-in-171",level:4},{value:"$getSelection",id:"getselection",level:3},{value:"Returns",id:"returns-46",level:4},{value:"Defined in",id:"defined-in-172",level:4},{value:"$getSiblingCaret",id:"getsiblingcaret",level:3},{value:"Type parameters",id:"type-parameters-44",level:4},{value:"Parameters",id:"parameters-38",level:4},{value:"Returns",id:"returns-47",level:4},{value:"Defined in",id:"defined-in-173",level:4},{value:"Type parameters",id:"type-parameters-45",level:4},{value:"Parameters",id:"parameters-39",level:4},{value:"Returns",id:"returns-48",level:4},{value:"Defined in",id:"defined-in-174",level:4},{value:"$getState",id:"getstate",level:3},{value:"Type parameters",id:"type-parameters-46",level:4},{value:"Parameters",id:"parameters-40",level:4},{value:"Returns",id:"returns-49",level:4},{value:"Defined in",id:"defined-in-175",level:4},{value:"$getStateChange",id:"getstatechange",level:3},{value:"Type parameters",id:"type-parameters-47",level:4},{value:"Parameters",id:"parameters-41",level:4},{value:"Returns",id:"returns-50",level:4},{value:"Defined in",id:"defined-in-176",level:4},{value:"$getTextContent",id:"gettextcontent",level:3},{value:"Returns",id:"returns-51",level:4},{value:"Defined in",id:"defined-in-177",level:4},{value:"$getTextNodeOffset",id:"gettextnodeoffset",level:3},{value:"Parameters",id:"parameters-42",level:4},{value:"Returns",id:"returns-52",level:4},{value:"Defined in",id:"defined-in-178",level:4},{value:"$getTextPointCaret",id:"gettextpointcaret",level:3},{value:"Type parameters",id:"type-parameters-48",level:4},{value:"Parameters",id:"parameters-43",level:4},{value:"Returns",id:"returns-53",level:4},{value:"Defined in",id:"defined-in-179",level:4},{value:"Type parameters",id:"type-parameters-49",level:4},{value:"Parameters",id:"parameters-44",level:4},{value:"Returns",id:"returns-54",level:4},{value:"Defined in",id:"defined-in-180",level:4},{value:"$getTextPointCaretSlice",id:"gettextpointcaretslice",level:3},{value:"Type parameters",id:"type-parameters-50",level:4},{value:"Parameters",id:"parameters-45",level:4},{value:"Returns",id:"returns-55",level:4},{value:"Defined in",id:"defined-in-181",level:4},{value:"$hasAncestor",id:"hasancestor",level:3},{value:"Parameters",id:"parameters-46",level:4},{value:"Returns",id:"returns-56",level:4},{value:"Defined in",id:"defined-in-182",level:4},{value:"$hasUpdateTag",id:"hasupdatetag",level:3},{value:"Parameters",id:"parameters-47",level:4},{value:"Returns",id:"returns-57",level:4},{value:"Defined in",id:"defined-in-183",level:4},{value:"$insertNodes",id:"insertnodes",level:3},{value:"Parameters",id:"parameters-48",level:4},{value:"Returns",id:"returns-58",level:4},{value:"Defined in",id:"defined-in-184",level:4},{value:"$isBlockElementNode",id:"isblockelementnode",level:3},{value:"Parameters",id:"parameters-49",level:4},{value:"Returns",id:"returns-59",level:4},{value:"Defined in",id:"defined-in-185",level:4},{value:"$isChildCaret",id:"ischildcaret",level:3},{value:"Type parameters",id:"type-parameters-51",level:4},{value:"Parameters",id:"parameters-50",level:4},{value:"Returns",id:"returns-60",level:4},{value:"Defined in",id:"defined-in-186",level:4},{value:"$isDecoratorNode",id:"isdecoratornode",level:3},{value:"Type parameters",id:"type-parameters-52",level:4},{value:"Parameters",id:"parameters-51",level:4},{value:"Returns",id:"returns-61",level:4},{value:"Defined in",id:"defined-in-187",level:4},{value:"$isElementNode",id:"iselementnode",level:3},{value:"Parameters",id:"parameters-52",level:4},{value:"Returns",id:"returns-62",level:4},{value:"Defined in",id:"defined-in-188",level:4},{value:"$isExtendableTextPointCaret",id:"isextendabletextpointcaret",level:3},{value:"Type parameters",id:"type-parameters-53",level:4},{value:"Parameters",id:"parameters-53",level:4},{value:"Returns",id:"returns-63",level:4},{value:"Defined in",id:"defined-in-189",level:4},{value:"$isInlineElementOrDecoratorNode",id:"isinlineelementordecoratornode",level:3},{value:"Parameters",id:"parameters-54",level:4},{value:"Returns",id:"returns-64",level:4},{value:"Defined in",id:"defined-in-190",level:4},{value:"$isLeafNode",id:"isleafnode",level:3},{value:"Parameters",id:"parameters-55",level:4},{value:"Returns",id:"returns-65",level:4},{value:"Defined in",id:"defined-in-191",level:4},{value:"$isLineBreakNode",id:"islinebreaknode",level:3},{value:"Parameters",id:"parameters-56",level:4},{value:"Returns",id:"returns-66",level:4},{value:"Defined in",id:"defined-in-192",level:4},{value:"$isNodeCaret",id:"isnodecaret",level:3},{value:"Type parameters",id:"type-parameters-54",level:4},{value:"Parameters",id:"parameters-57",level:4},{value:"Returns",id:"returns-67",level:4},{value:"Defined in",id:"defined-in-193",level:4},{value:"$isNodeSelection",id:"isnodeselection",level:3},{value:"Parameters",id:"parameters-58",level:4},{value:"Returns",id:"returns-68",level:4},{value:"Defined in",id:"defined-in-194",level:4},{value:"$isParagraphNode",id:"isparagraphnode",level:3},{value:"Parameters",id:"parameters-59",level:4},{value:"Returns",id:"returns-69",level:4},{value:"Defined in",id:"defined-in-195",level:4},{value:"$isRangeSelection",id:"israngeselection",level:3},{value:"Parameters",id:"parameters-60",level:4},{value:"Returns",id:"returns-70",level:4},{value:"Defined in",id:"defined-in-196",level:4},{value:"$isRootNode",id:"isrootnode",level:3},{value:"Parameters",id:"parameters-61",level:4},{value:"Returns",id:"returns-71",level:4},{value:"Defined in",id:"defined-in-197",level:4},{value:"$isRootOrShadowRoot",id:"isrootorshadowroot",level:3},{value:"Parameters",id:"parameters-62",level:4},{value:"Returns",id:"returns-72",level:4},{value:"Defined in",id:"defined-in-198",level:4},{value:"$isSiblingCaret",id:"issiblingcaret",level:3},{value:"Type parameters",id:"type-parameters-55",level:4},{value:"Parameters",id:"parameters-63",level:4},{value:"Returns",id:"returns-73",level:4},{value:"Defined in",id:"defined-in-199",level:4},{value:"$isTabNode",id:"istabnode",level:3},{value:"Parameters",id:"parameters-64",level:4},{value:"Returns",id:"returns-74",level:4},{value:"Defined in",id:"defined-in-200",level:4},{value:"$isTextNode",id:"istextnode",level:3},{value:"Parameters",id:"parameters-65",level:4},{value:"Returns",id:"returns-75",level:4},{value:"Defined in",id:"defined-in-201",level:4},{value:"$isTextPointCaret",id:"istextpointcaret",level:3},{value:"Type parameters",id:"type-parameters-56",level:4},{value:"Parameters",id:"parameters-66",level:4},{value:"Returns",id:"returns-76",level:4},{value:"Defined in",id:"defined-in-202",level:4},{value:"$isTextPointCaretSlice",id:"istextpointcaretslice",level:3},{value:"Type parameters",id:"type-parameters-57",level:4},{value:"Parameters",id:"parameters-67",level:4},{value:"Returns",id:"returns-77",level:4},{value:"Defined in",id:"defined-in-203",level:4},{value:"$isTokenOrSegmented",id:"istokenorsegmented",level:3},{value:"Parameters",id:"parameters-68",level:4},{value:"Returns",id:"returns-78",level:4},{value:"Defined in",id:"defined-in-204",level:4},{value:"$isTokenOrTab",id:"istokenortab",level:3},{value:"Parameters",id:"parameters-69",level:4},{value:"Returns",id:"returns-79",level:4},{value:"Defined in",id:"defined-in-205",level:4},{value:"$nodesOfType",id:"nodesoftype",level:3},{value:"Type parameters",id:"type-parameters-58",level:4},{value:"Parameters",id:"parameters-70",level:4},{value:"Returns",id:"returns-80",level:4},{value:"Defined in",id:"defined-in-206",level:4},{value:"$normalizeCaret",id:"normalizecaret",level:3},{value:"Type parameters",id:"type-parameters-59",level:4},{value:"Parameters",id:"parameters-71",level:4},{value:"Returns",id:"returns-81",level:4},{value:"Defined in",id:"defined-in-207",level:4},{value:"$normalizeSelection__EXPERIMENTAL",id:"normalizeselection__experimental",level:3},{value:"Parameters",id:"parameters-72",level:4},{value:"Returns",id:"returns-82",level:4},{value:"Defined in",id:"defined-in-208",level:4},{value:"$onUpdate",id:"onupdate",level:3},{value:"Parameters",id:"parameters-73",level:4},{value:"Returns",id:"returns-83",level:4},{value:"Defined in",id:"defined-in-209",level:4},{value:"$parseSerializedNode",id:"parseserializednode",level:3},{value:"Parameters",id:"parameters-74",level:4},{value:"Returns",id:"returns-84",level:4},{value:"Defined in",id:"defined-in-210",level:4},{value:"$removeTextFromCaretRange",id:"removetextfromcaretrange",level:3},{value:"Type parameters",id:"type-parameters-60",level:4},{value:"Parameters",id:"parameters-75",level:4},{value:"Returns",id:"returns-85",level:4},{value:"Defined in",id:"defined-in-211",level:4},{value:"$rewindSiblingCaret",id:"rewindsiblingcaret",level:3},{value:"Type parameters",id:"type-parameters-61",level:4},{value:"Parameters",id:"parameters-76",level:4},{value:"Returns",id:"returns-86",level:4},{value:"Defined in",id:"defined-in-212",level:4},{value:"$selectAll",id:"selectall",level:3},{value:"Parameters",id:"parameters-77",level:4},{value:"Returns",id:"returns-87",level:4},{value:"Defined in",id:"defined-in-213",level:4},{value:"$setCompositionKey",id:"setcompositionkey",level:3},{value:"Parameters",id:"parameters-78",level:4},{value:"Returns",id:"returns-88",level:4},{value:"Defined in",id:"defined-in-214",level:4},{value:"$setPointFromCaret",id:"setpointfromcaret",level:3},{value:"Type parameters",id:"type-parameters-62",level:4},{value:"Parameters",id:"parameters-79",level:4},{value:"Returns",id:"returns-89",level:4},{value:"Defined in",id:"defined-in-215",level:4},{value:"$setSelection",id:"setselection",level:3},{value:"Parameters",id:"parameters-80",level:4},{value:"Returns",id:"returns-90",level:4},{value:"Defined in",id:"defined-in-216",level:4},{value:"$setSelectionFromCaretRange",id:"setselectionfromcaretrange",level:3},{value:"Parameters",id:"parameters-81",level:4},{value:"Returns",id:"returns-91",level:4},{value:"Defined in",id:"defined-in-217",level:4},{value:"$setState",id:"setstate",level:3},{value:"Type parameters",id:"type-parameters-63",level:4},{value:"Parameters",id:"parameters-82",level:4},{value:"Returns",id:"returns-92",level:4},{value:"Defined in",id:"defined-in-218",level:4},{value:"$splitAtPointCaretNext",id:"splitatpointcaretnext",level:3},{value:"Parameters",id:"parameters-83",level:4},{value:"Returns",id:"returns-93",level:4},{value:"Defined in",id:"defined-in-219",level:4},{value:"$splitNode",id:"splitnode",level:3},{value:"Parameters",id:"parameters-84",level:4},{value:"Returns",id:"returns-94",level:4},{value:"Defined in",id:"defined-in-220",level:4},{value:"$updateRangeSelectionFromCaretRange",id:"updaterangeselectionfromcaretrange",level:3},{value:"Parameters",id:"parameters-85",level:4},{value:"Returns",id:"returns-95",level:4},{value:"Defined in",id:"defined-in-221",level:4},{value:"buildImportMap",id:"buildimportmap",level:3},{value:"Type parameters",id:"type-parameters-64",level:4},{value:"Parameters",id:"parameters-86",level:4},{value:"Returns",id:"returns-96",level:4},{value:"Defined in",id:"defined-in-222",level:4},{value:"createCommand",id:"createcommand",level:3},{value:"Type parameters",id:"type-parameters-65",level:4},{value:"Parameters",id:"parameters-87",level:4},{value:"Returns",id:"returns-97",level:4},{value:"Defined in",id:"defined-in-223",level:4},{value:"createEditor",id:"createeditor",level:3},{value:"Parameters",id:"parameters-88",level:4},{value:"Returns",id:"returns-98",level:4},{value:"Defined in",id:"defined-in-224",level:4},{value:"createState",id:"createstate",level:3},{value:"Type parameters",id:"type-parameters-66",level:4},{value:"Parameters",id:"parameters-89",level:4},{value:"Returns",id:"returns-99",level:4},{value:"Defined in",id:"defined-in-225",level:4},{value:"flipDirection",id:"flipdirection-1",level:3},{value:"Type parameters",id:"type-parameters-67",level:4},{value:"Parameters",id:"parameters-90",level:4},{value:"Returns",id:"returns-100",level:4},{value:"Defined in",id:"defined-in-226",level:4},{value:"getDOMOwnerDocument",id:"getdomownerdocument",level:3},{value:"Parameters",id:"parameters-91",level:4},{value:"Returns",id:"returns-101",level:4},{value:"Defined in",id:"defined-in-227",level:4},{value:"getDOMSelection",id:"getdomselection",level:3},{value:"Parameters",id:"parameters-92",level:4},{value:"Returns",id:"returns-102",level:4},{value:"Defined in",id:"defined-in-228",level:4},{value:"getDOMSelectionFromTarget",id:"getdomselectionfromtarget",level:3},{value:"Parameters",id:"parameters-93",level:4},{value:"Returns",id:"returns-103",level:4},{value:"Defined in",id:"defined-in-229",level:4},{value:"getDOMTextNode",id:"getdomtextnode",level:3},{value:"Parameters",id:"parameters-94",level:4},{value:"Returns",id:"returns-104",level:4},{value:"Defined in",id:"defined-in-230",level:4},{value:"getNearestEditorFromDOMNode",id:"getnearesteditorfromdomnode",level:3},{value:"Parameters",id:"parameters-95",level:4},{value:"Returns",id:"returns-105",level:4},{value:"Defined in",id:"defined-in-231",level:4},{value:"isBlockDomNode",id:"isblockdomnode",level:3},{value:"Parameters",id:"parameters-96",level:4},{value:"Returns",id:"returns-106",level:4},{value:"Defined in",id:"defined-in-232",level:4},{value:"isCurrentlyReadOnlyMode",id:"iscurrentlyreadonlymode",level:3},{value:"Returns",id:"returns-107",level:4},{value:"Defined in",id:"defined-in-233",level:4},{value:"isDOMDocumentNode",id:"isdomdocumentnode",level:3},{value:"Parameters",id:"parameters-97",level:4},{value:"Returns",id:"returns-108",level:4},{value:"Defined in",id:"defined-in-234",level:4},{value:"isDOMNode",id:"isdomnode",level:3},{value:"Parameters",id:"parameters-98",level:4},{value:"Returns",id:"returns-109",level:4},{value:"Defined in",id:"defined-in-235",level:4},{value:"isDOMTextNode",id:"isdomtextnode",level:3},{value:"Parameters",id:"parameters-99",level:4},{value:"Returns",id:"returns-110",level:4},{value:"Defined in",id:"defined-in-236",level:4},{value:"isDocumentFragment",id:"isdocumentfragment",level:3},{value:"Parameters",id:"parameters-100",level:4},{value:"Returns",id:"returns-111",level:4},{value:"Defined in",id:"defined-in-237",level:4},{value:"isExactShortcutMatch",id:"isexactshortcutmatch",level:3},{value:"Parameters",id:"parameters-101",level:4},{value:"Returns",id:"returns-112",level:4},{value:"Defined in",id:"defined-in-238",level:4},{value:"isHTMLAnchorElement",id:"ishtmlanchorelement",level:3},{value:"Parameters",id:"parameters-102",level:4},{value:"Returns",id:"returns-113",level:4},{value:"Defined in",id:"defined-in-239",level:4},{value:"isHTMLElement",id:"ishtmlelement",level:3},{value:"Parameters",id:"parameters-103",level:4},{value:"Returns",id:"returns-114",level:4},{value:"Defined in",id:"defined-in-240",level:4},{value:"isInlineDomNode",id:"isinlinedomnode",level:3},{value:"Parameters",id:"parameters-104",level:4},{value:"Returns",id:"returns-115",level:4},{value:"Defined in",id:"defined-in-241",level:4},{value:"isLexicalEditor",id:"islexicaleditor",level:3},{value:"Parameters",id:"parameters-105",level:4},{value:"Returns",id:"returns-116",level:4},{value:"Defined in",id:"defined-in-242",level:4},{value:"isModifierMatch",id:"ismodifiermatch",level:3},{value:"Parameters",id:"parameters-106",level:4},{value:"Returns",id:"returns-117",level:4},{value:"Defined in",id:"defined-in-243",level:4},{value:"isSelectionCapturedInDecoratorInput",id:"isselectioncapturedindecoratorinput",level:3},{value:"Parameters",id:"parameters-107",level:4},{value:"Returns",id:"returns-118",level:4},{value:"Defined in",id:"defined-in-244",level:4},{value:"isSelectionWithinEditor",id:"isselectionwithineditor",level:3},{value:"Parameters",id:"parameters-108",level:4},{value:"Returns",id:"returns-119",level:4},{value:"Defined in",id:"defined-in-245",level:4},{value:"makeStepwiseIterator",id:"makestepwiseiterator",level:3},{value:"Type parameters",id:"type-parameters-68",level:4},{value:"Parameters",id:"parameters-109",level:4},{value:"Returns",id:"returns-120",level:4},{value:"Defined in",id:"defined-in-246",level:4},{value:"resetRandomKey",id:"resetrandomkey",level:3},{value:"Returns",id:"returns-121",level:4},{value:"Defined in",id:"defined-in-247",level:4},{value:"setNodeIndentFromDOM",id:"setnodeindentfromdom",level:3},{value:"Parameters",id:"parameters-110",level:4},{value:"Returns",id:"returns-122",level:4},{value:"Defined in",id:"defined-in-248",level:4}];function x(e){let l={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",h5:"h5",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.a)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(l.h2,{id:"classes",children:"Classes"}),"\n",(0,d.jsxs)(l.ul,{children:["\n",(0,d.jsx)(l.li,{children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ArtificialNode__DO_NOT_USE",children:"ArtificialNode__DO_NOT_USE"})}),"\n",(0,d.jsx)(l.li,{children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.DecoratorNode",children:"DecoratorNode"})}),"\n",(0,d.jsx)(l.li,{children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.EditorState",children:"EditorState"})}),"\n",(0,d.jsx)(l.li,{children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementDOMSlot",children:"ElementDOMSlot"})}),"\n",(0,d.jsx)(l.li,{children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:"ElementNode"})}),"\n",(0,d.jsx)(l.li,{children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalEditor",children:"LexicalEditor"})}),"\n",(0,d.jsx)(l.li,{children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:"LexicalNode"})}),"\n",(0,d.jsx)(l.li,{children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LineBreakNode",children:"LineBreakNode"})}),"\n",(0,d.jsx)(l.li,{children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.NodeSelection",children:"NodeSelection"})}),"\n",(0,d.jsx)(l.li,{children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ParagraphNode",children:"ParagraphNode"})}),"\n",(0,d.jsx)(l.li,{children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.Point",children:"Point"})}),"\n",(0,d.jsx)(l.li,{children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.RangeSelection",children:"RangeSelection"})}),"\n",(0,d.jsx)(l.li,{children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.RootNode",children:"RootNode"})}),"\n",(0,d.jsx)(l.li,{children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.StateConfig",children:"StateConfig"})}),"\n",(0,d.jsx)(l.li,{children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.TabNode",children:"TabNode"})}),"\n",(0,d.jsx)(l.li,{children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.TextNode",children:"TextNode"})}),"\n"]}),"\n",(0,d.jsx)(l.h2,{id:"interfaces",children:"Interfaces"}),"\n",(0,d.jsxs)(l.ul,{children:["\n",(0,d.jsx)(l.li,{children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.BaseCaret",children:"BaseCaret"})}),"\n",(0,d.jsx)(l.li,{children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.BaseSelection",children:"BaseSelection"})}),"\n",(0,d.jsx)(l.li,{children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.CaretRange",children:"CaretRange"})}),"\n",(0,d.jsx)(l.li,{children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.ChildCaret",children:"ChildCaret"})}),"\n",(0,d.jsx)(l.li,{children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.CommonAncestorResultAncestor",children:"CommonAncestorResultAncestor"})}),"\n",(0,d.jsx)(l.li,{children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.CommonAncestorResultBranch",children:"CommonAncestorResultBranch"})}),"\n",(0,d.jsx)(l.li,{children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.CommonAncestorResultDescendant",children:"CommonAncestorResultDescendant"})}),"\n",(0,d.jsx)(l.li,{children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.CommonAncestorResultSame",children:"CommonAncestorResultSame"})}),"\n",(0,d.jsx)(l.li,{children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.EditorStateReadOptions",children:"EditorStateReadOptions"})}),"\n",(0,d.jsx)(l.li,{children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.SerializedEditorState",children:"SerializedEditorState"})}),"\n",(0,d.jsx)(l.li,{children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.SiblingCaret",children:"SiblingCaret"})}),"\n",(0,d.jsx)(l.li,{children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.SplitAtPointCaretNextOptions",children:"SplitAtPointCaretNextOptions"})}),"\n",(0,d.jsx)(l.li,{children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.StateValueConfig",children:"StateValueConfig"})}),"\n",(0,d.jsx)(l.li,{children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.StaticNodeConfigValue",children:"StaticNodeConfigValue"})}),"\n",(0,d.jsx)(l.li,{children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.StepwiseIteratorConfig",children:"StepwiseIteratorConfig"})}),"\n",(0,d.jsx)(l.li,{children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.TextPointCaret",children:"TextPointCaret"})}),"\n",(0,d.jsx)(l.li,{children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.TextPointCaretSlice",children:"TextPointCaretSlice"})}),"\n",(0,d.jsx)(l.li,{children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.UpdateListenerPayload",children:"UpdateListenerPayload"})}),"\n"]}),"\n",(0,d.jsx)(l.h2,{id:"type-aliases",children:"Type Aliases"}),"\n",(0,d.jsx)(l.h3,{id:"anystateconfig",children:"AnyStateConfig"}),"\n",(0,d.jsxs)(l.p,{children:["\u01AC ",(0,d.jsx)(l.strong,{children:"AnyStateConfig"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.StateConfig",children:(0,d.jsx)(l.code,{children:"StateConfig"})}),"<",(0,d.jsx)(l.code,{children:"any"}),", ",(0,d.jsx)(l.code,{children:"any"}),">"]}),"\n",(0,d.jsx)(l.p,{children:"For advanced use cases, using this type is not recommended unless\nit is required (due to TypeScript's lack of features like\nhigher-kinded types)."}),"\n",(0,d.jsxs)(l.p,{children:["A ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.StateConfig",children:"StateConfig"})," type with any key and any value that can be\nused in situations where the key and value type can not be known,\nsuch as in a generic constraint when working with a collection of\nStateConfig."]}),"\n",(0,d.jsxs)(l.p,{children:[(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#stateconfigkey",children:"StateConfigKey"})," and ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#stateconfigvalue",children:"StateConfigValue"})," will be\nuseful when this is used as a generic constraint."]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNodeState.ts#L288",children:"packages/lexical/src/LexicalNodeState.ts:288"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"basestaticnodeconfig",children:"BaseStaticNodeConfig"}),"\n",(0,d.jsxs)(l.p,{children:["\u01AC ",(0,d.jsx)(l.strong,{children:"BaseStaticNodeConfig"}),": { readonly [K in string]?: StaticNodeConfigValue<LexicalNode, string> }"]}),"\n",(0,d.jsx)(l.p,{children:"This is the type of LexicalNode.$config() that can be\noverridden by subclasses."}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-1",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L169",children:"packages/lexical/src/LexicalNode.ts:169"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"caretdirection",children:"CaretDirection"}),"\n",(0,d.jsxs)(l.p,{children:["\u01AC ",(0,d.jsx)(l.strong,{children:"CaretDirection"}),": ",(0,d.jsx)(l.code,{children:'"next"'})," | ",(0,d.jsx)(l.code,{children:'"previous"'})]}),"\n",(0,d.jsx)(l.p,{children:"The direction of a caret, 'next' points towards the end of the document\nand 'previous' points towards the beginning"}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-2",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L22",children:"packages/lexical/src/caret/LexicalCaret.ts:22"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"carettype",children:"CaretType"}),"\n",(0,d.jsxs)(l.p,{children:["\u01AC ",(0,d.jsx)(l.strong,{children:"CaretType"}),": ",(0,d.jsx)(l.code,{children:'"sibling"'})," | ",(0,d.jsx)(l.code,{children:'"child"'})]}),"\n",(0,d.jsx)(l.p,{children:"A sibling caret type points from a LexicalNode origin to its next or previous sibling,\nand a child caret type points from an ElementNode origin to its first or last child."}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-3",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L32",children:"packages/lexical/src/caret/LexicalCaret.ts:32"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"commandlistener",children:"CommandListener"}),"\n",(0,d.jsxs)(l.p,{children:["\u01AC ",(0,d.jsx)(l.strong,{children:"CommandListener"}),"<",(0,d.jsx)(l.code,{children:"P"}),">: (",(0,d.jsx)(l.code,{children:"payload"}),": ",(0,d.jsx)(l.code,{children:"P"}),", ",(0,d.jsx)(l.code,{children:"editor"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalEditor",children:(0,d.jsx)(l.code,{children:"LexicalEditor"})}),") => ",(0,d.jsx)(l.code,{children:"boolean"})]}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsx)(l.tr,{children:(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"})})}),(0,d.jsx)(l.tbody,{children:(0,d.jsx)(l.tr,{children:(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"P"})})})})]}),"\n",(0,d.jsx)(l.h4,{id:"type-declaration",children:"Type declaration"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 (",(0,d.jsx)(l.code,{children:"payload"}),", ",(0,d.jsx)(l.code,{children:"editor"}),"): ",(0,d.jsx)(l.code,{children:"boolean"})]}),"\n",(0,d.jsx)(l.h5,{id:"parameters",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"payload"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"P"})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"editor"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalEditor",children:(0,d.jsx)(l.code,{children:"LexicalEditor"})})})]})]})]}),"\n",(0,d.jsx)(l.h5,{id:"returns",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.code,{children:"boolean"})}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-4",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalEditor.ts#L343",children:"packages/lexical/src/LexicalEditor.ts:343"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"commandlistenerpriority",children:"CommandListenerPriority"}),"\n",(0,d.jsxs)(l.p,{children:["\u01AC ",(0,d.jsx)(l.strong,{children:"CommandListenerPriority"}),": ",(0,d.jsx)(l.code,{children:"0"})," | ",(0,d.jsx)(l.code,{children:"1"})," | ",(0,d.jsx)(l.code,{children:"2"})," | ",(0,d.jsx)(l.code,{children:"3"})," | ",(0,d.jsx)(l.code,{children:"4"})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-5",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalEditor.ts#L347",children:"packages/lexical/src/LexicalEditor.ts:347"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"commandpayloadtype",children:"CommandPayloadType"}),"\n",(0,d.jsxs)(l.p,{children:["\u01AC ",(0,d.jsx)(l.strong,{children:"CommandPayloadType"}),"<",(0,d.jsx)(l.code,{children:"TCommand"}),">: ",(0,d.jsx)(l.code,{children:"TCommand"})," extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#lexicalcommand",children:(0,d.jsx)(l.code,{children:"LexicalCommand"})}),"<infer TPayload> ? ",(0,d.jsx)(l.code,{children:"TPayload"})," : ",(0,d.jsx)(l.code,{children:"never"})]}),"\n",(0,d.jsx)(l.p,{children:"Type helper for extracting the payload type from a command."}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.strong,{children:(0,d.jsx)(l.code,{children:"Example"})})}),"\n",(0,d.jsx)(l.pre,{children:(0,d.jsx)(l.code,{className:"language-ts",children:"const MY_COMMAND = createCommand<SomeType>();\n\n// ...\n\neditor.registerCommand(MY_COMMAND, payload => {\n  // Type of `payload` is inferred here. But lets say we want to extract a function to delegate to\n  $handleMyCommand(editor, payload);\n  return true;\n});\n\nfunction $handleMyCommand(editor: LexicalEditor, payload: CommandPayloadType<typeof MY_COMMAND>) {\n  // `payload` is of type `SomeType`, extracted from the command.\n}\n"})}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-1",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"TCommand"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#lexicalcommand",children:(0,d.jsx)(l.code,{children:"LexicalCommand"})}),"<",(0,d.jsx)(l.code,{children:"unknown"}),">"]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-6",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalEditor.ts#L380",children:"packages/lexical/src/LexicalEditor.ts:380"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"commonancestorresult",children:"CommonAncestorResult"}),"\n",(0,d.jsxs)(l.p,{children:["\u01AC ",(0,d.jsx)(l.strong,{children:"CommonAncestorResult"}),"<",(0,d.jsx)(l.code,{children:"A"}),", ",(0,d.jsx)(l.code,{children:"B"}),">: ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.CommonAncestorResultSame",children:(0,d.jsx)(l.code,{children:"CommonAncestorResultSame"})}),"<",(0,d.jsx)(l.code,{children:"A"}),"> | ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.CommonAncestorResultAncestor",children:(0,d.jsx)(l.code,{children:"CommonAncestorResultAncestor"})}),"<",(0,d.jsx)(l.code,{children:"A"})," & ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:(0,d.jsx)(l.code,{children:"ElementNode"})}),"> | ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.CommonAncestorResultDescendant",children:(0,d.jsx)(l.code,{children:"CommonAncestorResultDescendant"})}),"<",(0,d.jsx)(l.code,{children:"B"})," & ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:(0,d.jsx)(l.code,{children:"ElementNode"})}),"> | ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.CommonAncestorResultBranch",children:(0,d.jsx)(l.code,{children:"CommonAncestorResultBranch"})}),"<",(0,d.jsx)(l.code,{children:"A"}),", ",(0,d.jsx)(l.code,{children:"B"}),">"]}),"\n",(0,d.jsx)(l.p,{children:"The result of comparing two nodes that share some common ancestor"}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-2",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"A"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,d.jsx)(l.code,{children:"LexicalNode"})})]})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"B"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,d.jsx)(l.code,{children:"LexicalNode"})})]})]})]})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-7",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L1330",children:"packages/lexical/src/caret/LexicalCaret.ts:1330"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"createeditorargs",children:"CreateEditorArgs"}),"\n",(0,d.jsxs)(l.p,{children:["\u01AC ",(0,d.jsx)(l.strong,{children:"CreateEditorArgs"}),": ",(0,d.jsx)(l.code,{children:"Object"})]}),"\n",(0,d.jsx)(l.h4,{id:"type-declaration-1",children:"Type declaration"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"disableEvents?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"boolean"})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"editable?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"boolean"})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"editorState?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.EditorState",children:(0,d.jsx)(l.code,{children:"EditorState"})})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"html?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#htmlconfig",children:(0,d.jsx)(l.code,{children:"HTMLConfig"})})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"namespace?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"string"})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"nodes?"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.code,{children:"ReadonlyArray"}),"<",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#lexicalnodeconfig",children:(0,d.jsx)(l.code,{children:"LexicalNodeConfig"})}),">"]})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"onError?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"ErrorHandler"})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"parentEditor?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalEditor",children:(0,d.jsx)(l.code,{children:"LexicalEditor"})})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"theme?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclasses",children:(0,d.jsx)(l.code,{children:"EditorThemeClasses"})})})]})]})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-8",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalEditor.ts#L217",children:"packages/lexical/src/LexicalEditor.ts:217"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"domchildconversion",children:"DOMChildConversion"}),"\n",(0,d.jsxs)(l.p,{children:["\u01AC ",(0,d.jsx)(l.strong,{children:"DOMChildConversion"}),": (",(0,d.jsx)(l.code,{children:"lexicalNode"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,d.jsx)(l.code,{children:"LexicalNode"})}),", ",(0,d.jsx)(l.code,{children:"parentLexicalNode"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,d.jsx)(l.code,{children:"LexicalNode"})})," | ",(0,d.jsx)(l.code,{children:"null"})," | ",(0,d.jsx)(l.code,{children:"undefined"}),") => ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,d.jsx)(l.code,{children:"LexicalNode"})})," | ",(0,d.jsx)(l.code,{children:"null"})," | ",(0,d.jsx)(l.code,{children:"undefined"})]}),"\n",(0,d.jsx)(l.h4,{id:"type-declaration-2",children:"Type declaration"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 (",(0,d.jsx)(l.code,{children:"lexicalNode"}),", ",(0,d.jsx)(l.code,{children:"parentLexicalNode"}),"): ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,d.jsx)(l.code,{children:"LexicalNode"})})," | ",(0,d.jsx)(l.code,{children:"null"})," | ",(0,d.jsx)(l.code,{children:"undefined"})]}),"\n",(0,d.jsx)(l.h5,{id:"parameters-1",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"lexicalNode"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,d.jsx)(l.code,{children:"LexicalNode"})})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"parentLexicalNode"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,d.jsx)(l.code,{children:"LexicalNode"})})," | ",(0,d.jsx)(l.code,{children:"null"})," | ",(0,d.jsx)(l.code,{children:"undefined"})]})]})]})]}),"\n",(0,d.jsx)(l.h5,{id:"returns-1",children:"Returns"}),"\n",(0,d.jsxs)(l.p,{children:[(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,d.jsx)(l.code,{children:"LexicalNode"})})," | ",(0,d.jsx)(l.code,{children:"null"})," | ",(0,d.jsx)(l.code,{children:"undefined"})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-9",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L350",children:"packages/lexical/src/LexicalNode.ts:350"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"domconversion",children:"DOMConversion"}),"\n",(0,d.jsxs)(l.p,{children:["\u01AC ",(0,d.jsx)(l.strong,{children:"DOMConversion"}),"<",(0,d.jsx)(l.code,{children:"T"}),">: ",(0,d.jsx)(l.code,{children:"Object"})]}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-3",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"T"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.code,{children:"HTMLElement"})," = ",(0,d.jsx)(l.code,{children:"HTMLElement"})]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"type-declaration-3",children:"Type declaration"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"conversion"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#domconversionfn",children:(0,d.jsx)(l.code,{children:"DOMConversionFn"})}),"<",(0,d.jsx)(l.code,{children:"T"}),">"]})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"priority?"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.code,{children:"0"})," | ",(0,d.jsx)(l.code,{children:"1"})," | ",(0,d.jsx)(l.code,{children:"2"})," | ",(0,d.jsx)(l.code,{children:"3"})," | ",(0,d.jsx)(l.code,{children:"4"})]})]})]})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-10",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L341",children:"packages/lexical/src/LexicalNode.ts:341"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"domconversionfn",children:"DOMConversionFn"}),"\n",(0,d.jsxs)(l.p,{children:["\u01AC ",(0,d.jsx)(l.strong,{children:"DOMConversionFn"}),"<",(0,d.jsx)(l.code,{children:"T"}),">: (",(0,d.jsx)(l.code,{children:"element"}),": ",(0,d.jsx)(l.code,{children:"T"}),") => ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#domconversionoutput",children:(0,d.jsx)(l.code,{children:"DOMConversionOutput"})})," | ",(0,d.jsx)(l.code,{children:"null"})]}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-4",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"T"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.code,{children:"HTMLElement"})," = ",(0,d.jsx)(l.code,{children:"HTMLElement"})]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"type-declaration-4",children:"Type declaration"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 (",(0,d.jsx)(l.code,{children:"element"}),"): ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#domconversionoutput",children:(0,d.jsx)(l.code,{children:"DOMConversionOutput"})})," | ",(0,d.jsx)(l.code,{children:"null"})]}),"\n",(0,d.jsx)(l.h5,{id:"parameters-2",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"element"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"T"})})]})})]}),"\n",(0,d.jsx)(l.h5,{id:"returns-2",children:"Returns"}),"\n",(0,d.jsxs)(l.p,{children:[(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#domconversionoutput",children:(0,d.jsx)(l.code,{children:"DOMConversionOutput"})})," | ",(0,d.jsx)(l.code,{children:"null"})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-11",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L346",children:"packages/lexical/src/LexicalNode.ts:346"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"domconversionmap",children:"DOMConversionMap"}),"\n",(0,d.jsxs)(l.p,{children:["\u01AC ",(0,d.jsx)(l.strong,{children:"DOMConversionMap"}),"<",(0,d.jsx)(l.code,{children:"T"}),">: ",(0,d.jsx)(l.code,{children:"Record"}),"<",(0,d.jsx)(l.code,{children:"NodeName"}),", ",(0,d.jsx)(l.code,{children:"DOMConversionProp"}),"<",(0,d.jsx)(l.code,{children:"T"}),">>"]}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-5",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"T"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.code,{children:"HTMLElement"})," = ",(0,d.jsx)(l.code,{children:"HTMLElement"})]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-12",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L355",children:"packages/lexical/src/LexicalNode.ts:355"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"domconversionoutput",children:"DOMConversionOutput"}),"\n",(0,d.jsxs)(l.p,{children:["\u01AC ",(0,d.jsx)(l.strong,{children:"DOMConversionOutput"}),": ",(0,d.jsx)(l.code,{children:"Object"})]}),"\n",(0,d.jsx)(l.h4,{id:"type-declaration-5",children:"Type declaration"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"after?"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["(",(0,d.jsx)(l.code,{children:"childLexicalNodes"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,d.jsx)(l.code,{children:"LexicalNode"})}),"[]) => ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,d.jsx)(l.code,{children:"LexicalNode"})}),"[]"]})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"forChild?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#domchildconversion",children:(0,d.jsx)(l.code,{children:"DOMChildConversion"})})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"node"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.code,{children:"null"})," | ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,d.jsx)(l.code,{children:"LexicalNode"})})," | ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,d.jsx)(l.code,{children:"LexicalNode"})}),"[]"]})]})]})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-13",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L361",children:"packages/lexical/src/LexicalNode.ts:361"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"domexportoutput",children:"DOMExportOutput"}),"\n",(0,d.jsxs)(l.p,{children:["\u01AC ",(0,d.jsx)(l.strong,{children:"DOMExportOutput"}),": ",(0,d.jsx)(l.code,{children:"Object"})]}),"\n",(0,d.jsx)(l.h4,{id:"type-declaration-6",children:"Type declaration"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"after?"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["(",(0,d.jsx)(l.code,{children:"generatedElement"}),": ",(0,d.jsx)(l.code,{children:"HTMLElement"})," | ",(0,d.jsx)(l.code,{children:"DocumentFragment"})," | ",(0,d.jsx)(l.code,{children:"Text"})," | ",(0,d.jsx)(l.code,{children:"null"})," | ",(0,d.jsx)(l.code,{children:"undefined"}),") => ",(0,d.jsx)(l.code,{children:"HTMLElement"})," | ",(0,d.jsx)(l.code,{children:"DocumentFragment"})," | ",(0,d.jsx)(l.code,{children:"Text"})," | ",(0,d.jsx)(l.code,{children:"null"})," | ",(0,d.jsx)(l.code,{children:"undefined"})]})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"element"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.code,{children:"HTMLElement"})," | ",(0,d.jsx)(l.code,{children:"DocumentFragment"})," | ",(0,d.jsx)(l.code,{children:"Text"})," | ",(0,d.jsx)(l.code,{children:"null"})]})]})]})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-14",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L372",children:"packages/lexical/src/LexicalNode.ts:372"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"domexportoutputmap",children:"DOMExportOutputMap"}),"\n",(0,d.jsxs)(l.p,{children:["\u01AC ",(0,d.jsx)(l.strong,{children:"DOMExportOutputMap"}),": ",(0,d.jsx)(l.code,{children:"Map"}),"<",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#klass",children:(0,d.jsx)(l.code,{children:"Klass"})}),"<",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,d.jsx)(l.code,{children:"LexicalNode"})}),">, (",(0,d.jsx)(l.code,{children:"editor"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalEditor",children:(0,d.jsx)(l.code,{children:"LexicalEditor"})}),", ",(0,d.jsx)(l.code,{children:"target"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,d.jsx)(l.code,{children:"LexicalNode"})}),") => ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#domexportoutput",children:(0,d.jsx)(l.code,{children:"DOMExportOutput"})}),">"]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-15",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L367",children:"packages/lexical/src/LexicalNode.ts:367"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"editablelistener",children:"EditableListener"}),"\n",(0,d.jsxs)(l.p,{children:["\u01AC ",(0,d.jsx)(l.strong,{children:"EditableListener"}),": (",(0,d.jsx)(l.code,{children:"editable"}),": ",(0,d.jsx)(l.code,{children:"boolean"}),") => ",(0,d.jsx)(l.code,{children:"void"})]}),"\n",(0,d.jsx)(l.h4,{id:"type-declaration-7",children:"Type declaration"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 (",(0,d.jsx)(l.code,{children:"editable"}),"): ",(0,d.jsx)(l.code,{children:"void"})]}),"\n",(0,d.jsx)(l.h5,{id:"parameters-3",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"editable"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"boolean"})})]})})]}),"\n",(0,d.jsx)(l.h5,{id:"returns-3",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.code,{children:"void"})}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-16",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalEditor.ts#L345",children:"packages/lexical/src/LexicalEditor.ts:345"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"editorconfig",children:"EditorConfig"}),"\n",(0,d.jsxs)(l.p,{children:["\u01AC ",(0,d.jsx)(l.strong,{children:"EditorConfig"}),": ",(0,d.jsx)(l.code,{children:"Object"})]}),"\n",(0,d.jsx)(l.h4,{id:"type-declaration-8",children:"Type declaration"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"disableEvents?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"boolean"})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"namespace"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"string"})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"theme"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclasses",children:(0,d.jsx)(l.code,{children:"EditorThemeClasses"})})})]})]})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-17",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalEditor.ts#L192",children:"packages/lexical/src/LexicalEditor.ts:192"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"editorsetoptions",children:"EditorSetOptions"}),"\n",(0,d.jsxs)(l.p,{children:["\u01AC ",(0,d.jsx)(l.strong,{children:"EditorSetOptions"}),": ",(0,d.jsx)(l.code,{children:"Object"})]}),"\n",(0,d.jsx)(l.h4,{id:"type-declaration-9",children:"Type declaration"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"tag?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"string"})})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-18",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalEditor.ts#L116",children:"packages/lexical/src/LexicalEditor.ts:116"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"editorthemeclassname",children:"EditorThemeClassName"}),"\n",(0,d.jsxs)(l.p,{children:["\u01AC ",(0,d.jsx)(l.strong,{children:"EditorThemeClassName"}),": ",(0,d.jsx)(l.code,{children:"string"})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-19",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalEditor.ts#L72",children:"packages/lexical/src/LexicalEditor.ts:72"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"editorthemeclasses",children:"EditorThemeClasses"}),"\n",(0,d.jsxs)(l.p,{children:["\u01AC ",(0,d.jsx)(l.strong,{children:"EditorThemeClasses"}),": ",(0,d.jsx)(l.code,{children:"Object"})]}),"\n",(0,d.jsx)(l.h4,{id:"index-signature",children:"Index signature"}),"\n",(0,d.jsxs)(l.p,{children:["\u25AA [key: ",(0,d.jsx)(l.code,{children:"string"}),"]: ",(0,d.jsx)(l.code,{children:"any"})]}),"\n",(0,d.jsx)(l.h4,{id:"type-declaration-10",children:"Type declaration"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"blockCursor?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"characterLimit?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"code?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"codeHighlight?"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.code,{children:"Record"}),"<",(0,d.jsx)(l.code,{children:"string"}),", ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})}),">"]})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"embedBlock?"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["{ ",(0,d.jsx)(l.code,{children:"base?"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})})," ; ",(0,d.jsx)(l.code,{children:"focus?"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})}),"  }"]})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"embedBlock.base?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"embedBlock.focus?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"hashtag?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"heading?"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["{ ",(0,d.jsx)(l.code,{children:"h1?"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})})," ; ",(0,d.jsx)(l.code,{children:"h2?"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})})," ; ",(0,d.jsx)(l.code,{children:"h3?"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})})," ; ",(0,d.jsx)(l.code,{children:"h4?"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})})," ; ",(0,d.jsx)(l.code,{children:"h5?"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})})," ; ",(0,d.jsx)(l.code,{children:"h6?"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})}),"  }"]})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"heading.h1?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"heading.h2?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"heading.h3?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"heading.h4?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"heading.h5?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"heading.h6?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"hr?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"hrSelected?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"image?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"indent?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"link?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"list?"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["{ ",(0,d.jsx)(l.code,{children:"checklist?"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})})," ; ",(0,d.jsx)(l.code,{children:"listitem?"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})})," ; ",(0,d.jsx)(l.code,{children:"listitemChecked?"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})})," ; ",(0,d.jsx)(l.code,{children:"listitemUnchecked?"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})})," ; ",(0,d.jsx)(l.code,{children:"nested?"}),": { ",(0,d.jsx)(l.code,{children:"list?"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})})," ; ",(0,d.jsx)(l.code,{children:"listitem?"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})}),"  } ; ",(0,d.jsx)(l.code,{children:"ol?"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})})," ; ",(0,d.jsx)(l.code,{children:"olDepth?"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})}),"[] ; ",(0,d.jsx)(l.code,{children:"ul?"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})})," ; ",(0,d.jsx)(l.code,{children:"ulDepth?"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})}),"[]  }"]})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"list.checklist?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"list.listitem?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"list.listitemChecked?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"list.listitemUnchecked?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"list.nested?"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["{ ",(0,d.jsx)(l.code,{children:"list?"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})})," ; ",(0,d.jsx)(l.code,{children:"listitem?"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})}),"  }"]})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"list.nested.list?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"list.nested.listitem?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"list.ol?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"list.olDepth?"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})}),"[]"]})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"list.ul?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"list.ulDepth?"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})}),"[]"]})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"ltr?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"mark?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"markOverlap?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"paragraph?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"quote?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"root?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"rtl?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"specialText?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"tab?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"table?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"tableAddColumns?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"tableAddRows?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"tableCell?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"tableCellActionButton?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"tableCellActionButtonContainer?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"tableCellHeader?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"tableCellResizer?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"tableCellSelected?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"tableRow?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"tableScrollableWrapper?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"tableSelected?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"tableSelection?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorthemeclassname",children:(0,d.jsx)(l.code,{children:"EditorThemeClassName"})})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"text?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"TextNodeThemeClasses"})})]})]})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-20",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalEditor.ts#L128",children:"packages/lexical/src/LexicalEditor.ts:128"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"editorupdateoptions",children:"EditorUpdateOptions"}),"\n",(0,d.jsxs)(l.p,{children:["\u01AC ",(0,d.jsx)(l.strong,{children:"EditorUpdateOptions"}),": ",(0,d.jsx)(l.code,{children:"Object"})]}),"\n",(0,d.jsx)(l.h4,{id:"type-declaration-11",children:"Type declaration"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"discrete?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"true"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:"If true, prevents this update from being batched, forcing it to run synchronously."})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"onUpdate?"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["() => ",(0,d.jsx)(l.code,{children:"void"})]}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:"-"})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"skipTransforms?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"true"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:"Setting this to true will suppress all node transforms for this update cycle. Useful for synchronizing updates in some cases."})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"tag?"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#updatetag",children:(0,d.jsx)(l.code,{children:"UpdateTag"})})," | ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#updatetag",children:(0,d.jsx)(l.code,{children:"UpdateTag"})}),"[]"]}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["A tag to identify this update, in an update listener, for instance. See also ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#addupdatetag",children:"$addUpdateTag"}),"."]})]})]})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-21",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalEditor.ts#L91",children:"packages/lexical/src/LexicalEditor.ts:91"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"elementformattype",children:"ElementFormatType"}),"\n",(0,d.jsxs)(l.p,{children:["\u01AC ",(0,d.jsx)(l.strong,{children:"ElementFormatType"}),": ",(0,d.jsx)(l.code,{children:'"left"'})," | ",(0,d.jsx)(l.code,{children:'"start"'})," | ",(0,d.jsx)(l.code,{children:'"center"'})," | ",(0,d.jsx)(l.code,{children:'"right"'})," | ",(0,d.jsx)(l.code,{children:'"end"'})," | ",(0,d.jsx)(l.code,{children:'"justify"'})," | ",(0,d.jsx)(l.code,{children:'""'})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-22",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/nodes/LexicalElementNode.ts#L68",children:"packages/lexical/src/nodes/LexicalElementNode.ts:68"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"elementpoint",children:"ElementPoint"}),"\n",(0,d.jsxs)(l.p,{children:["\u01AC ",(0,d.jsx)(l.strong,{children:"ElementPoint"}),": ",(0,d.jsx)(l.code,{children:"Object"})]}),"\n",(0,d.jsx)(l.h4,{id:"type-declaration-12",children:"Type declaration"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"_selection"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.BaseSelection",children:(0,d.jsx)(l.code,{children:"BaseSelection"})})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"getNode"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["() => ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:(0,d.jsx)(l.code,{children:"ElementNode"})})]})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"is"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["(",(0,d.jsx)(l.code,{children:"point"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#pointtype",children:(0,d.jsx)(l.code,{children:"PointType"})}),") => ",(0,d.jsx)(l.code,{children:"boolean"})]})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"isBefore"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["(",(0,d.jsx)(l.code,{children:"point"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#pointtype",children:(0,d.jsx)(l.code,{children:"PointType"})}),") => ",(0,d.jsx)(l.code,{children:"boolean"})]})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"key"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#nodekey",children:(0,d.jsx)(l.code,{children:"NodeKey"})})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"offset"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"number"})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"set"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["(",(0,d.jsx)(l.code,{children:"key"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#nodekey",children:(0,d.jsx)(l.code,{children:"NodeKey"})}),", ",(0,d.jsx)(l.code,{children:"offset"}),": ",(0,d.jsx)(l.code,{children:"number"}),", ",(0,d.jsx)(l.code,{children:"type"}),": ",(0,d.jsx)(l.code,{children:'"text"'})," | ",(0,d.jsx)(l.code,{children:'"element"'}),", ",(0,d.jsx)(l.code,{children:"onlyIfChanged?"}),": ",(0,d.jsx)(l.code,{children:"boolean"}),") => ",(0,d.jsx)(l.code,{children:"void"})]})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"type"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:'"element"'})})]})]})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-23",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalSelection.ts#L111",children:"packages/lexical/src/LexicalSelection.ts:111"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"eventhandler",children:"EventHandler"}),"\n",(0,d.jsxs)(l.p,{children:["\u01AC ",(0,d.jsx)(l.strong,{children:"EventHandler"}),": (",(0,d.jsx)(l.code,{children:"event"}),": ",(0,d.jsx)(l.code,{children:"Event"}),", ",(0,d.jsx)(l.code,{children:"editor"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalEditor",children:(0,d.jsx)(l.code,{children:"LexicalEditor"})}),") => ",(0,d.jsx)(l.code,{children:"void"})]}),"\n",(0,d.jsx)(l.h4,{id:"type-declaration-13",children:"Type declaration"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 (",(0,d.jsx)(l.code,{children:"event"}),", ",(0,d.jsx)(l.code,{children:"editor"}),"): ",(0,d.jsx)(l.code,{children:"void"})]}),"\n",(0,d.jsx)(l.h5,{id:"parameters-4",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"event"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"Event"})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"editor"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalEditor",children:(0,d.jsx)(l.code,{children:"LexicalEditor"})})})]})]})]}),"\n",(0,d.jsx)(l.h5,{id:"returns-4",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.code,{children:"void"})}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-24",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalEvents.ts#L1316",children:"packages/lexical/src/LexicalEvents.ts:1316"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"flipdirection",children:"FlipDirection"}),"\n",(0,d.jsxs)(l.p,{children:["\u01AC ",(0,d.jsx)(l.strong,{children:"FlipDirection"}),"<",(0,d.jsx)(l.code,{children:"D"}),">: typeof ",(0,d.jsx)(l.code,{children:"FLIP_DIRECTION"}),"[",(0,d.jsx)(l.code,{children:"D"}),"]"]}),"\n",(0,d.jsx)(l.p,{children:"A type utility to flip next and previous"}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-6",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"D"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#caretdirection",children:(0,d.jsx)(l.code,{children:"CaretDirection"})})]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-25",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L26",children:"packages/lexical/src/caret/LexicalCaret.ts:26"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"htmlconfig",children:"HTMLConfig"}),"\n",(0,d.jsxs)(l.p,{children:["\u01AC ",(0,d.jsx)(l.strong,{children:"HTMLConfig"}),": ",(0,d.jsx)(l.code,{children:"Object"})]}),"\n",(0,d.jsx)(l.h4,{id:"type-declaration-14",children:"Type declaration"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"export?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#domexportoutputmap",children:(0,d.jsx)(l.code,{children:"DOMExportOutputMap"})})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"import?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#domconversionmap",children:(0,d.jsx)(l.code,{children:"DOMConversionMap"})})})]})]})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-26",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalEditor.ts#L207",children:"packages/lexical/src/LexicalEditor.ts:207"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"klass",children:"Klass"}),"\n",(0,d.jsxs)(l.p,{children:["\u01AC ",(0,d.jsx)(l.strong,{children:"Klass"}),"<",(0,d.jsx)(l.code,{children:"T"}),">: ",(0,d.jsx)(l.code,{children:"InstanceType"}),"<",(0,d.jsx)(l.code,{children:"T"}),"[",(0,d.jsx)(l.code,{children:'"constructor"'}),"]> extends ",(0,d.jsx)(l.code,{children:"T"})," ? ",(0,d.jsx)(l.code,{children:"T"}),"[",(0,d.jsx)(l.code,{children:'"constructor"'}),"] : ",(0,d.jsx)(l.code,{children:"GenericConstructor"}),"<",(0,d.jsx)(l.code,{children:"T"}),"> & ",(0,d.jsx)(l.code,{children:"T"}),"[",(0,d.jsx)(l.code,{children:'"constructor"'}),"]"]}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-7",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"T"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,d.jsx)(l.code,{children:"LexicalNode"})})]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-27",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalEditor.ts#L66",children:"packages/lexical/src/LexicalEditor.ts:66"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"klassconstructor",children:"KlassConstructor"}),"\n",(0,d.jsxs)(l.p,{children:["\u01AC ",(0,d.jsx)(l.strong,{children:"KlassConstructor"}),"<",(0,d.jsx)(l.code,{children:"Cls"}),">: ",(0,d.jsx)(l.code,{children:"GenericConstructor"}),"<",(0,d.jsx)(l.code,{children:"InstanceType"}),"<",(0,d.jsx)(l.code,{children:"Cls"}),">> & { [k in keyof Cls]: Cls[k] }"]}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-8",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"Cls"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.code,{children:"GenericConstructor"}),"<",(0,d.jsx)(l.code,{children:"any"}),">"]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-28",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalEditor.ts#L61",children:"packages/lexical/src/LexicalEditor.ts:61"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"lexicalcommand",children:"LexicalCommand"}),"\n",(0,d.jsxs)(l.p,{children:["\u01AC ",(0,d.jsx)(l.strong,{children:"LexicalCommand"}),"<",(0,d.jsx)(l.code,{children:"TPayload"}),">: ",(0,d.jsx)(l.code,{children:"Object"})]}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-9",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsx)(l.tr,{children:(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"})})}),(0,d.jsx)(l.tbody,{children:(0,d.jsx)(l.tr,{children:(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"TPayload"})})})})]}),"\n",(0,d.jsx)(l.h4,{id:"type-declaration-15",children:"Type declaration"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"type?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"string"})})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-29",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalEditor.ts#L356",children:"packages/lexical/src/LexicalEditor.ts:356"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"lexicalexportjson",children:"LexicalExportJSON"}),"\n",(0,d.jsxs)(l.p,{children:["\u01AC ",(0,d.jsx)(l.strong,{children:"LexicalExportJSON"}),"<",(0,d.jsx)(l.code,{children:"T"}),">: ",(0,d.jsx)(l.code,{children:"Prettify"}),"<",(0,d.jsx)(l.code,{children:"Omit"}),"<",(0,d.jsx)(l.code,{children:"ReturnType"}),"<",(0,d.jsx)(l.code,{children:"T"}),"[",(0,d.jsx)(l.code,{children:'"exportJSON"'}),"]>, ",(0,d.jsx)(l.code,{children:'"type"'}),"> & { ",(0,d.jsx)(l.code,{children:"type"}),": ",(0,d.jsx)(l.code,{children:"GetStaticNodeType"}),"<",(0,d.jsx)(l.code,{children:"T"}),">  } & ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#nodestatejson",children:(0,d.jsx)(l.code,{children:"NodeStateJSON"})}),"<",(0,d.jsx)(l.code,{children:"T"}),">>"]}),"\n",(0,d.jsx)(l.p,{children:"The most precise type we can infer for the JSON that will\nbe produced by T.exportJSON()."}),"\n",(0,d.jsx)(l.p,{children:"Do not use this for the return type of T.exportJSON()! It must be\na more generic type to be compatible with subclassing."}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-10",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"T"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,d.jsx)(l.code,{children:"LexicalNode"})})]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-30",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L224",children:"packages/lexical/src/LexicalNode.ts:224"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"lexicalnodeconfig",children:"LexicalNodeConfig"}),"\n",(0,d.jsxs)(l.p,{children:["\u01AC ",(0,d.jsx)(l.strong,{children:"LexicalNodeConfig"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#klass",children:(0,d.jsx)(l.code,{children:"Klass"})}),"<",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,d.jsx)(l.code,{children:"LexicalNode"})}),"> | ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#lexicalnodereplacement",children:(0,d.jsx)(l.code,{children:"LexicalNodeReplacement"})})]}),"\n",(0,d.jsx)(l.p,{children:"A LexicalNode class or LexicalNodeReplacement configuration"}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-31",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalEditor.ts#L215",children:"packages/lexical/src/LexicalEditor.ts:215"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"lexicalnodereplacement",children:"LexicalNodeReplacement"}),"\n",(0,d.jsxs)(l.p,{children:["\u01AC ",(0,d.jsx)(l.strong,{children:"LexicalNodeReplacement"}),": ",(0,d.jsx)(l.code,{children:"Object"})]}),"\n",(0,d.jsx)(l.h4,{id:"type-declaration-16",children:"Type declaration"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"replace"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#klass",children:(0,d.jsx)(l.code,{children:"Klass"})}),"<",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,d.jsx)(l.code,{children:"LexicalNode"})}),">"]})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"with"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["<T>(",(0,d.jsx)(l.code,{children:"node"}),": ",(0,d.jsx)(l.code,{children:"InstanceType"}),"<",(0,d.jsx)(l.code,{children:"T"}),">) => ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,d.jsx)(l.code,{children:"LexicalNode"})})]})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"withKlass?"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#klass",children:(0,d.jsx)(l.code,{children:"Klass"})}),"<",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,d.jsx)(l.code,{children:"LexicalNode"})}),">"]})]})]})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-32",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalEditor.ts#L198",children:"packages/lexical/src/LexicalEditor.ts:198"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"lexicalupdatejson",children:"LexicalUpdateJSON"}),"\n",(0,d.jsxs)(l.p,{children:["\u01AC ",(0,d.jsx)(l.strong,{children:"LexicalUpdateJSON"}),"<",(0,d.jsx)(l.code,{children:"T"}),">: ",(0,d.jsx)(l.code,{children:"Omit"}),"<",(0,d.jsx)(l.code,{children:"T"}),", ",(0,d.jsx)(l.code,{children:'"children"'})," | ",(0,d.jsx)(l.code,{children:'"type"'})," | ",(0,d.jsx)(l.code,{children:'"version"'}),">"]}),"\n",(0,d.jsx)(l.p,{children:"Omit the children, type, and version properties from the given SerializedLexicalNode definition."}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-11",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"T"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#serializedlexicalnode",children:(0,d.jsx)(l.code,{children:"SerializedLexicalNode"})})]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-33",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L233",children:"packages/lexical/src/LexicalNode.ts:233"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"mutationlistener",children:"MutationListener"}),"\n",(0,d.jsxs)(l.p,{children:["\u01AC ",(0,d.jsx)(l.strong,{children:"MutationListener"}),": (",(0,d.jsx)(l.code,{children:"nodes"}),": ",(0,d.jsx)(l.code,{children:"Map"}),"<",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#nodekey",children:(0,d.jsx)(l.code,{children:"NodeKey"})}),", ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#nodemutation",children:(0,d.jsx)(l.code,{children:"NodeMutation"})}),">, ",(0,d.jsx)(l.code,{children:"payload"}),": { ",(0,d.jsx)(l.code,{children:"dirtyLeaves"}),": ",(0,d.jsx)(l.code,{children:"Set"}),"<",(0,d.jsx)(l.code,{children:"string"}),"> ; ",(0,d.jsx)(l.code,{children:"prevEditorState"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.EditorState",children:(0,d.jsx)(l.code,{children:"EditorState"})})," ; ",(0,d.jsx)(l.code,{children:"updateTags"}),": ",(0,d.jsx)(l.code,{children:"Set"}),"<",(0,d.jsx)(l.code,{children:"string"}),">  }) => ",(0,d.jsx)(l.code,{children:"void"})]}),"\n",(0,d.jsx)(l.h4,{id:"type-declaration-17",children:"Type declaration"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 (",(0,d.jsx)(l.code,{children:"nodes"}),", ",(0,d.jsx)(l.code,{children:"payload"}),"): ",(0,d.jsx)(l.code,{children:"void"})]}),"\n",(0,d.jsx)(l.h5,{id:"parameters-5",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"nodes"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.code,{children:"Map"}),"<",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#nodekey",children:(0,d.jsx)(l.code,{children:"NodeKey"})}),", ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#nodemutation",children:(0,d.jsx)(l.code,{children:"NodeMutation"})}),">"]})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"payload"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"Object"})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"payload.dirtyLeaves"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.code,{children:"Set"}),"<",(0,d.jsx)(l.code,{children:"string"}),">"]})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"payload.prevEditorState"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.EditorState",children:(0,d.jsx)(l.code,{children:"EditorState"})})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"payload.updateTags"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.code,{children:"Set"}),"<",(0,d.jsx)(l.code,{children:"string"}),">"]})]})]})]}),"\n",(0,d.jsx)(l.h5,{id:"returns-5",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.code,{children:"void"})}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-34",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalEditor.ts#L334",children:"packages/lexical/src/LexicalEditor.ts:334"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"nodecaret",children:"NodeCaret"}),"\n",(0,d.jsxs)(l.p,{children:["\u01AC ",(0,d.jsx)(l.strong,{children:"NodeCaret"}),"<",(0,d.jsx)(l.code,{children:"D"}),">: ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.SiblingCaret",children:(0,d.jsx)(l.code,{children:"SiblingCaret"})}),"<",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,d.jsx)(l.code,{children:"LexicalNode"})}),", ",(0,d.jsx)(l.code,{children:"D"}),"> | ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.ChildCaret",children:(0,d.jsx)(l.code,{children:"ChildCaret"})}),"<",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:(0,d.jsx)(l.code,{children:"ElementNode"})}),", ",(0,d.jsx)(l.code,{children:"D"}),">"]}),"\n",(0,d.jsx)(l.p,{children:"A NodeCaret is the combination of an origin node and a direction\nthat points towards where a connected node will be fetched, inserted,\nor replaced. A SiblingCaret points from a node to its next or previous\nsibling, and a ChildCaret points to its first or last child\n(using next or previous as direction, for symmetry with SiblingCaret)."}),"\n",(0,d.jsx)(l.p,{children:"The differences between NodeCaret and PointType are:"}),"\n",(0,d.jsxs)(l.ul,{children:["\n",(0,d.jsx)(l.li,{children:"NodeCaret can only be used to refer to an entire node (PointCaret is used when a full analog is needed). A PointType of text type can be used to refer to a specific location inside of a TextNode."}),"\n",(0,d.jsx)(l.li,{children:"NodeCaret stores an origin node, type (sibling or child), and direction (next or previous). A PointType stores a type (text or element), the key of a node, and a text or child offset within that node."}),"\n",(0,d.jsx)(l.li,{children:"NodeCaret is directional and always refers to a very specific node, eliminating all ambiguity. PointType can refer to the location before or at a node depending on context."}),"\n",(0,d.jsx)(l.li,{children:"NodeCaret is more robust to nearby mutations, as it relies only on a node's direct connections. An element Any change to the count of previous siblings in an element PointType will invalidate it."}),"\n",(0,d.jsx)(l.li,{children:"NodeCaret is designed to work more directly with the internal representation of the document tree, making it suitable for use in traversals without performing any redundant work."}),"\n"]}),"\n",(0,d.jsxs)(l.p,{children:["The caret does ",(0,d.jsx)(l.em,{children:"not"})," update in response to any mutations, you should\nnot persist it across editor updates, and using a caret after its origin\nnode has been removed or replaced may result in runtime errors."]}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-12",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"D"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#caretdirection",children:(0,d.jsx)(l.code,{children:"CaretDirection"})})," = ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#caretdirection",children:(0,d.jsx)(l.code,{children:"CaretDirection"})})]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-35",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L150",children:"packages/lexical/src/caret/LexicalCaret.ts:150"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"nodekey",children:"NodeKey"}),"\n",(0,d.jsxs)(l.p,{children:["\u01AC ",(0,d.jsx)(l.strong,{children:"NodeKey"}),": ",(0,d.jsx)(l.code,{children:"string"})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-36",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L379",children:"packages/lexical/src/LexicalNode.ts:379"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"nodemap",children:"NodeMap"}),"\n",(0,d.jsxs)(l.p,{children:["\u01AC ",(0,d.jsx)(l.strong,{children:"NodeMap"}),": ",(0,d.jsx)(l.code,{children:"Map"}),"<",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#nodekey",children:(0,d.jsx)(l.code,{children:"NodeKey"})}),", ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,d.jsx)(l.code,{children:"LexicalNode"})}),">"]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-37",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L68",children:"packages/lexical/src/LexicalNode.ts:68"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"nodemutation",children:"NodeMutation"}),"\n",(0,d.jsxs)(l.p,{children:["\u01AC ",(0,d.jsx)(l.strong,{children:"NodeMutation"}),": ",(0,d.jsx)(l.code,{children:'"created"'})," | ",(0,d.jsx)(l.code,{children:'"updated"'})," | ",(0,d.jsx)(l.code,{children:'"destroyed"'})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-38",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalEditor.ts#L251",children:"packages/lexical/src/LexicalEditor.ts:251"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"nodestatejson",children:"NodeStateJSON"}),"\n",(0,d.jsxs)(l.p,{children:["\u01AC ",(0,d.jsx)(l.strong,{children:"NodeStateJSON"}),"<",(0,d.jsx)(l.code,{children:"T"}),">: ",(0,d.jsx)(l.code,{children:"Prettify"}),"<{ ",(0,d.jsx)(l.code,{children:"$?"}),": ",(0,d.jsx)(l.code,{children:"Prettify"}),"<",(0,d.jsx)(l.code,{children:"CollectStateJSON"}),"<",(0,d.jsx)(l.code,{children:"GetNodeStateConfig"}),"<",(0,d.jsx)(l.code,{children:"T"}),">, ",(0,d.jsx)(l.code,{children:"false"}),">>  } & ",(0,d.jsx)(l.code,{children:"CollectStateJSON"}),"<",(0,d.jsx)(l.code,{children:"GetNodeStateConfig"}),"<",(0,d.jsx)(l.code,{children:"T"}),">, ",(0,d.jsx)(l.code,{children:"true"}),">>"]}),"\n",(0,d.jsx)(l.p,{children:"The NodeState JSON produced by this LexicalNode"}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-13",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"T"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,d.jsx)(l.code,{children:"LexicalNode"})})]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-39",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNodeState.ts#L149",children:"packages/lexical/src/LexicalNodeState.ts:149"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"pastecommandtype",children:"PasteCommandType"}),"\n",(0,d.jsxs)(l.p,{children:["\u01AC ",(0,d.jsx)(l.strong,{children:"PasteCommandType"}),": ",(0,d.jsx)(l.code,{children:"ClipboardEvent"})," | ",(0,d.jsx)(l.code,{children:"InputEvent"})," | ",(0,d.jsx)(l.code,{children:"KeyboardEvent"})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-40",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalCommands.ts#L15",children:"packages/lexical/src/LexicalCommands.ts:15"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"pointcaret",children:"PointCaret"}),"\n",(0,d.jsxs)(l.p,{children:["\u01AC ",(0,d.jsx)(l.strong,{children:"PointCaret"}),"<",(0,d.jsx)(l.code,{children:"D"}),">: ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.TextPointCaret",children:(0,d.jsx)(l.code,{children:"TextPointCaret"})}),"<",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.TextNode",children:(0,d.jsx)(l.code,{children:"TextNode"})}),", ",(0,d.jsx)(l.code,{children:"D"}),"> | ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.SiblingCaret",children:(0,d.jsx)(l.code,{children:"SiblingCaret"})}),"<",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,d.jsx)(l.code,{children:"LexicalNode"})}),", ",(0,d.jsx)(l.code,{children:"D"}),"> | ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.ChildCaret",children:(0,d.jsx)(l.code,{children:"ChildCaret"})}),"<",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:(0,d.jsx)(l.code,{children:"ElementNode"})}),", ",(0,d.jsx)(l.code,{children:"D"}),">"]}),"\n",(0,d.jsx)(l.p,{children:"A PointCaret is a NodeCaret that also includes a\nTextPointCaret type which refers to a specific offset of a TextNode.\nThis type is separate because it is not relevant to general node traversal\nso it doesn't make sense to have it show up except when defining\na CaretRange and in those cases there will be at most two of them only\nat the boundaries."}),"\n",(0,d.jsx)(l.p,{children:"The addition of TextPointCaret allows this type to represent any location\nthat is representable by PointType, as the TextPointCaret refers to a\nspecific offset within a TextNode."}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-14",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"D"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#caretdirection",children:(0,d.jsx)(l.code,{children:"CaretDirection"})})," = ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#caretdirection",children:(0,d.jsx)(l.code,{children:"CaretDirection"})})]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-41",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L166",children:"packages/lexical/src/caret/LexicalCaret.ts:166"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"pointtype",children:"PointType"}),"\n",(0,d.jsxs)(l.p,{children:["\u01AC ",(0,d.jsx)(l.strong,{children:"PointType"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#textpoint",children:(0,d.jsx)(l.code,{children:"TextPoint"})})," | ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#elementpoint",children:(0,d.jsx)(l.code,{children:"ElementPoint"})})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-42",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalSelection.ts#L127",children:"packages/lexical/src/LexicalSelection.ts:127"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"rootlistener",children:"RootListener"}),"\n",(0,d.jsxs)(l.p,{children:["\u01AC ",(0,d.jsx)(l.strong,{children:"RootListener"}),": (",(0,d.jsx)(l.code,{children:"rootElement"}),": ",(0,d.jsx)(l.code,{children:"null"})," | ",(0,d.jsx)(l.code,{children:"HTMLElement"}),", ",(0,d.jsx)(l.code,{children:"prevRootElement"}),": ",(0,d.jsx)(l.code,{children:"null"})," | ",(0,d.jsx)(l.code,{children:"HTMLElement"}),") => ",(0,d.jsx)(l.code,{children:"void"})]}),"\n",(0,d.jsx)(l.h4,{id:"type-declaration-18",children:"Type declaration"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 (",(0,d.jsx)(l.code,{children:"rootElement"}),", ",(0,d.jsx)(l.code,{children:"prevRootElement"}),"): ",(0,d.jsx)(l.code,{children:"void"})]}),"\n",(0,d.jsx)(l.h5,{id:"parameters-6",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"rootElement"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.code,{children:"null"})," | ",(0,d.jsx)(l.code,{children:"HTMLElement"})]})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"prevRootElement"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.code,{children:"null"})," | ",(0,d.jsx)(l.code,{children:"HTMLElement"})]})]})]})]}),"\n",(0,d.jsx)(l.h5,{id:"returns-6",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.code,{children:"void"})}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-43",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalEditor.ts#L327",children:"packages/lexical/src/LexicalEditor.ts:327"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"rootmode",children:"RootMode"}),"\n",(0,d.jsxs)(l.p,{children:["\u01AC ",(0,d.jsx)(l.strong,{children:"RootMode"}),": ",(0,d.jsx)(l.code,{children:'"root"'})," | ",(0,d.jsx)(l.code,{children:'"shadowRoot"'})]}),"\n",(0,d.jsxs)(l.p,{children:["The RootMode is specified in all caret traversals where the traversal can go up\ntowards the root. 'root' means that it will stop at the document root,\nand 'shadowRoot' will stop at the document root or any shadow root\n(per ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#isrootorshadowroot",children:"$isRootOrShadowRoot"}),")."]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-44",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L39",children:"packages/lexical/src/caret/LexicalCaret.ts:39"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"serializededitor",children:"SerializedEditor"}),"\n",(0,d.jsxs)(l.p,{children:["\u01AC ",(0,d.jsx)(l.strong,{children:"SerializedEditor"}),": ",(0,d.jsx)(l.code,{children:"Object"})]}),"\n",(0,d.jsx)(l.h4,{id:"type-declaration-19",children:"Type declaration"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"editorState"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.SerializedEditorState",children:(0,d.jsx)(l.code,{children:"SerializedEditorState"})})})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-45",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalEditor.ts#L418",children:"packages/lexical/src/LexicalEditor.ts:418"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"serializedelementnode",children:"SerializedElementNode"}),"\n",(0,d.jsxs)(l.p,{children:["\u01AC ",(0,d.jsx)(l.strong,{children:"SerializedElementNode"}),"<",(0,d.jsx)(l.code,{children:"T"}),">: ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#spread",children:(0,d.jsx)(l.code,{children:"Spread"})}),"<{ ",(0,d.jsx)(l.code,{children:"children"}),": ",(0,d.jsx)(l.code,{children:"T"}),"[] ; ",(0,d.jsx)(l.code,{children:"direction"}),": ",(0,d.jsx)(l.code,{children:'"ltr"'})," | ",(0,d.jsx)(l.code,{children:'"rtl"'})," | ",(0,d.jsx)(l.code,{children:"null"})," ; ",(0,d.jsx)(l.code,{children:"format"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#elementformattype",children:(0,d.jsx)(l.code,{children:"ElementFormatType"})})," ; ",(0,d.jsx)(l.code,{children:"indent"}),": ",(0,d.jsx)(l.code,{children:"number"})," ; ",(0,d.jsx)(l.code,{children:"textFormat?"}),": ",(0,d.jsx)(l.code,{children:"number"})," ; ",(0,d.jsx)(l.code,{children:"textStyle?"}),": ",(0,d.jsx)(l.code,{children:"string"}),"  }, ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#serializedlexicalnode",children:(0,d.jsx)(l.code,{children:"SerializedLexicalNode"})}),">"]}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-15",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"T"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#serializedlexicalnode",children:(0,d.jsx)(l.code,{children:"SerializedLexicalNode"})})," = ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#serializedlexicalnode",children:(0,d.jsx)(l.code,{children:"SerializedLexicalNode"})})]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-46",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/nodes/LexicalElementNode.ts#L54",children:"packages/lexical/src/nodes/LexicalElementNode.ts:54"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"serializedlexicalnode",children:"SerializedLexicalNode"}),"\n",(0,d.jsxs)(l.p,{children:["\u01AC ",(0,d.jsx)(l.strong,{children:"SerializedLexicalNode"}),": ",(0,d.jsx)(l.code,{children:"Object"})]}),"\n",(0,d.jsx)(l.p,{children:"The base type for all serialized nodes"}),"\n",(0,d.jsx)(l.h4,{id:"type-declaration-20",children:"Type declaration"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"$?"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.code,{children:"Record"}),"<",(0,d.jsx)(l.code,{children:"string"}),", ",(0,d.jsx)(l.code,{children:"unknown"}),">"]}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:"Any state persisted with the NodeState API that is not configured for flat storage"})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"type"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"string"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:"The type string used by the Node class"})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"version"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"number"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:"A numeric version for this schema, defaulting to 1, but not generally recommended for use"})]})]})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-47",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L73",children:"packages/lexical/src/LexicalNode.ts:73"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"serializedlinebreaknode",children:"SerializedLineBreakNode"}),"\n",(0,d.jsxs)(l.p,{children:["\u01AC ",(0,d.jsx)(l.strong,{children:"SerializedLineBreakNode"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#serializedlexicalnode",children:(0,d.jsx)(l.code,{children:"SerializedLexicalNode"})})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-48",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/nodes/LexicalLineBreakNode.ts#L24",children:"packages/lexical/src/nodes/LexicalLineBreakNode.ts:24"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"serializedparagraphnode",children:"SerializedParagraphNode"}),"\n",(0,d.jsxs)(l.p,{children:["\u01AC ",(0,d.jsx)(l.strong,{children:"SerializedParagraphNode"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#spread",children:(0,d.jsx)(l.code,{children:"Spread"})}),"<{ ",(0,d.jsx)(l.code,{children:"textFormat"}),": ",(0,d.jsx)(l.code,{children:"number"})," ; ",(0,d.jsx)(l.code,{children:"textStyle"}),": ",(0,d.jsx)(l.code,{children:"string"}),"  }, ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#serializedelementnode",children:(0,d.jsx)(l.code,{children:"SerializedElementNode"})}),">"]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-49",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/nodes/LexicalParagraphNode.ts#L36",children:"packages/lexical/src/nodes/LexicalParagraphNode.ts:36"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"serializedrootnode",children:"SerializedRootNode"}),"\n",(0,d.jsxs)(l.p,{children:["\u01AC ",(0,d.jsx)(l.strong,{children:"SerializedRootNode"}),"<",(0,d.jsx)(l.code,{children:"T"}),">: ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#serializedelementnode",children:(0,d.jsx)(l.code,{children:"SerializedElementNode"})}),"<",(0,d.jsx)(l.code,{children:"T"}),">"]}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-16",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"T"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#serializedlexicalnode",children:(0,d.jsx)(l.code,{children:"SerializedLexicalNode"})})," = ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#serializedlexicalnode",children:(0,d.jsx)(l.code,{children:"SerializedLexicalNode"})})]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-50",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/nodes/LexicalRootNode.ts#L20",children:"packages/lexical/src/nodes/LexicalRootNode.ts:20"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"serializedtabnode",children:"SerializedTabNode"}),"\n",(0,d.jsxs)(l.p,{children:["\u01AC ",(0,d.jsx)(l.strong,{children:"SerializedTabNode"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#serializedtextnode",children:(0,d.jsx)(l.code,{children:"SerializedTextNode"})})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-51",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/nodes/LexicalTabNode.ts#L24",children:"packages/lexical/src/nodes/LexicalTabNode.ts:24"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"serializedtextnode",children:"SerializedTextNode"}),"\n",(0,d.jsxs)(l.p,{children:["\u01AC ",(0,d.jsx)(l.strong,{children:"SerializedTextNode"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#spread",children:(0,d.jsx)(l.code,{children:"Spread"})}),"<{ ",(0,d.jsx)(l.code,{children:"detail"}),": ",(0,d.jsx)(l.code,{children:"number"})," ; ",(0,d.jsx)(l.code,{children:"format"}),": ",(0,d.jsx)(l.code,{children:"number"})," ; ",(0,d.jsx)(l.code,{children:"mode"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#textmodetype",children:(0,d.jsx)(l.code,{children:"TextModeType"})})," ; ",(0,d.jsx)(l.code,{children:"style"}),": ",(0,d.jsx)(l.code,{children:"string"})," ; ",(0,d.jsx)(l.code,{children:"text"}),": ",(0,d.jsx)(l.code,{children:"string"}),"  }, ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#serializedlexicalnode",children:(0,d.jsx)(l.code,{children:"SerializedLexicalNode"})}),">"]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-52",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/nodes/LexicalTextNode.ts#L77",children:"packages/lexical/src/nodes/LexicalTextNode.ts:77"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"spread",children:"Spread"}),"\n",(0,d.jsxs)(l.p,{children:["\u01AC ",(0,d.jsx)(l.strong,{children:"Spread"}),"<",(0,d.jsx)(l.code,{children:"T1"}),", ",(0,d.jsx)(l.code,{children:"T2"}),">: ",(0,d.jsx)(l.code,{children:"Omit"}),"<",(0,d.jsx)(l.code,{children:"T2"}),", keyof ",(0,d.jsx)(l.code,{children:"T1"}),"> & ",(0,d.jsx)(l.code,{children:"T1"})]}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-17",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsx)(l.tr,{children:(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"})})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsx)(l.tr,{children:(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"T1"})})}),(0,d.jsx)(l.tr,{children:(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"T2"})})})]})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-53",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalEditor.ts#L57",children:"packages/lexical/src/LexicalEditor.ts:57"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"stateconfigkey",children:"StateConfigKey"}),"\n",(0,d.jsxs)(l.p,{children:["\u01AC ",(0,d.jsx)(l.strong,{children:"StateConfigKey"}),"<",(0,d.jsx)(l.code,{children:"S"}),">: ",(0,d.jsx)(l.code,{children:"S"})," extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.StateConfig",children:(0,d.jsx)(l.code,{children:"StateConfig"})}),"<infer K, infer _V> ? ",(0,d.jsx)(l.code,{children:"K"})," : ",(0,d.jsx)(l.code,{children:"never"})]}),"\n",(0,d.jsx)(l.p,{children:"Get the key type (K) from a StateConfig"}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-18",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"S"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#anystateconfig",children:(0,d.jsx)(l.code,{children:"AnyStateConfig"})})]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-54",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNodeState.ts#L36",children:"packages/lexical/src/LexicalNodeState.ts:36"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"stateconfigvalue",children:"StateConfigValue"}),"\n",(0,d.jsxs)(l.p,{children:["\u01AC ",(0,d.jsx)(l.strong,{children:"StateConfigValue"}),"<",(0,d.jsx)(l.code,{children:"S"}),">: ",(0,d.jsx)(l.code,{children:"S"})," extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.StateConfig",children:(0,d.jsx)(l.code,{children:"StateConfig"})}),"<infer _K, infer V> ? ",(0,d.jsx)(l.code,{children:"V"})," : ",(0,d.jsx)(l.code,{children:"never"})]}),"\n",(0,d.jsx)(l.p,{children:"Get the value type (V) from a StateConfig"}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-19",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"S"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#anystateconfig",children:(0,d.jsx)(l.code,{children:"AnyStateConfig"})})]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-55",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNodeState.ts#L27",children:"packages/lexical/src/LexicalNodeState.ts:27"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"statevalueorupdater",children:"StateValueOrUpdater"}),"\n",(0,d.jsxs)(l.p,{children:["\u01AC ",(0,d.jsx)(l.strong,{children:"StateValueOrUpdater"}),"<",(0,d.jsx)(l.code,{children:"Cfg"}),">: ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#valueorupdater",children:(0,d.jsx)(l.code,{children:"ValueOrUpdater"})}),"<",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#stateconfigvalue",children:(0,d.jsx)(l.code,{children:"StateConfigValue"})}),"<",(0,d.jsx)(l.code,{children:"Cfg"}),">>"]}),"\n",(0,d.jsx)(l.p,{children:"A type alias to make it easier to define setter methods on your node class"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.strong,{children:(0,d.jsx)(l.code,{children:"Example"})})}),"\n",(0,d.jsx)(l.pre,{children:(0,d.jsx)(l.code,{className:"language-ts",children:'const fooState = createState("foo", { parse: ... });\nclass MyClass extends TextNode {\n  // ...\n  setFoo(valueOrUpdater: StateValueOrUpdater<typeof fooState>): this {\n    return $setState(this, fooState, valueOrUpdater);\n  }\n}\n'})}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-20",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"Cfg"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#anystateconfig",children:(0,d.jsx)(l.code,{children:"AnyStateConfig"})})]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-56",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNodeState.ts#L63",children:"packages/lexical/src/LexicalNodeState.ts:63"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"staticnodeconfig",children:"StaticNodeConfig"}),"\n",(0,d.jsxs)(l.p,{children:["\u01AC ",(0,d.jsx)(l.strong,{children:"StaticNodeConfig"}),"<",(0,d.jsx)(l.code,{children:"T"}),", ",(0,d.jsx)(l.code,{children:"Type"}),">: ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#basestaticnodeconfig",children:(0,d.jsx)(l.code,{children:"BaseStaticNodeConfig"})})," & { readonly [K in Type]?: StaticNodeConfigValue<T, Type> }"]}),"\n",(0,d.jsx)(l.p,{children:"Used to extract the node and type from a StaticNodeConfigRecord"}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-21",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"T"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,d.jsx)(l.code,{children:"LexicalNode"})})]})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"Type"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.code,{children:"string"})]})]})]})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-57",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L176",children:"packages/lexical/src/LexicalNode.ts:176"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"textformattype",children:"TextFormatType"}),"\n",(0,d.jsxs)(l.p,{children:["\u01AC ",(0,d.jsx)(l.strong,{children:"TextFormatType"}),": ",(0,d.jsx)(l.code,{children:'"bold"'})," | ",(0,d.jsx)(l.code,{children:'"underline"'})," | ",(0,d.jsx)(l.code,{children:'"strikethrough"'})," | ",(0,d.jsx)(l.code,{children:'"italic"'})," | ",(0,d.jsx)(l.code,{children:'"highlight"'})," | ",(0,d.jsx)(l.code,{children:'"code"'})," | ",(0,d.jsx)(l.code,{children:'"subscript"'})," | ",(0,d.jsx)(l.code,{children:'"superscript"'})," | ",(0,d.jsx)(l.code,{children:'"lowercase"'})," | ",(0,d.jsx)(l.code,{children:'"uppercase"'})," | ",(0,d.jsx)(l.code,{children:'"capitalize"'})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-58",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/nodes/LexicalTextNode.ts#L90",children:"packages/lexical/src/nodes/LexicalTextNode.ts:90"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"textmodetype",children:"TextModeType"}),"\n",(0,d.jsxs)(l.p,{children:["\u01AC ",(0,d.jsx)(l.strong,{children:"TextModeType"}),": ",(0,d.jsx)(l.code,{children:'"normal"'})," | ",(0,d.jsx)(l.code,{children:'"token"'})," | ",(0,d.jsx)(l.code,{children:'"segmented"'})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-59",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/nodes/LexicalTextNode.ts#L103",children:"packages/lexical/src/nodes/LexicalTextNode.ts:103"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"textpoint",children:"TextPoint"}),"\n",(0,d.jsxs)(l.p,{children:["\u01AC ",(0,d.jsx)(l.strong,{children:"TextPoint"}),": ",(0,d.jsx)(l.code,{children:"Object"})]}),"\n",(0,d.jsx)(l.h4,{id:"type-declaration-21",children:"Type declaration"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"_selection"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.BaseSelection",children:(0,d.jsx)(l.code,{children:"BaseSelection"})})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"getNode"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["() => ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.TextNode",children:(0,d.jsx)(l.code,{children:"TextNode"})})]})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"is"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["(",(0,d.jsx)(l.code,{children:"point"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#pointtype",children:(0,d.jsx)(l.code,{children:"PointType"})}),") => ",(0,d.jsx)(l.code,{children:"boolean"})]})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"isBefore"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["(",(0,d.jsx)(l.code,{children:"point"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#pointtype",children:(0,d.jsx)(l.code,{children:"PointType"})}),") => ",(0,d.jsx)(l.code,{children:"boolean"})]})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"key"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#nodekey",children:(0,d.jsx)(l.code,{children:"NodeKey"})})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"offset"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"number"})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"set"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["(",(0,d.jsx)(l.code,{children:"key"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#nodekey",children:(0,d.jsx)(l.code,{children:"NodeKey"})}),", ",(0,d.jsx)(l.code,{children:"offset"}),": ",(0,d.jsx)(l.code,{children:"number"}),", ",(0,d.jsx)(l.code,{children:"type"}),": ",(0,d.jsx)(l.code,{children:'"text"'})," | ",(0,d.jsx)(l.code,{children:'"element"'}),", ",(0,d.jsx)(l.code,{children:"onlyIfChanged?"}),": ",(0,d.jsx)(l.code,{children:"boolean"}),") => ",(0,d.jsx)(l.code,{children:"void"})]})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"type"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:'"text"'})})]})]})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-60",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalSelection.ts#L95",children:"packages/lexical/src/LexicalSelection.ts:95"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"textpointcaretslicetuple",children:"TextPointCaretSliceTuple"}),"\n",(0,d.jsxs)(l.p,{children:["\u01AC ",(0,d.jsx)(l.strong,{children:"TextPointCaretSliceTuple"}),"<",(0,d.jsx)(l.code,{children:"D"}),">: readonly [anchorSlice: null | TextPointCaretSlice<TextNode, D>, focusSlice: null | TextPointCaretSlice<TextNode, D>]"]}),"\n",(0,d.jsx)(l.p,{children:"A utility type to specify that a CaretRange may have zero,\none, or two associated TextPointCaretSlice. If the anchor\nand focus are on the same node, the anchorSlice will contain\nthe slice and focusSlie will be null."}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-22",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"D"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#caretdirection",children:(0,d.jsx)(l.code,{children:"CaretDirection"})})]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-61",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L371",children:"packages/lexical/src/caret/LexicalCaret.ts:371"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"transform",children:"Transform"}),"\n",(0,d.jsxs)(l.p,{children:["\u01AC ",(0,d.jsx)(l.strong,{children:"Transform"}),"<",(0,d.jsx)(l.code,{children:"T"}),">: (",(0,d.jsx)(l.code,{children:"node"}),": ",(0,d.jsx)(l.code,{children:"T"}),") => ",(0,d.jsx)(l.code,{children:"void"})]}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-23",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"T"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,d.jsx)(l.code,{children:"LexicalNode"})})]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"type-declaration-22",children:"Type declaration"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 (",(0,d.jsx)(l.code,{children:"node"}),"): ",(0,d.jsx)(l.code,{children:"void"})]}),"\n",(0,d.jsx)(l.h5,{id:"parameters-7",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"node"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"T"})})]})})]}),"\n",(0,d.jsx)(l.h5,{id:"returns-7",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.code,{children:"void"})}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-62",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalEditor.ts#L243",children:"packages/lexical/src/LexicalEditor.ts:243"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"updatelistener",children:"UpdateListener"}),"\n",(0,d.jsxs)(l.p,{children:["\u01AC ",(0,d.jsx)(l.strong,{children:"UpdateListener"}),": (",(0,d.jsx)(l.code,{children:"payload"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.UpdateListenerPayload",children:(0,d.jsx)(l.code,{children:"UpdateListenerPayload"})}),") => ",(0,d.jsx)(l.code,{children:"void"})]}),"\n",(0,d.jsx)(l.p,{children:"A listener that gets called after the editor is updated"}),"\n",(0,d.jsx)(l.h4,{id:"type-declaration-23",children:"Type declaration"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 (",(0,d.jsx)(l.code,{children:"payload"}),"): ",(0,d.jsx)(l.code,{children:"void"})]}),"\n",(0,d.jsx)(l.h5,{id:"parameters-8",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"payload"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.UpdateListenerPayload",children:(0,d.jsx)(l.code,{children:"UpdateListenerPayload"})})})]})})]}),"\n",(0,d.jsx)(l.h5,{id:"returns-8",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.code,{children:"void"})}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-63",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalEditor.ts#L321",children:"packages/lexical/src/LexicalEditor.ts:321"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"updatetag",children:"UpdateTag"}),"\n",(0,d.jsxs)(l.p,{children:["\u01AC ",(0,d.jsx)(l.strong,{children:"UpdateTag"}),": typeof ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#collaboration_tag",children:(0,d.jsx)(l.code,{children:"COLLABORATION_TAG"})})," | typeof ",(0,d.jsx)(l.code,{children:"FOCUS_TAG"})," | typeof ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#historic_tag",children:(0,d.jsx)(l.code,{children:"HISTORIC_TAG"})})," | typeof ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#history_merge_tag",children:(0,d.jsx)(l.code,{children:"HISTORY_MERGE_TAG"})})," | typeof ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#history_push_tag",children:(0,d.jsx)(l.code,{children:"HISTORY_PUSH_TAG"})})," | typeof ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#paste_tag",children:(0,d.jsx)(l.code,{children:"PASTE_TAG"})})," | typeof ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#skip_collab_tag",children:(0,d.jsx)(l.code,{children:"SKIP_COLLAB_TAG"})})," | typeof ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#skip_dom_selection_tag",children:(0,d.jsx)(l.code,{children:"SKIP_DOM_SELECTION_TAG"})})," | typeof ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#skip_scroll_into_view_tag",children:(0,d.jsx)(l.code,{children:"SKIP_SCROLL_INTO_VIEW_TAG"})})," | ",(0,d.jsx)(l.code,{children:"string"})," & "]}),"\n",(0,d.jsx)(l.p,{children:"The set of known update tags to help with TypeScript suggestions."}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-64",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalUpdateTags.ts#L63",children:"packages/lexical/src/LexicalUpdateTags.ts:63"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"valueorupdater",children:"ValueOrUpdater"}),"\n",(0,d.jsxs)(l.p,{children:["\u01AC ",(0,d.jsx)(l.strong,{children:"ValueOrUpdater"}),"<",(0,d.jsx)(l.code,{children:"V"}),">: ",(0,d.jsx)(l.code,{children:"V"})," | (",(0,d.jsx)(l.code,{children:"prevValue"}),": ",(0,d.jsx)(l.code,{children:"V"}),") => ",(0,d.jsx)(l.code,{children:"V"})]}),"\n",(0,d.jsxs)(l.p,{children:["A value type, or an updater for that value type. For use with\n",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#setstate",children:"$setState"})," or any user-defined wrappers around it."]}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-24",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsx)(l.tr,{children:(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"})})}),(0,d.jsx)(l.tbody,{children:(0,d.jsx)(l.tr,{children:(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"V"})})})})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-65",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNodeState.ts#L47",children:"packages/lexical/src/LexicalNodeState.ts:47"})}),"\n",(0,d.jsx)(l.h2,{id:"variables",children:"Variables"}),"\n",(0,d.jsx)(l.h3,{id:"blur_command",children:"BLUR_COMMAND"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"BLUR_COMMAND"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#lexicalcommand",children:(0,d.jsx)(l.code,{children:"LexicalCommand"})}),"<",(0,d.jsx)(l.code,{children:"FocusEvent"}),">"]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-66",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalCommands.ts#L212",children:"packages/lexical/src/LexicalCommands.ts:212"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"can_redo_command",children:"CAN_REDO_COMMAND"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"CAN_REDO_COMMAND"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#lexicalcommand",children:(0,d.jsx)(l.code,{children:"LexicalCommand"})}),"<",(0,d.jsx)(l.code,{children:"boolean"}),">"]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-67",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalCommands.ts#L206",children:"packages/lexical/src/LexicalCommands.ts:206"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"can_undo_command",children:"CAN_UNDO_COMMAND"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"CAN_UNDO_COMMAND"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#lexicalcommand",children:(0,d.jsx)(l.code,{children:"LexicalCommand"})}),"<",(0,d.jsx)(l.code,{children:"boolean"}),">"]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-68",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalCommands.ts#L208",children:"packages/lexical/src/LexicalCommands.ts:208"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"clear_editor_command",children:"CLEAR_EDITOR_COMMAND"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"CLEAR_EDITOR_COMMAND"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#lexicalcommand",children:(0,d.jsx)(l.code,{children:"LexicalCommand"})}),"<",(0,d.jsx)(l.code,{children:"void"}),">"]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-69",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalCommands.ts#L200",children:"packages/lexical/src/LexicalCommands.ts:200"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"clear_history_command",children:"CLEAR_HISTORY_COMMAND"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"CLEAR_HISTORY_COMMAND"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#lexicalcommand",children:(0,d.jsx)(l.code,{children:"LexicalCommand"})}),"<",(0,d.jsx)(l.code,{children:"void"}),">"]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-70",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalCommands.ts#L203",children:"packages/lexical/src/LexicalCommands.ts:203"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"click_command",children:"CLICK_COMMAND"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"CLICK_COMMAND"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#lexicalcommand",children:(0,d.jsx)(l.code,{children:"LexicalCommand"})}),"<",(0,d.jsx)(l.code,{children:"MouseEvent"}),">"]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-71",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalCommands.ts#L28",children:"packages/lexical/src/LexicalCommands.ts:28"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"collaboration_tag",children:"COLLABORATION_TAG"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"COLLABORATION_TAG"}),": ",(0,d.jsx)(l.code,{children:'"collaboration"'})]}),"\n",(0,d.jsx)(l.p,{children:"Indicates that the update is related to collaborative editing"}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-72",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalUpdateTags.ts#L37",children:"packages/lexical/src/LexicalUpdateTags.ts:37"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"command_priority_critical",children:"COMMAND_PRIORITY_CRITICAL"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"COMMAND_PRIORITY_CRITICAL"}),": ",(0,d.jsx)(l.code,{children:"4"})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-73",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalEditor.ts#L353",children:"packages/lexical/src/LexicalEditor.ts:353"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"command_priority_editor",children:"COMMAND_PRIORITY_EDITOR"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"COMMAND_PRIORITY_EDITOR"}),": ",(0,d.jsx)(l.code,{children:"0"})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-74",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalEditor.ts#L349",children:"packages/lexical/src/LexicalEditor.ts:349"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"command_priority_high",children:"COMMAND_PRIORITY_HIGH"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"COMMAND_PRIORITY_HIGH"}),": ",(0,d.jsx)(l.code,{children:"3"})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-75",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalEditor.ts#L352",children:"packages/lexical/src/LexicalEditor.ts:352"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"command_priority_low",children:"COMMAND_PRIORITY_LOW"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"COMMAND_PRIORITY_LOW"}),": ",(0,d.jsx)(l.code,{children:"1"})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-76",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalEditor.ts#L350",children:"packages/lexical/src/LexicalEditor.ts:350"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"command_priority_normal",children:"COMMAND_PRIORITY_NORMAL"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"COMMAND_PRIORITY_NORMAL"}),": ",(0,d.jsx)(l.code,{children:"2"})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-77",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalEditor.ts#L351",children:"packages/lexical/src/LexicalEditor.ts:351"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"controlled_text_insertion_command",children:"CONTROLLED_TEXT_INSERTION_COMMAND"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"CONTROLLED_TEXT_INSERTION_COMMAND"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#lexicalcommand",children:(0,d.jsx)(l.code,{children:"LexicalCommand"})}),"<",(0,d.jsx)(l.code,{children:"InputEvent"})," | ",(0,d.jsx)(l.code,{children:"string"}),">"]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-78",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalCommands.ts#L49",children:"packages/lexical/src/LexicalCommands.ts:49"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"copy_command",children:"COPY_COMMAND"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"COPY_COMMAND"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#lexicalcommand",children:(0,d.jsx)(l.code,{children:"LexicalCommand"})}),"<",(0,d.jsx)(l.code,{children:"ClipboardEvent"})," | ",(0,d.jsx)(l.code,{children:"KeyboardEvent"})," | ",(0,d.jsx)(l.code,{children:"null"}),">"]}),"\n",(0,d.jsx)(l.p,{children:"Dispatched on a copy event, either via the clipboard or a KeyboardEvent\n(Cmd+C on macOS, Ctrl+C elsewhere)."}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-79",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalCommands.ts#L184",children:"packages/lexical/src/LexicalCommands.ts:184"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"cut_command",children:"CUT_COMMAND"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"CUT_COMMAND"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#lexicalcommand",children:(0,d.jsx)(l.code,{children:"LexicalCommand"})}),"<",(0,d.jsx)(l.code,{children:"ClipboardEvent"})," | ",(0,d.jsx)(l.code,{children:"KeyboardEvent"})," | ",(0,d.jsx)(l.code,{children:"null"}),">"]}),"\n",(0,d.jsx)(l.p,{children:"Dispatched on a cut event, either via the clipboard or a KeyboardEvent\n(Cmd+X on macOS, Ctrl+X elsewhere)."}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-80",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalCommands.ts#L191",children:"packages/lexical/src/LexicalCommands.ts:191"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"delete_character_command",children:"DELETE_CHARACTER_COMMAND"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"DELETE_CHARACTER_COMMAND"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#lexicalcommand",children:(0,d.jsx)(l.code,{children:"LexicalCommand"})}),"<",(0,d.jsx)(l.code,{children:"boolean"}),">"]}),"\n",(0,d.jsxs)(l.p,{children:["Dispatched to delete a character, the payload will be ",(0,d.jsx)(l.code,{children:"true"})," if the deletion\nis backwards (backspace or delete on macOS) and ",(0,d.jsx)(l.code,{children:"false"})," if forwards\n(delete or Fn+Delete on macOS)."]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-81",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalCommands.ts#L35",children:"packages/lexical/src/LexicalCommands.ts:35"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"delete_line_command",children:"DELETE_LINE_COMMAND"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"DELETE_LINE_COMMAND"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#lexicalcommand",children:(0,d.jsx)(l.code,{children:"LexicalCommand"})}),"<",(0,d.jsx)(l.code,{children:"boolean"}),">"]}),"\n",(0,d.jsxs)(l.p,{children:["Dispatched to delete a line, the payload will be ",(0,d.jsx)(l.code,{children:"true"})," if the deletion is\nbackwards (Cmd+Delete on macOS), and ",(0,d.jsx)(l.code,{children:"false"})," if forwards\n(Fn+Cmd+Delete on macOS)."]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-82",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalCommands.ts#L69",children:"packages/lexical/src/LexicalCommands.ts:69"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"delete_word_command",children:"DELETE_WORD_COMMAND"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"DELETE_WORD_COMMAND"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#lexicalcommand",children:(0,d.jsx)(l.code,{children:"LexicalCommand"})}),"<",(0,d.jsx)(l.code,{children:"boolean"}),">"]}),"\n",(0,d.jsxs)(l.p,{children:["Dispatched to delete a word, the payload will be ",(0,d.jsx)(l.code,{children:"true"})," if the deletion is\nbackwards (Ctrl+Backspace or Opt+Delete on macOS), and ",(0,d.jsx)(l.code,{children:"false"})," if\nforwards (Ctrl+Delete or Fn+Opt+Delete on macOS)."]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-83",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalCommands.ts#L61",children:"packages/lexical/src/LexicalCommands.ts:61"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"dragend_command",children:"DRAGEND_COMMAND"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"DRAGEND_COMMAND"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#lexicalcommand",children:(0,d.jsx)(l.code,{children:"LexicalCommand"})}),"<",(0,d.jsx)(l.code,{children:"DragEvent"}),">"]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-84",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalCommands.ts#L178",children:"packages/lexical/src/LexicalCommands.ts:178"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"dragover_command",children:"DRAGOVER_COMMAND"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"DRAGOVER_COMMAND"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#lexicalcommand",children:(0,d.jsx)(l.code,{children:"LexicalCommand"})}),"<",(0,d.jsx)(l.code,{children:"DragEvent"}),">"]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-85",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalCommands.ts#L176",children:"packages/lexical/src/LexicalCommands.ts:176"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"dragstart_command",children:"DRAGSTART_COMMAND"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"DRAGSTART_COMMAND"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#lexicalcommand",children:(0,d.jsx)(l.code,{children:"LexicalCommand"})}),"<",(0,d.jsx)(l.code,{children:"DragEvent"}),">"]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-86",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalCommands.ts#L174",children:"packages/lexical/src/LexicalCommands.ts:174"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"drop_command",children:"DROP_COMMAND"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"DROP_COMMAND"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#lexicalcommand",children:(0,d.jsx)(l.code,{children:"LexicalCommand"})}),"<",(0,d.jsx)(l.code,{children:"DragEvent"}),">"]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-87",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalCommands.ts#L170",children:"packages/lexical/src/LexicalCommands.ts:170"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"focus_command",children:"FOCUS_COMMAND"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"FOCUS_COMMAND"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#lexicalcommand",children:(0,d.jsx)(l.code,{children:"LexicalCommand"})}),"<",(0,d.jsx)(l.code,{children:"FocusEvent"}),">"]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-88",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalCommands.ts#L210",children:"packages/lexical/src/LexicalCommands.ts:210"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"format_element_command",children:"FORMAT_ELEMENT_COMMAND"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"FORMAT_ELEMENT_COMMAND"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#lexicalcommand",children:(0,d.jsx)(l.code,{children:"LexicalCommand"})}),"<",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#elementformattype",children:(0,d.jsx)(l.code,{children:"ElementFormatType"})}),">"]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-89",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalCommands.ts#L172",children:"packages/lexical/src/LexicalCommands.ts:172"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"format_text_command",children:"FORMAT_TEXT_COMMAND"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"FORMAT_TEXT_COMMAND"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#lexicalcommand",children:(0,d.jsx)(l.code,{children:"LexicalCommand"})}),"<",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#textformattype",children:(0,d.jsx)(l.code,{children:"TextFormatType"})}),">"]}),"\n",(0,d.jsx)(l.p,{children:"Dispatched to format the selected text."}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-90",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalCommands.ts#L75",children:"packages/lexical/src/LexicalCommands.ts:75"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"historic_tag",children:"HISTORIC_TAG"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"HISTORIC_TAG"}),": ",(0,d.jsx)(l.code,{children:'"historic"'})]}),"\n",(0,d.jsx)(l.p,{children:"Indicates that the update is related to history operations (undo/redo)"}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-91",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalUpdateTags.ts#L17",children:"packages/lexical/src/LexicalUpdateTags.ts:17"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"history_merge_tag",children:"HISTORY_MERGE_TAG"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"HISTORY_MERGE_TAG"}),": ",(0,d.jsx)(l.code,{children:'"history-merge"'})]}),"\n",(0,d.jsx)(l.p,{children:"Indicates that the current update should be merged with the previous history entry"}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-92",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalUpdateTags.ts#L27",children:"packages/lexical/src/LexicalUpdateTags.ts:27"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"history_push_tag",children:"HISTORY_PUSH_TAG"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"HISTORY_PUSH_TAG"}),": ",(0,d.jsx)(l.code,{children:'"history-push"'})]}),"\n",(0,d.jsx)(l.p,{children:"Indicates that a new history entry should be pushed to the history stack"}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-93",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalUpdateTags.ts#L22",children:"packages/lexical/src/LexicalUpdateTags.ts:22"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"indent_content_command",children:"INDENT_CONTENT_COMMAND"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"INDENT_CONTENT_COMMAND"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#lexicalcommand",children:(0,d.jsx)(l.code,{children:"LexicalCommand"})}),"<",(0,d.jsx)(l.code,{children:"void"}),">"]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-94",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalCommands.ts#L164",children:"packages/lexical/src/LexicalCommands.ts:164"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"insert_line_break_command",children:"INSERT_LINE_BREAK_COMMAND"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"INSERT_LINE_BREAK_COMMAND"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#lexicalcommand",children:(0,d.jsx)(l.code,{children:"LexicalCommand"})}),"<",(0,d.jsx)(l.code,{children:"boolean"}),">"]}),"\n",(0,d.jsx)(l.p,{children:"Dispatched to insert a line break. With a false payload the\ncursor moves to the new line (Shift+Enter), with a true payload the cursor\ndoes not move (Ctrl+O on macOS)."}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-95",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalCommands.ts#L43",children:"packages/lexical/src/LexicalCommands.ts:43"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"insert_paragraph_command",children:"INSERT_PARAGRAPH_COMMAND"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"INSERT_PARAGRAPH_COMMAND"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#lexicalcommand",children:(0,d.jsx)(l.code,{children:"LexicalCommand"})}),"<",(0,d.jsx)(l.code,{children:"void"}),">"]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-96",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalCommands.ts#L46",children:"packages/lexical/src/LexicalCommands.ts:46"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"insert_tab_command",children:"INSERT_TAB_COMMAND"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"INSERT_TAB_COMMAND"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#lexicalcommand",children:(0,d.jsx)(l.code,{children:"LexicalCommand"})}),"<",(0,d.jsx)(l.code,{children:"void"}),">"]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-97",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalCommands.ts#L162",children:"packages/lexical/src/LexicalCommands.ts:162"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"is_all_formatting",children:"IS_ALL_FORMATTING"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"IS_ALL_FORMATTING"}),": ",(0,d.jsx)(l.code,{children:"number"})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-98",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalConstants.ts#L53",children:"packages/lexical/src/LexicalConstants.ts:53"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"is_bold",children:"IS_BOLD"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"IS_BOLD"}),": ",(0,d.jsx)(l.code,{children:"1"})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-99",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalConstants.ts#L41",children:"packages/lexical/src/LexicalConstants.ts:41"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"is_code",children:"IS_CODE"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"IS_CODE"}),": ",(0,d.jsx)(l.code,{children:"number"})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-100",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalConstants.ts#L45",children:"packages/lexical/src/LexicalConstants.ts:45"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"is_highlight",children:"IS_HIGHLIGHT"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"IS_HIGHLIGHT"}),": ",(0,d.jsx)(l.code,{children:"number"})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-101",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalConstants.ts#L48",children:"packages/lexical/src/LexicalConstants.ts:48"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"is_italic",children:"IS_ITALIC"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"IS_ITALIC"}),": ",(0,d.jsx)(l.code,{children:"number"})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-102",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalConstants.ts#L42",children:"packages/lexical/src/LexicalConstants.ts:42"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"is_strikethrough",children:"IS_STRIKETHROUGH"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"IS_STRIKETHROUGH"}),": ",(0,d.jsx)(l.code,{children:"number"})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-103",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalConstants.ts#L43",children:"packages/lexical/src/LexicalConstants.ts:43"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"is_subscript",children:"IS_SUBSCRIPT"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"IS_SUBSCRIPT"}),": ",(0,d.jsx)(l.code,{children:"number"})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-104",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalConstants.ts#L46",children:"packages/lexical/src/LexicalConstants.ts:46"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"is_superscript",children:"IS_SUPERSCRIPT"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"IS_SUPERSCRIPT"}),": ",(0,d.jsx)(l.code,{children:"number"})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-105",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalConstants.ts#L47",children:"packages/lexical/src/LexicalConstants.ts:47"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"is_underline",children:"IS_UNDERLINE"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"IS_UNDERLINE"}),": ",(0,d.jsx)(l.code,{children:"number"})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-106",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalConstants.ts#L44",children:"packages/lexical/src/LexicalConstants.ts:44"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"key_arrow_down_command",children:"KEY_ARROW_DOWN_COMMAND"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"KEY_ARROW_DOWN_COMMAND"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#lexicalcommand",children:(0,d.jsx)(l.code,{children:"LexicalCommand"})}),"<",(0,d.jsx)(l.code,{children:"KeyboardEvent"}),">"]}),"\n",(0,d.jsxs)(l.p,{children:["Dispatched when the ",(0,d.jsx)(l.code,{children:"'ArrowUp'"})," key is pressed.\nThe shift and/or alt (option) modifier keys may also be down."]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-107",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalCommands.ts#L124",children:"packages/lexical/src/LexicalCommands.ts:124"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"key_arrow_left_command",children:"KEY_ARROW_LEFT_COMMAND"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"KEY_ARROW_LEFT_COMMAND"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#lexicalcommand",children:(0,d.jsx)(l.code,{children:"LexicalCommand"})}),"<",(0,d.jsx)(l.code,{children:"KeyboardEvent"}),">"]}),"\n",(0,d.jsxs)(l.p,{children:["Dispatched when the ",(0,d.jsx)(l.code,{children:"'ArrowLeft'"})," key is pressed.\nThe shift modifier key may also be down."]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-108",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalCommands.ts#L106",children:"packages/lexical/src/LexicalCommands.ts:106"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"key_arrow_right_command",children:"KEY_ARROW_RIGHT_COMMAND"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"KEY_ARROW_RIGHT_COMMAND"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#lexicalcommand",children:(0,d.jsx)(l.code,{children:"LexicalCommand"})}),"<",(0,d.jsx)(l.code,{children:"KeyboardEvent"}),">"]}),"\n",(0,d.jsxs)(l.p,{children:["Dispatched when the ",(0,d.jsx)(l.code,{children:"'ArrowRight'"})," key is pressed.\nThe shift modifier key may also be down."]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-109",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalCommands.ts#L94",children:"packages/lexical/src/LexicalCommands.ts:94"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"key_arrow_up_command",children:"KEY_ARROW_UP_COMMAND"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"KEY_ARROW_UP_COMMAND"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#lexicalcommand",children:(0,d.jsx)(l.code,{children:"LexicalCommand"})}),"<",(0,d.jsx)(l.code,{children:"KeyboardEvent"}),">"]}),"\n",(0,d.jsxs)(l.p,{children:["Dispatched when the ",(0,d.jsx)(l.code,{children:"'ArrowUp'"})," key is pressed.\nThe shift and/or alt (option) modifier keys may also be down."]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-110",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalCommands.ts#L118",children:"packages/lexical/src/LexicalCommands.ts:118"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"key_backspace_command",children:"KEY_BACKSPACE_COMMAND"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"KEY_BACKSPACE_COMMAND"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#lexicalcommand",children:(0,d.jsx)(l.code,{children:"LexicalCommand"})}),"<",(0,d.jsx)(l.code,{children:"KeyboardEvent"}),">"]}),"\n",(0,d.jsxs)(l.p,{children:["Dispatched whenever the ",(0,d.jsx)(l.code,{children:"'Backspace'"})," key is pressed, the shift\nmodifier key may be down."]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-111",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalCommands.ts#L143",children:"packages/lexical/src/LexicalCommands.ts:143"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"key_delete_command",children:"KEY_DELETE_COMMAND"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"KEY_DELETE_COMMAND"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#lexicalcommand",children:(0,d.jsx)(l.code,{children:"LexicalCommand"})}),"<",(0,d.jsx)(l.code,{children:"KeyboardEvent"}),">"]}),"\n",(0,d.jsxs)(l.p,{children:["Dispatched whenever the ",(0,d.jsx)(l.code,{children:"'Delete'"})," key is pressed (Fn+Delete on macOS)."]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-112",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalCommands.ts#L154",children:"packages/lexical/src/LexicalCommands.ts:154"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"key_down_command",children:"KEY_DOWN_COMMAND"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"KEY_DOWN_COMMAND"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#lexicalcommand",children:(0,d.jsx)(l.code,{children:"LexicalCommand"})}),"<",(0,d.jsx)(l.code,{children:"KeyboardEvent"}),">"]}),"\n",(0,d.jsx)(l.p,{children:"Dispatched when any key is pressed."}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-113",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalCommands.ts#L88",children:"packages/lexical/src/LexicalCommands.ts:88"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"key_enter_command",children:"KEY_ENTER_COMMAND"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"KEY_ENTER_COMMAND"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#lexicalcommand",children:(0,d.jsx)(l.code,{children:"LexicalCommand"})}),"<",(0,d.jsx)(l.code,{children:"KeyboardEvent"})," | ",(0,d.jsx)(l.code,{children:"null"}),">"]}),"\n",(0,d.jsx)(l.p,{children:"Dispatched when the enter key is pressed, may also be called with a null\npayload when the intent is to insert a newline. The shift modifier key\nmust be down, any other modifier keys may also be down."}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-114",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalCommands.ts#L131",children:"packages/lexical/src/LexicalCommands.ts:131"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"key_escape_command",children:"KEY_ESCAPE_COMMAND"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"KEY_ESCAPE_COMMAND"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#lexicalcommand",children:(0,d.jsx)(l.code,{children:"LexicalCommand"})}),"<",(0,d.jsx)(l.code,{children:"KeyboardEvent"}),">"]}),"\n",(0,d.jsxs)(l.p,{children:["Dispatched whenever the ",(0,d.jsx)(l.code,{children:"'Escape'"})," key is pressed, any modifier\nkeys may be down."]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-115",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalCommands.ts#L149",children:"packages/lexical/src/LexicalCommands.ts:149"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"key_modifier_command",children:"KEY_MODIFIER_COMMAND"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"KEY_MODIFIER_COMMAND"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#lexicalcommand",children:(0,d.jsx)(l.code,{children:"LexicalCommand"})}),"<",(0,d.jsx)(l.code,{children:"KeyboardEvent"}),">"]}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.strong,{children:(0,d.jsx)(l.code,{children:"Deprecated"})})}),"\n",(0,d.jsx)(l.p,{children:"in v0.31.0, use KEY_DOWN_COMMAND and check for modifiers\ndirectly."}),"\n",(0,d.jsx)(l.p,{children:"Dispatched after any KeyboardEvent when modifiers are pressed"}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-116",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalCommands.ts#L220",children:"packages/lexical/src/LexicalCommands.ts:220"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"key_space_command",children:"KEY_SPACE_COMMAND"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"KEY_SPACE_COMMAND"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#lexicalcommand",children:(0,d.jsx)(l.code,{children:"LexicalCommand"})}),"<",(0,d.jsx)(l.code,{children:"KeyboardEvent"}),">"]}),"\n",(0,d.jsxs)(l.p,{children:["Dispatched whenever the space (",(0,d.jsx)(l.code,{children:"' '"}),") key is pressed, any modifier\nkeys may be down."]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-117",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalCommands.ts#L137",children:"packages/lexical/src/LexicalCommands.ts:137"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"key_tab_command",children:"KEY_TAB_COMMAND"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"KEY_TAB_COMMAND"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#lexicalcommand",children:(0,d.jsx)(l.code,{children:"LexicalCommand"})}),"<",(0,d.jsx)(l.code,{children:"KeyboardEvent"}),">"]}),"\n",(0,d.jsxs)(l.p,{children:["Dispatched whenever the ",(0,d.jsx)(l.code,{children:"'Tab'"})," key is pressed. The shift modifier key\nmay be down."]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-118",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalCommands.ts#L160",children:"packages/lexical/src/LexicalCommands.ts:160"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"move_to_end",children:"MOVE_TO_END"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"MOVE_TO_END"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#lexicalcommand",children:(0,d.jsx)(l.code,{children:"LexicalCommand"})}),"<",(0,d.jsx)(l.code,{children:"KeyboardEvent"}),">"]}),"\n",(0,d.jsx)(l.p,{children:"Dispatched when the move to end keyboard shortcut is pressed,\n(Cmd+Right on macOS; Ctrl+Right elsewhere)."}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-119",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalCommands.ts#L100",children:"packages/lexical/src/LexicalCommands.ts:100"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"move_to_start",children:"MOVE_TO_START"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"MOVE_TO_START"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#lexicalcommand",children:(0,d.jsx)(l.code,{children:"LexicalCommand"})}),"<",(0,d.jsx)(l.code,{children:"KeyboardEvent"}),">"]}),"\n",(0,d.jsx)(l.p,{children:"Dispatched when the move to start keyboard shortcut is pressed,\n(Cmd+Left on macOS; Ctrl+Left elsewhere)."}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-120",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalCommands.ts#L112",children:"packages/lexical/src/LexicalCommands.ts:112"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"node_state_key",children:"NODE_STATE_KEY"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"NODE_STATE_KEY"}),": ",(0,d.jsx)(l.code,{children:'"$"'})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-121",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalConstants.ts#L158",children:"packages/lexical/src/LexicalConstants.ts:158"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"outdent_content_command",children:"OUTDENT_CONTENT_COMMAND"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"OUTDENT_CONTENT_COMMAND"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#lexicalcommand",children:(0,d.jsx)(l.code,{children:"LexicalCommand"})}),"<",(0,d.jsx)(l.code,{children:"void"}),">"]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-122",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalCommands.ts#L167",children:"packages/lexical/src/LexicalCommands.ts:167"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"paste_command",children:"PASTE_COMMAND"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"PASTE_COMMAND"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#lexicalcommand",children:(0,d.jsx)(l.code,{children:"LexicalCommand"})}),"<",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#pastecommandtype",children:(0,d.jsx)(l.code,{children:"PasteCommandType"})}),">"]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-123",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalCommands.ts#L52",children:"packages/lexical/src/LexicalCommands.ts:52"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"paste_tag",children:"PASTE_TAG"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"PASTE_TAG"}),": ",(0,d.jsx)(l.code,{children:'"paste"'})]}),"\n",(0,d.jsx)(l.p,{children:"Indicates that the update is related to a paste operation"}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-124",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalUpdateTags.ts#L32",children:"packages/lexical/src/LexicalUpdateTags.ts:32"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"redo_command",children:"REDO_COMMAND"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"REDO_COMMAND"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#lexicalcommand",children:(0,d.jsx)(l.code,{children:"LexicalCommand"})}),"<",(0,d.jsx)(l.code,{children:"void"}),">"]}),"\n",(0,d.jsx)(l.p,{children:"Dispatched on redo (Shift+Cmd+Z on macOS, Shift+Ctrl+Z or Ctrl+Y elsewhere)."}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-125",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalCommands.ts#L84",children:"packages/lexical/src/LexicalCommands.ts:84"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"remove_text_command",children:"REMOVE_TEXT_COMMAND"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"REMOVE_TEXT_COMMAND"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#lexicalcommand",children:(0,d.jsx)(l.code,{children:"LexicalCommand"})}),"<",(0,d.jsx)(l.code,{children:"InputEvent"})," | ",(0,d.jsx)(l.code,{children:"null"}),">"]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-126",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalCommands.ts#L54",children:"packages/lexical/src/LexicalCommands.ts:54"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"selection_change_command",children:"SELECTION_CHANGE_COMMAND"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"SELECTION_CHANGE_COMMAND"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#lexicalcommand",children:(0,d.jsx)(l.code,{children:"LexicalCommand"})}),"<",(0,d.jsx)(l.code,{children:"void"}),">"]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-127",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalCommands.ts#L21",children:"packages/lexical/src/LexicalCommands.ts:21"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"selection_insert_clipboard_nodes_command",children:"SELECTION_INSERT_CLIPBOARD_NODES_COMMAND"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"SELECTION_INSERT_CLIPBOARD_NODES_COMMAND"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#lexicalcommand",children:(0,d.jsx)(l.code,{children:"LexicalCommand"})}),"<{ ",(0,d.jsx)(l.code,{children:"nodes"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,d.jsx)(l.code,{children:"LexicalNode"})}),"[] ; ",(0,d.jsx)(l.code,{children:"selection"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.BaseSelection",children:(0,d.jsx)(l.code,{children:"BaseSelection"})}),"  }>"]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-128",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalCommands.ts#L24",children:"packages/lexical/src/LexicalCommands.ts:24"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"select_all_command",children:"SELECT_ALL_COMMAND"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"SELECT_ALL_COMMAND"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#lexicalcommand",children:(0,d.jsx)(l.code,{children:"LexicalCommand"})}),"<",(0,d.jsx)(l.code,{children:"KeyboardEvent"}),">"]}),"\n",(0,d.jsx)(l.p,{children:"Dispatched on the select all keyboard shortcut\n(Cmd+A on macOS, Ctrl+A elsehwere)."}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-129",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalCommands.ts#L198",children:"packages/lexical/src/LexicalCommands.ts:198"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"skip_collab_tag",children:"SKIP_COLLAB_TAG"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"SKIP_COLLAB_TAG"}),": ",(0,d.jsx)(l.code,{children:'"skip-collab"'})]}),"\n",(0,d.jsx)(l.p,{children:"Indicates that the update should skip collaborative sync"}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-130",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalUpdateTags.ts#L42",children:"packages/lexical/src/LexicalUpdateTags.ts:42"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"skip_dom_selection_tag",children:"SKIP_DOM_SELECTION_TAG"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"SKIP_DOM_SELECTION_TAG"}),": ",(0,d.jsx)(l.code,{children:'"skip-dom-selection"'})]}),"\n",(0,d.jsx)(l.p,{children:"Indicates that the update should skip updating the DOM selection\nThis is useful when you want to make updates without changing the selection or focus"}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-131",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalUpdateTags.ts#L53",children:"packages/lexical/src/LexicalUpdateTags.ts:53"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"skip_scroll_into_view_tag",children:"SKIP_SCROLL_INTO_VIEW_TAG"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"SKIP_SCROLL_INTO_VIEW_TAG"}),": ",(0,d.jsx)(l.code,{children:'"skip-scroll-into-view"'})]}),"\n",(0,d.jsx)(l.p,{children:"Indicates that the update should skip scrolling the selection into view"}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-132",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalUpdateTags.ts#L47",children:"packages/lexical/src/LexicalUpdateTags.ts:47"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"text_type_to_format",children:"TEXT_TYPE_TO_FORMAT"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"TEXT_TYPE_TO_FORMAT"}),": ",(0,d.jsx)(l.code,{children:"Record"}),"<",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#textformattype",children:(0,d.jsx)(l.code,{children:"TextFormatType"})})," | ",(0,d.jsx)(l.code,{children:"string"}),", ",(0,d.jsx)(l.code,{children:"number"}),">"]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-133",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalConstants.ts#L106",children:"packages/lexical/src/LexicalConstants.ts:106"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"undo_command",children:"UNDO_COMMAND"}),"\n",(0,d.jsxs)(l.p,{children:["\u2022 ",(0,d.jsx)(l.code,{children:"Const"})," ",(0,d.jsx)(l.strong,{children:"UNDO_COMMAND"}),": ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#lexicalcommand",children:(0,d.jsx)(l.code,{children:"LexicalCommand"})}),"<",(0,d.jsx)(l.code,{children:"void"}),">"]}),"\n",(0,d.jsx)(l.p,{children:"Dispatched on undo (Cmd+Z on macOS, Ctrl+Z elsewhere)."}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-134",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalCommands.ts#L80",children:"packages/lexical/src/LexicalCommands.ts:80"})}),"\n",(0,d.jsx)(l.h2,{id:"functions",children:"Functions"}),"\n",(0,d.jsx)(l.h3,{id:"addupdatetag",children:"$addUpdateTag"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$addUpdateTag"}),"(",(0,d.jsx)(l.code,{children:"tag"}),"): ",(0,d.jsx)(l.code,{children:"void"})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-9",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"tag"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#updatetag",children:(0,d.jsx)(l.code,{children:"UpdateTag"})})})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-9",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.code,{children:"void"})}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-135",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalUtils.ts#L1394",children:"packages/lexical/src/LexicalUtils.ts:1394"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"applynodereplacement",children:"$applyNodeReplacement"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$applyNodeReplacement"}),"<",(0,d.jsx)(l.code,{children:"N"}),">(",(0,d.jsx)(l.code,{children:"node"}),"): ",(0,d.jsx)(l.code,{children:"N"})]}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-25",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"N"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,d.jsx)(l.code,{children:"LexicalNode"})})]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-10",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"node"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"N"})})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-10",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.code,{children:"N"})}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-136",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalUtils.ts#L1509",children:"packages/lexical/src/LexicalUtils.ts:1509"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"caretfrompoint",children:"$caretFromPoint"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$caretFromPoint"}),"<",(0,d.jsx)(l.code,{children:"D"}),">(",(0,d.jsx)(l.code,{children:"point"}),", ",(0,d.jsx)(l.code,{children:"direction"}),"): ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#pointcaret",children:(0,d.jsx)(l.code,{children:"PointCaret"})}),"<",(0,d.jsx)(l.code,{children:"D"}),">"]}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-26",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"D"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#caretdirection",children:(0,d.jsx)(l.code,{children:"CaretDirection"})})]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-11",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"point"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.code,{children:"Pick"}),"<",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#pointtype",children:(0,d.jsx)(l.code,{children:"PointType"})}),", ",(0,d.jsx)(l.code,{children:'"type"'})," | ",(0,d.jsx)(l.code,{children:'"key"'})," | ",(0,d.jsx)(l.code,{children:'"offset"'}),">"]})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"direction"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"D"})})]})]})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-11",children:"Returns"}),"\n",(0,d.jsxs)(l.p,{children:[(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#pointcaret",children:(0,d.jsx)(l.code,{children:"PointCaret"})}),"<",(0,d.jsx)(l.code,{children:"D"}),">"]}),"\n",(0,d.jsx)(l.p,{children:"a PointCaret for the point"}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-137",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaretUtils.ts#L61",children:"packages/lexical/src/caret/LexicalCaretUtils.ts:61"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"caretrangefromselection",children:"$caretRangeFromSelection"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$caretRangeFromSelection"}),"(",(0,d.jsx)(l.code,{children:"selection"}),"): ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.CaretRange",children:(0,d.jsx)(l.code,{children:"CaretRange"})})]}),"\n",(0,d.jsx)(l.p,{children:"Get a pair of carets for a RangeSelection."}),"\n",(0,d.jsx)(l.p,{children:"If the focus is before the anchor, then the direction will be\n'previous', otherwise the direction will be 'next'."}),"\n",(0,d.jsx)(l.h4,{id:"parameters-12",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"selection"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.RangeSelection",children:(0,d.jsx)(l.code,{children:"RangeSelection"})})})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-12",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.CaretRange",children:(0,d.jsx)(l.code,{children:"CaretRange"})})}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-138",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaretUtils.ts#L156",children:"packages/lexical/src/caret/LexicalCaretUtils.ts:156"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"clonewithproperties",children:"$cloneWithProperties"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$cloneWithProperties"}),"<",(0,d.jsx)(l.code,{children:"T"}),">(",(0,d.jsx)(l.code,{children:"latestNode"}),"): ",(0,d.jsx)(l.code,{children:"T"})]}),"\n",(0,d.jsxs)(l.p,{children:["Returns a clone of a node using ",(0,d.jsx)(l.code,{children:"node.constructor.clone()"})," followed by\n",(0,d.jsx)(l.code,{children:"clone.afterCloneFrom(node)"}),". The resulting clone must have the same key,\nparent/next/prev pointers, and other properties that are not set by\n",(0,d.jsx)(l.code,{children:"node.constructor.clone"})," (format, style, etc.). This is primarily used by\n",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode#getwritable",children:"LexicalNode.getWritable"})," to create a writable version of an\nexisting node. The clone is the same logical node as the original node,\ndo not try and use this function to duplicate or copy an existing node."]}),"\n",(0,d.jsx)(l.p,{children:"Does not mutate the EditorState."}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-27",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"T"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,d.jsx)(l.code,{children:"LexicalNode"})})]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-13",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"latestNode"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"T"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:"The node to be cloned."})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-13",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.code,{children:"T"})}),"\n",(0,d.jsx)(l.p,{children:"The clone of the node."}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-139",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalUtils.ts#L1947",children:"packages/lexical/src/LexicalUtils.ts:1947"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"comparepointcaretnext",children:"$comparePointCaretNext"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$comparePointCaretNext"}),"(",(0,d.jsx)(l.code,{children:"a"}),", ",(0,d.jsx)(l.code,{children:"b"}),"): ",(0,d.jsx)(l.code,{children:"-1"})," | ",(0,d.jsx)(l.code,{children:"0"})," | ",(0,d.jsx)(l.code,{children:"1"})]}),"\n",(0,d.jsxs)(l.p,{children:["A total ordering for ",(0,d.jsx)(l.code,{children:"PointCaret<'next'>"}),", based on\nthe same order that a ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.CaretRange",children:"CaretRange"})," would iterate\nthem."]}),"\n",(0,d.jsx)(l.p,{children:"For a given origin node:"}),"\n",(0,d.jsxs)(l.ul,{children:["\n",(0,d.jsx)(l.li,{children:"ChildCaret comes before SiblingCaret"}),"\n",(0,d.jsx)(l.li,{children:"TextPointCaret comes before SiblingCaret"}),"\n"]}),"\n",(0,d.jsx)(l.p,{children:"An exception is thrown when a and b do not have any\ncommon ancestor."}),"\n",(0,d.jsx)(l.p,{children:"This ordering is a sort of mix of pre-order and post-order\nbecause each ElementNode will show up as a ChildCaret\non 'enter' (pre-order) and a SiblingCaret on 'leave' (post-order)."}),"\n",(0,d.jsx)(l.h4,{id:"parameters-14",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"a"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#pointcaret",children:(0,d.jsx)(l.code,{children:"PointCaret"})}),"<",(0,d.jsx)(l.code,{children:'"next"'}),">"]})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"b"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#pointcaret",children:(0,d.jsx)(l.code,{children:"PointCaret"})}),"<",(0,d.jsx)(l.code,{children:'"next"'}),">"]})]})]})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-14",children:"Returns"}),"\n",(0,d.jsxs)(l.p,{children:[(0,d.jsx)(l.code,{children:"-1"})," | ",(0,d.jsx)(l.code,{children:"0"})," | ",(0,d.jsx)(l.code,{children:"1"})]}),"\n",(0,d.jsx)(l.p,{children:"-1 if a comes before b, 0 if a and b are the same, or 1 if a comes after b"}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-140",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L1227",children:"packages/lexical/src/caret/LexicalCaret.ts:1227"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"copynode",children:"$copyNode"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$copyNode"}),"<",(0,d.jsx)(l.code,{children:"T"}),">(",(0,d.jsx)(l.code,{children:"node"}),"): ",(0,d.jsx)(l.code,{children:"T"})]}),"\n",(0,d.jsxs)(l.p,{children:["Returns a shallow clone of node with a new key. All properties of the node\nwill be copied to the new node (by ",(0,d.jsx)(l.code,{children:"clone"})," and then ",(0,d.jsx)(l.code,{children:"afterCloneFrom"}),"),\nexcept those related to parent/sibling/child\nrelationships in the ",(0,d.jsx)(l.code,{children:"EditorState"}),". This means that the copy must be\nseparately added to the document, and it will not have any children."]}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-28",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"T"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,d.jsx)(l.code,{children:"LexicalNode"})})]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-15",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"node"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"T"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:"The node to be copied."})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-15",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.code,{children:"T"})}),"\n",(0,d.jsx)(l.p,{children:"The copy of the node."}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-141",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalUtils.ts#L1502",children:"packages/lexical/src/LexicalUtils.ts:1502"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"create",children:"$create"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$create"}),"<",(0,d.jsx)(l.code,{children:"T"}),">(",(0,d.jsx)(l.code,{children:"klass"}),"): ",(0,d.jsx)(l.code,{children:"T"})]}),"\n",(0,d.jsx)(l.p,{children:"Create an node from its class."}),"\n",(0,d.jsxs)(l.p,{children:["Note that this will directly construct the final ",(0,d.jsx)(l.code,{children:"withKlass"})," node type,\nand will ignore the deprecated ",(0,d.jsx)(l.code,{children:"with"})," functions. This allows ",(0,d.jsx)(l.code,{children:"$create"})," to\nskip any intermediate steps where the replaced node would be created and\nthen immediately discarded (once per configured replacement of that node)."]}),"\n",(0,d.jsx)(l.p,{children:"This does not support any arguments to the constructor.\nSetters can be used to initialize your node, and they can\nbe chained. You can of course write your own mutliple-argument functions\nto wrap that."}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-29",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"T"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,d.jsx)(l.code,{children:"LexicalNode"})})]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-16",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"klass"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#klass",children:(0,d.jsx)(l.code,{children:"Klass"})}),"<",(0,d.jsx)(l.code,{children:"T"}),">"]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-16",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.code,{children:"T"})}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.strong,{children:(0,d.jsx)(l.code,{children:"Example"})})}),"\n",(0,d.jsx)(l.pre,{children:(0,d.jsx)(l.code,{className:"language-ts",children:"function $createTokenText(text: string): TextNode {\n  return $create(TextNode).setTextContent(text).setMode('token');\n}\n"})}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-142",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalUtils.ts#L2105",children:"packages/lexical/src/LexicalUtils.ts:2105"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"createlinebreaknode",children:"$createLineBreakNode"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$createLineBreakNode"}),"(): ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LineBreakNode",children:(0,d.jsx)(l.code,{children:"LineBreakNode"})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-17",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LineBreakNode",children:(0,d.jsx)(l.code,{children:"LineBreakNode"})})}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-143",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/nodes/LexicalLineBreakNode.ts#L82",children:"packages/lexical/src/nodes/LexicalLineBreakNode.ts:82"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"createnodeselection",children:"$createNodeSelection"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$createNodeSelection"}),"(): ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.NodeSelection",children:(0,d.jsx)(l.code,{children:"NodeSelection"})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-18",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.NodeSelection",children:(0,d.jsx)(l.code,{children:"NodeSelection"})})}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-144",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalSelection.ts#L2549",children:"packages/lexical/src/LexicalSelection.ts:2549"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"createparagraphnode",children:"$createParagraphNode"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$createParagraphNode"}),"(): ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ParagraphNode",children:(0,d.jsx)(l.code,{children:"ParagraphNode"})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-19",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ParagraphNode",children:(0,d.jsx)(l.code,{children:"ParagraphNode"})})}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-145",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/nodes/LexicalParagraphNode.ts#L167",children:"packages/lexical/src/nodes/LexicalParagraphNode.ts:167"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"createpoint",children:"$createPoint"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$createPoint"}),"(",(0,d.jsx)(l.code,{children:"key"}),", ",(0,d.jsx)(l.code,{children:"offset"}),", ",(0,d.jsx)(l.code,{children:"type"}),"): ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#pointtype",children:(0,d.jsx)(l.code,{children:"PointType"})})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-17",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"key"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"string"})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"offset"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"number"})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"type"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.code,{children:'"text"'})," | ",(0,d.jsx)(l.code,{children:'"element"'})]})]})]})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-20",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#pointtype",children:(0,d.jsx)(l.code,{children:"PointType"})})}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-146",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalSelection.ts#L217",children:"packages/lexical/src/LexicalSelection.ts:217"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"createrangeselection",children:"$createRangeSelection"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$createRangeSelection"}),"(): ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.RangeSelection",children:(0,d.jsx)(l.code,{children:"RangeSelection"})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-21",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.RangeSelection",children:(0,d.jsx)(l.code,{children:"RangeSelection"})})}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-147",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalSelection.ts#L2543",children:"packages/lexical/src/LexicalSelection.ts:2543"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"createrangeselectionfromdom",children:"$createRangeSelectionFromDom"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$createRangeSelectionFromDom"}),"(",(0,d.jsx)(l.code,{children:"domSelection"}),", ",(0,d.jsx)(l.code,{children:"editor"}),"): ",(0,d.jsx)(l.code,{children:"null"})," | ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.RangeSelection",children:(0,d.jsx)(l.code,{children:"RangeSelection"})})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-18",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"domSelection"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.code,{children:"null"})," | ",(0,d.jsx)(l.code,{children:"Selection"})]})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"editor"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalEditor",children:(0,d.jsx)(l.code,{children:"LexicalEditor"})})})]})]})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-22",children:"Returns"}),"\n",(0,d.jsxs)(l.p,{children:[(0,d.jsx)(l.code,{children:"null"})," | ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.RangeSelection",children:(0,d.jsx)(l.code,{children:"RangeSelection"})})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-148",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalSelection.ts#L2572",children:"packages/lexical/src/LexicalSelection.ts:2572"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"createtabnode",children:"$createTabNode"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$createTabNode"}),"(): ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.TabNode",children:(0,d.jsx)(l.code,{children:"TabNode"})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-23",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.TabNode",children:(0,d.jsx)(l.code,{children:"TabNode"})})}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-149",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/nodes/LexicalTabNode.ts#L101",children:"packages/lexical/src/nodes/LexicalTabNode.ts:101"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"createtextnode",children:"$createTextNode"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$createTextNode"}),"(",(0,d.jsx)(l.code,{children:"text?"}),"): ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.TextNode",children:(0,d.jsx)(l.code,{children:"TextNode"})})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-19",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Default value"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"text"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"string"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"''"})})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-24",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.TextNode",children:(0,d.jsx)(l.code,{children:"TextNode"})})}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-150",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/nodes/LexicalTextNode.ts#L1374",children:"packages/lexical/src/nodes/LexicalTextNode.ts:1374"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"extendcarettorange",children:"$extendCaretToRange"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$extendCaretToRange"}),"<",(0,d.jsx)(l.code,{children:"D"}),">(",(0,d.jsx)(l.code,{children:"anchor"}),"): ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.CaretRange",children:(0,d.jsx)(l.code,{children:"CaretRange"})}),"<",(0,d.jsx)(l.code,{children:"D"}),">"]}),"\n",(0,d.jsx)(l.p,{children:"Construct a CaretRange that starts at anchor and goes to the end of the\ndocument in the anchor caret's direction."}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-30",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"D"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#caretdirection",children:(0,d.jsx)(l.code,{children:"CaretDirection"})})]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-20",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"anchor"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#pointcaret",children:(0,d.jsx)(l.code,{children:"PointCaret"})}),"<",(0,d.jsx)(l.code,{children:"D"}),">"]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-25",children:"Returns"}),"\n",(0,d.jsxs)(l.p,{children:[(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.CaretRange",children:(0,d.jsx)(l.code,{children:"CaretRange"})}),"<",(0,d.jsx)(l.code,{children:"D"}),">"]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-151",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L1125",children:"packages/lexical/src/caret/LexicalCaret.ts:1125"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"getadjacentchildcaret",children:"$getAdjacentChildCaret"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$getAdjacentChildCaret"}),"<",(0,d.jsx)(l.code,{children:"D"}),">(",(0,d.jsx)(l.code,{children:"caret"}),"): ",(0,d.jsx)(l.code,{children:"null"})," | ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#nodecaret",children:(0,d.jsx)(l.code,{children:"NodeCaret"})}),"<",(0,d.jsx)(l.code,{children:"D"}),">"]}),"\n",(0,d.jsx)(l.p,{children:"Gets the adjacent caret, if not-null and if the origin of the adjacent caret is an ElementNode, then return\nthe ChildCaret. This can be used along with the getParentAdjacentCaret method to perform a full DFS\nstyle traversal of the tree."}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-31",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"D"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#caretdirection",children:(0,d.jsx)(l.code,{children:"CaretDirection"})})]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-21",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"caret"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.code,{children:"null"})," | ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#nodecaret",children:(0,d.jsx)(l.code,{children:"NodeCaret"})}),"<",(0,d.jsx)(l.code,{children:"D"}),">"]}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:"The caret to start at"})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-26",children:"Returns"}),"\n",(0,d.jsxs)(l.p,{children:[(0,d.jsx)(l.code,{children:"null"})," | ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#nodecaret",children:(0,d.jsx)(l.code,{children:"NodeCaret"})}),"<",(0,d.jsx)(l.code,{children:"D"}),">"]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-152",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L975",children:"packages/lexical/src/caret/LexicalCaret.ts:975"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"getadjacentnode",children:"$getAdjacentNode"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$getAdjacentNode"}),"(",(0,d.jsx)(l.code,{children:"focus"}),", ",(0,d.jsx)(l.code,{children:"isBackward"}),"): ",(0,d.jsx)(l.code,{children:"null"})," | ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,d.jsx)(l.code,{children:"LexicalNode"})})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-22",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"focus"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#pointtype",children:(0,d.jsx)(l.code,{children:"PointType"})})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"isBackward"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"boolean"})})]})]})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-27",children:"Returns"}),"\n",(0,d.jsxs)(l.p,{children:[(0,d.jsx)(l.code,{children:"null"})," | ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,d.jsx)(l.code,{children:"LexicalNode"})})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-153",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalUtils.ts#L1248",children:"packages/lexical/src/LexicalUtils.ts:1248"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"getadjacentsiblingorparentsiblingcaret",children:"$getAdjacentSiblingOrParentSiblingCaret"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$getAdjacentSiblingOrParentSiblingCaret"}),"<",(0,d.jsx)(l.code,{children:"D"}),">(",(0,d.jsx)(l.code,{children:"startCaret"}),", ",(0,d.jsx)(l.code,{children:"rootMode?"}),"): ",(0,d.jsx)(l.code,{children:"null"})," | [",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#nodecaret",children:(0,d.jsx)(l.code,{children:"NodeCaret"})}),"<",(0,d.jsx)(l.code,{children:"D"}),">, ",(0,d.jsx)(l.code,{children:"number"}),"]"]}),"\n",(0,d.jsxs)(l.p,{children:["Returns the Node sibling when this exists, otherwise the closest parent sibling. For example\nR -> P ->"," ",(0,d.jsx)(l.a,{href:"https://internalfb.com/T1",children:"T1"}),","," ",(0,d.jsx)(l.a,{href:"https://internalfb.com/T2",children:"T2"}),"\n->"," ",(0,d.jsx)(l.a,{href:"https://internalfb.com/P2",children:"P2"}),"\nreturns"," ",(0,d.jsx)(l.a,{href:"https://internalfb.com/T2",children:"T2"})," ","for node"," ",(0,d.jsx)(l.a,{href:"https://internalfb.com/T1",children:"T1"}),","," ",(0,d.jsx)(l.a,{href:"https://internalfb.com/P2",children:"P2"})," ","for node"," ",(0,d.jsx)(l.a,{href:"https://internalfb.com/T2",children:"T2"}),","," and null for node"," ",(0,d.jsx)(l.a,{href:"https://internalfb.com/P2",children:"P2"}),"."]}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-32",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"D"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#caretdirection",children:(0,d.jsx)(l.code,{children:"CaretDirection"})})]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-23",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Default value"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"startCaret"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#nodecaret",children:(0,d.jsx)(l.code,{children:"NodeCaret"})}),"<",(0,d.jsx)(l.code,{children:"D"}),">"]}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"undefined"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:"The initial caret"})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"rootMode"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#rootmode",children:(0,d.jsx)(l.code,{children:"RootMode"})})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"'root'"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:"The root mode, 'root' ('default') or 'shadowRoot'"})]})]})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-28",children:"Returns"}),"\n",(0,d.jsxs)(l.p,{children:[(0,d.jsx)(l.code,{children:"null"})," | [",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#nodecaret",children:(0,d.jsx)(l.code,{children:"NodeCaret"})}),"<",(0,d.jsx)(l.code,{children:"D"}),">, ",(0,d.jsx)(l.code,{children:"number"}),"]"]}),"\n",(0,d.jsx)(l.p,{children:"An array (tuple) containing the found caret and the depth difference, or null, if this node doesn't exist."}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-154",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaretUtils.ts#L596",children:"packages/lexical/src/caret/LexicalCaretUtils.ts:596"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"getcaretindirection",children:"$getCaretInDirection"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$getCaretInDirection"}),"<",(0,d.jsx)(l.code,{children:"Caret"}),", ",(0,d.jsx)(l.code,{children:"D"}),">(",(0,d.jsx)(l.code,{children:"caret"}),", ",(0,d.jsx)(l.code,{children:"direction"}),"): ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#nodecaret",children:(0,d.jsx)(l.code,{children:"NodeCaret"})}),"<",(0,d.jsx)(l.code,{children:"D"}),"> | ",(0,d.jsx)(l.code,{children:"Caret"})," extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.TextPointCaret",children:(0,d.jsx)(l.code,{children:"TextPointCaret"})}),"<",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.TextNode",children:(0,d.jsx)(l.code,{children:"TextNode"})}),", ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#caretdirection",children:(0,d.jsx)(l.code,{children:"CaretDirection"})}),"> ? ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.TextPointCaret",children:(0,d.jsx)(l.code,{children:"TextPointCaret"})}),"<",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.TextNode",children:(0,d.jsx)(l.code,{children:"TextNode"})}),", ",(0,d.jsx)(l.code,{children:"D"}),"> : ",(0,d.jsx)(l.code,{children:"never"})]}),"\n",(0,d.jsx)(l.p,{children:"Return the caret if it's in the given direction, otherwise return\ncaret.getFlipped()."}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-33",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"Caret"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#pointcaret",children:(0,d.jsx)(l.code,{children:"PointCaret"})}),"<",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#caretdirection",children:(0,d.jsx)(l.code,{children:"CaretDirection"})}),">"]})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"D"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#caretdirection",children:(0,d.jsx)(l.code,{children:"CaretDirection"})})]})]})]})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-24",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"caret"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"Caret"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:"Any PointCaret"})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"direction"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"D"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:"The desired direction"})]})]})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-29",children:"Returns"}),"\n",(0,d.jsxs)(l.p,{children:[(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#nodecaret",children:(0,d.jsx)(l.code,{children:"NodeCaret"})}),"<",(0,d.jsx)(l.code,{children:"D"}),"> | ",(0,d.jsx)(l.code,{children:"Caret"})," extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.TextPointCaret",children:(0,d.jsx)(l.code,{children:"TextPointCaret"})}),"<",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.TextNode",children:(0,d.jsx)(l.code,{children:"TextNode"})}),", ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#caretdirection",children:(0,d.jsx)(l.code,{children:"CaretDirection"})}),"> ? ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.TextPointCaret",children:(0,d.jsx)(l.code,{children:"TextPointCaret"})}),"<",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.TextNode",children:(0,d.jsx)(l.code,{children:"TextNode"})}),", ",(0,d.jsx)(l.code,{children:"D"}),"> : ",(0,d.jsx)(l.code,{children:"never"})]}),"\n",(0,d.jsx)(l.p,{children:"A PointCaret in direction"}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-155",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaretUtils.ts#L519",children:"packages/lexical/src/caret/LexicalCaretUtils.ts:519"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"getcaretrange",children:"$getCaretRange"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$getCaretRange"}),"<",(0,d.jsx)(l.code,{children:"D"}),">(",(0,d.jsx)(l.code,{children:"anchor"}),", ",(0,d.jsx)(l.code,{children:"focus"}),"): ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.CaretRange",children:(0,d.jsx)(l.code,{children:"CaretRange"})}),"<",(0,d.jsx)(l.code,{children:"D"}),">"]}),"\n",(0,d.jsx)(l.p,{children:"Construct a CaretRange from anchor and focus carets pointing in the\nsame direction. In order to get the expected behavior,\nthe anchor must point towards the focus or be the same point."}),"\n",(0,d.jsx)(l.p,{children:"In the 'next' direction the anchor should be at or before the\nfocus in the document. In the 'previous' direction the anchor\nshould be at or after the focus in the document\n(similar to a backwards RangeSelection)."}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-34",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"D"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#caretdirection",children:(0,d.jsx)(l.code,{children:"CaretDirection"})})]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-25",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"anchor"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#pointcaret",children:(0,d.jsx)(l.code,{children:"PointCaret"})}),"<",(0,d.jsx)(l.code,{children:"D"}),">"]})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"focus"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#pointcaret",children:(0,d.jsx)(l.code,{children:"PointCaret"})}),"<",(0,d.jsx)(l.code,{children:"D"}),">"]})]})]})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-30",children:"Returns"}),"\n",(0,d.jsxs)(l.p,{children:[(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.CaretRange",children:(0,d.jsx)(l.code,{children:"CaretRange"})}),"<",(0,d.jsx)(l.code,{children:"D"}),">"]}),"\n",(0,d.jsx)(l.p,{children:"a CaretRange"}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-156",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L1154",children:"packages/lexical/src/caret/LexicalCaret.ts:1154"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"getcaretrangeindirection",children:"$getCaretRangeInDirection"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$getCaretRangeInDirection"}),"<",(0,d.jsx)(l.code,{children:"D"}),">(",(0,d.jsx)(l.code,{children:"range"}),", ",(0,d.jsx)(l.code,{children:"direction"}),"): ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.CaretRange",children:(0,d.jsx)(l.code,{children:"CaretRange"})}),"<",(0,d.jsx)(l.code,{children:"D"}),">"]}),"\n",(0,d.jsx)(l.p,{children:"Return the range if it's in the given direction, otherwise\nconstruct a new range using a flipped focus as the anchor\nand a flipped anchor as the focus. This transformation\npreserves the section of the document that it's working\nwith, but reverses the order of iteration."}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-35",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"D"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#caretdirection",children:(0,d.jsx)(l.code,{children:"CaretDirection"})})]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-26",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"range"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.CaretRange",children:(0,d.jsx)(l.code,{children:"CaretRange"})}),"<",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#caretdirection",children:(0,d.jsx)(l.code,{children:"CaretDirection"})}),">"]}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:"Any CaretRange"})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"direction"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"D"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:"The desired direction"})]})]})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-31",children:"Returns"}),"\n",(0,d.jsxs)(l.p,{children:[(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.CaretRange",children:(0,d.jsx)(l.code,{children:"CaretRange"})}),"<",(0,d.jsx)(l.code,{children:"D"}),">"]}),"\n",(0,d.jsx)(l.p,{children:"A CaretRange in direction"}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-157",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaretUtils.ts#L548",children:"packages/lexical/src/caret/LexicalCaretUtils.ts:548"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"getcharacteroffsets",children:"$getCharacterOffsets"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$getCharacterOffsets"}),"(",(0,d.jsx)(l.code,{children:"selection"}),"): [",(0,d.jsx)(l.code,{children:"number"}),", ",(0,d.jsx)(l.code,{children:"number"}),"]"]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-27",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"selection"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.BaseSelection",children:(0,d.jsx)(l.code,{children:"BaseSelection"})})})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-32",children:"Returns"}),"\n",(0,d.jsxs)(l.p,{children:["[",(0,d.jsx)(l.code,{children:"number"}),", ",(0,d.jsx)(l.code,{children:"number"}),"]"]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-158",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalSelection.ts#L1952",children:"packages/lexical/src/LexicalSelection.ts:1952"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"getchildcaret",children:"$getChildCaret"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$getChildCaret"}),"<",(0,d.jsx)(l.code,{children:"T"}),", ",(0,d.jsx)(l.code,{children:"D"}),">(",(0,d.jsx)(l.code,{children:"origin"}),", ",(0,d.jsx)(l.code,{children:"direction"}),"): ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.ChildCaret",children:(0,d.jsx)(l.code,{children:"ChildCaret"})}),"<",(0,d.jsx)(l.code,{children:"T"}),", ",(0,d.jsx)(l.code,{children:"D"}),">"]}),"\n",(0,d.jsx)(l.p,{children:"Get a caret that points at the first or last child of the given origin node,\nwhich must be an ElementNode."}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-36",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"T"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:(0,d.jsx)(l.code,{children:"ElementNode"})})]})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"D"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#caretdirection",children:(0,d.jsx)(l.code,{children:"CaretDirection"})})]})]})]})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-28",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"origin"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"T"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:"The origin ElementNode"})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"direction"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"D"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:"'next' for first child or 'previous' for last child"})]})]})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-33",children:"Returns"}),"\n",(0,d.jsxs)(l.p,{children:[(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.ChildCaret",children:(0,d.jsx)(l.code,{children:"ChildCaret"})}),"<",(0,d.jsx)(l.code,{children:"T"}),", ",(0,d.jsx)(l.code,{children:"D"}),">"]}),"\n",(0,d.jsx)(l.p,{children:"null if origin is null or not an ElementNode, otherwise a ChildCaret for this origin and direction"}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-159",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L948",children:"packages/lexical/src/caret/LexicalCaret.ts:948"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"getchildcaretatindex",children:"$getChildCaretAtIndex"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$getChildCaretAtIndex"}),"<",(0,d.jsx)(l.code,{children:"D"}),">(",(0,d.jsx)(l.code,{children:"parent"}),", ",(0,d.jsx)(l.code,{children:"index"}),", ",(0,d.jsx)(l.code,{children:"direction"}),"): ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#nodecaret",children:(0,d.jsx)(l.code,{children:"NodeCaret"})}),"<",(0,d.jsx)(l.code,{children:"D"}),">"]}),"\n",(0,d.jsx)(l.p,{children:"Get a caret pointing at the child at the given index, or the last\ncaret in that node if out of bounds."}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-37",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"D"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#caretdirection",children:(0,d.jsx)(l.code,{children:"CaretDirection"})})]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-29",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"parent"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:(0,d.jsx)(l.code,{children:"ElementNode"})})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:"An ElementNode"})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"index"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"number"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:"The index of the origin for the caret"})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"direction"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"D"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:"-"})]})]})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-34",children:"Returns"}),"\n",(0,d.jsxs)(l.p,{children:[(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#nodecaret",children:(0,d.jsx)(l.code,{children:"NodeCaret"})}),"<",(0,d.jsx)(l.code,{children:"D"}),">"]}),"\n",(0,d.jsx)(l.p,{children:"A caret pointing towards the node at that index"}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-160",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaretUtils.ts#L570",children:"packages/lexical/src/caret/LexicalCaretUtils.ts:570"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"getchildcaretorself",children:"$getChildCaretOrSelf"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$getChildCaretOrSelf"}),"<",(0,d.jsx)(l.code,{children:"Caret"}),">(",(0,d.jsx)(l.code,{children:"caret"}),"): ",(0,d.jsx)(l.code,{children:"Caret"})," | ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.ChildCaret",children:(0,d.jsx)(l.code,{children:"ChildCaret"})}),"<",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:(0,d.jsx)(l.code,{children:"ElementNode"})}),", ",(0,d.jsx)(l.code,{children:"NonNullable"}),"<",(0,d.jsx)(l.code,{children:"Caret"}),">[",(0,d.jsx)(l.code,{children:'"direction"'}),"]>"]}),"\n",(0,d.jsx)(l.p,{children:"Gets the ChildCaret if one is possible at this caret origin, otherwise return the caret"}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-38",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"Caret"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.code,{children:"null"})," | ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#pointcaret",children:(0,d.jsx)(l.code,{children:"PointCaret"})}),"<",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#caretdirection",children:(0,d.jsx)(l.code,{children:"CaretDirection"})}),">"]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-30",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"caret"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"Caret"})})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-35",children:"Returns"}),"\n",(0,d.jsxs)(l.p,{children:[(0,d.jsx)(l.code,{children:"Caret"})," | ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.ChildCaret",children:(0,d.jsx)(l.code,{children:"ChildCaret"})}),"<",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:(0,d.jsx)(l.code,{children:"ElementNode"})}),", ",(0,d.jsx)(l.code,{children:"NonNullable"}),"<",(0,d.jsx)(l.code,{children:"Caret"}),">[",(0,d.jsx)(l.code,{children:'"direction"'}),"]>"]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-161",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L962",children:"packages/lexical/src/caret/LexicalCaret.ts:962"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"getcollapsedcaretrange",children:"$getCollapsedCaretRange"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$getCollapsedCaretRange"}),"<",(0,d.jsx)(l.code,{children:"D"}),">(",(0,d.jsx)(l.code,{children:"anchor"}),"): ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.CaretRange",children:(0,d.jsx)(l.code,{children:"CaretRange"})}),"<",(0,d.jsx)(l.code,{children:"D"}),">"]}),"\n",(0,d.jsx)(l.p,{children:"Construct a collapsed CaretRange that starts and ends at anchor."}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-39",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"D"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#caretdirection",children:(0,d.jsx)(l.code,{children:"CaretDirection"})})]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-31",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"anchor"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#pointcaret",children:(0,d.jsx)(l.code,{children:"PointCaret"})}),"<",(0,d.jsx)(l.code,{children:"D"}),">"]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-36",children:"Returns"}),"\n",(0,d.jsxs)(l.p,{children:[(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.CaretRange",children:(0,d.jsx)(l.code,{children:"CaretRange"})}),"<",(0,d.jsx)(l.code,{children:"D"}),">"]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-162",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L1134",children:"packages/lexical/src/caret/LexicalCaret.ts:1134"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"getcommonancestor",children:"$getCommonAncestor"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$getCommonAncestor"}),"<",(0,d.jsx)(l.code,{children:"A"}),", ",(0,d.jsx)(l.code,{children:"B"}),">(",(0,d.jsx)(l.code,{children:"a"}),", ",(0,d.jsx)(l.code,{children:"b"}),"): ",(0,d.jsx)(l.code,{children:"null"})," | ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#commonancestorresult",children:(0,d.jsx)(l.code,{children:"CommonAncestorResult"})}),"<",(0,d.jsx)(l.code,{children:"A"}),", ",(0,d.jsx)(l.code,{children:"B"}),">"]}),"\n",(0,d.jsx)(l.p,{children:"Find a common ancestor of a and b and return a detailed result object,\nor null if there is no common ancestor between the two nodes."}),"\n",(0,d.jsx)(l.p,{children:"The result object will have a commonAncestor property, and the other\nproperties can be used to quickly compare these positions in the tree."}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-40",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"A"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,d.jsx)(l.code,{children:"LexicalNode"})})]})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"B"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,d.jsx)(l.code,{children:"LexicalNode"})})]})]})]})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-32",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"a"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"A"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:"A LexicalNode"})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"b"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"B"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:"A LexicalNode"})]})]})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-37",children:"Returns"}),"\n",(0,d.jsxs)(l.p,{children:[(0,d.jsx)(l.code,{children:"null"})," | ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#commonancestorresult",children:(0,d.jsx)(l.code,{children:"CommonAncestorResult"})}),"<",(0,d.jsx)(l.code,{children:"A"}),", ",(0,d.jsx)(l.code,{children:"B"}),">"]}),"\n",(0,d.jsx)(l.p,{children:"A comparison result between the two nodes or null if they have no common ancestor"}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-163",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L1365",children:"packages/lexical/src/caret/LexicalCaret.ts:1365"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"getcommonancestorresultbranchorder",children:"$getCommonAncestorResultBranchOrder"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$getCommonAncestorResultBranchOrder"}),"<",(0,d.jsx)(l.code,{children:"A"}),", ",(0,d.jsx)(l.code,{children:"B"}),">(",(0,d.jsx)(l.code,{children:"compare"}),"): ",(0,d.jsx)(l.code,{children:"-1"})," | ",(0,d.jsx)(l.code,{children:"1"})]}),"\n",(0,d.jsx)(l.p,{children:"Return the ordering of siblings in a CommonAncestorResultBranch"}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-41",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"A"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,d.jsx)(l.code,{children:"LexicalNode"})})]})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"B"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,d.jsx)(l.code,{children:"LexicalNode"})})]})]})]})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-33",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"compare"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.CommonAncestorResultBranch",children:(0,d.jsx)(l.code,{children:"CommonAncestorResultBranch"})}),"<",(0,d.jsx)(l.code,{children:"A"}),", ",(0,d.jsx)(l.code,{children:"B"}),">"]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-38",children:"Returns"}),"\n",(0,d.jsxs)(l.p,{children:[(0,d.jsx)(l.code,{children:"-1"})," | ",(0,d.jsx)(l.code,{children:"1"})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-164",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L1270",children:"packages/lexical/src/caret/LexicalCaret.ts:1270"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"geteditor",children:"$getEditor"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$getEditor"}),"(): ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalEditor",children:(0,d.jsx)(l.code,{children:"LexicalEditor"})})]}),"\n",(0,d.jsx)(l.p,{children:"Utility function for accessing current active editor instance."}),"\n",(0,d.jsx)(l.h4,{id:"returns-39",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalEditor",children:(0,d.jsx)(l.code,{children:"LexicalEditor"})})}),"\n",(0,d.jsx)(l.p,{children:"Current active editor"}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-165",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalUtils.ts#L1884",children:"packages/lexical/src/LexicalUtils.ts:1884"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"getnearestnodefromdomnode",children:"$getNearestNodeFromDOMNode"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$getNearestNodeFromDOMNode"}),"(",(0,d.jsx)(l.code,{children:"startingDOM"}),", ",(0,d.jsx)(l.code,{children:"editorState?"}),"): ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,d.jsx)(l.code,{children:"LexicalNode"})})," | ",(0,d.jsx)(l.code,{children:"null"})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-34",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"startingDOM"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"Node"})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"editorState?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.EditorState",children:(0,d.jsx)(l.code,{children:"EditorState"})})})]})]})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-40",children:"Returns"}),"\n",(0,d.jsxs)(l.p,{children:[(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,d.jsx)(l.code,{children:"LexicalNode"})})," | ",(0,d.jsx)(l.code,{children:"null"})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-166",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalUtils.ts#L546",children:"packages/lexical/src/LexicalUtils.ts:546"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"getnearestrootorshadowroot",children:"$getNearestRootOrShadowRoot"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$getNearestRootOrShadowRoot"}),"(",(0,d.jsx)(l.code,{children:"node"}),"): ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.RootNode",children:(0,d.jsx)(l.code,{children:"RootNode"})})," | ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:(0,d.jsx)(l.code,{children:"ElementNode"})})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-35",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"node"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,d.jsx)(l.code,{children:"LexicalNode"})})})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-41",children:"Returns"}),"\n",(0,d.jsxs)(l.p,{children:[(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.RootNode",children:(0,d.jsx)(l.code,{children:"RootNode"})})," | ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:(0,d.jsx)(l.code,{children:"ElementNode"})})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-167",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalUtils.ts#L1466",children:"packages/lexical/src/LexicalUtils.ts:1466"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"getnodebykey",children:"$getNodeByKey"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$getNodeByKey"}),"<",(0,d.jsx)(l.code,{children:"T"}),">(",(0,d.jsx)(l.code,{children:"key"}),", ",(0,d.jsx)(l.code,{children:"_editorState?"}),"): ",(0,d.jsx)(l.code,{children:"T"})," | ",(0,d.jsx)(l.code,{children:"null"})]}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-42",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"T"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,d.jsx)(l.code,{children:"LexicalNode"})})]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-36",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"key"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"string"})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"_editorState?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.EditorState",children:(0,d.jsx)(l.code,{children:"EditorState"})})})]})]})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-42",children:"Returns"}),"\n",(0,d.jsxs)(l.p,{children:[(0,d.jsx)(l.code,{children:"T"})," | ",(0,d.jsx)(l.code,{children:"null"})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-168",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalUtils.ts#L505",children:"packages/lexical/src/LexicalUtils.ts:505"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"getnodebykeyorthrow",children:"$getNodeByKeyOrThrow"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$getNodeByKeyOrThrow"}),"<",(0,d.jsx)(l.code,{children:"N"}),">(",(0,d.jsx)(l.code,{children:"key"}),"): ",(0,d.jsx)(l.code,{children:"N"})]}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-43",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"N"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,d.jsx)(l.code,{children:"LexicalNode"})})]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-37",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"key"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"string"})})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-43",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.code,{children:"N"})}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-169",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalUtils.ts#L1575",children:"packages/lexical/src/LexicalUtils.ts:1575"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"getpreviousselection",children:"$getPreviousSelection"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$getPreviousSelection"}),"(): ",(0,d.jsx)(l.code,{children:"null"})," | ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.BaseSelection",children:(0,d.jsx)(l.code,{children:"BaseSelection"})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-44",children:"Returns"}),"\n",(0,d.jsxs)(l.p,{children:[(0,d.jsx)(l.code,{children:"null"})," | ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.BaseSelection",children:(0,d.jsx)(l.code,{children:"BaseSelection"})})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-170",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalSelection.ts#L2709",children:"packages/lexical/src/LexicalSelection.ts:2709"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"getroot",children:"$getRoot"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$getRoot"}),"(): ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.RootNode",children:(0,d.jsx)(l.code,{children:"RootNode"})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-45",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.RootNode",children:(0,d.jsx)(l.code,{children:"RootNode"})})}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-171",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalUtils.ts#L614",children:"packages/lexical/src/LexicalUtils.ts:614"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"getselection",children:"$getSelection"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$getSelection"}),"(): ",(0,d.jsx)(l.code,{children:"null"})," | ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.BaseSelection",children:(0,d.jsx)(l.code,{children:"BaseSelection"})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-46",children:"Returns"}),"\n",(0,d.jsxs)(l.p,{children:[(0,d.jsx)(l.code,{children:"null"})," | ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.BaseSelection",children:(0,d.jsx)(l.code,{children:"BaseSelection"})})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-172",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalSelection.ts#L2704",children:"packages/lexical/src/LexicalSelection.ts:2704"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"getsiblingcaret",children:"$getSiblingCaret"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$getSiblingCaret"}),"<",(0,d.jsx)(l.code,{children:"T"}),", ",(0,d.jsx)(l.code,{children:"D"}),">(",(0,d.jsx)(l.code,{children:"origin"}),", ",(0,d.jsx)(l.code,{children:"direction"}),"): ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.SiblingCaret",children:(0,d.jsx)(l.code,{children:"SiblingCaret"})}),"<",(0,d.jsx)(l.code,{children:"T"}),", ",(0,d.jsx)(l.code,{children:"D"}),">"]}),"\n",(0,d.jsx)(l.p,{children:"Get a caret that points at the next or previous sibling of the given origin node."}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-44",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"T"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,d.jsx)(l.code,{children:"LexicalNode"})})]})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"D"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#caretdirection",children:(0,d.jsx)(l.code,{children:"CaretDirection"})})]})]})]})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-38",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"origin"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"T"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:"The origin node"})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"direction"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"D"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:"'next' or 'previous'"})]})]})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-47",children:"Returns"}),"\n",(0,d.jsxs)(l.p,{children:[(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.SiblingCaret",children:(0,d.jsx)(l.code,{children:"SiblingCaret"})}),"<",(0,d.jsx)(l.code,{children:"T"}),", ",(0,d.jsx)(l.code,{children:"D"}),">"]}),"\n",(0,d.jsx)(l.p,{children:"null if origin is null, otherwise a SiblingCaret for this origin and direction"}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-173",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L843",children:"packages/lexical/src/caret/LexicalCaret.ts:843"})}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$getSiblingCaret"}),"<",(0,d.jsx)(l.code,{children:"T"}),", ",(0,d.jsx)(l.code,{children:"D"}),">(",(0,d.jsx)(l.code,{children:"origin"}),", ",(0,d.jsx)(l.code,{children:"direction"}),"): ",(0,d.jsx)(l.code,{children:"null"})," | ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.SiblingCaret",children:(0,d.jsx)(l.code,{children:"SiblingCaret"})}),"<",(0,d.jsx)(l.code,{children:"T"}),", ",(0,d.jsx)(l.code,{children:"D"}),">"]}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-45",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"T"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,d.jsx)(l.code,{children:"LexicalNode"})})]})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"D"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#caretdirection",children:(0,d.jsx)(l.code,{children:"CaretDirection"})})]})]})]})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-39",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"origin"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.code,{children:"null"})," | ",(0,d.jsx)(l.code,{children:"T"})]})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"direction"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"D"})})]})]})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-48",children:"Returns"}),"\n",(0,d.jsxs)(l.p,{children:[(0,d.jsx)(l.code,{children:"null"})," | ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.SiblingCaret",children:(0,d.jsx)(l.code,{children:"SiblingCaret"})}),"<",(0,d.jsx)(l.code,{children:"T"}),", ",(0,d.jsx)(l.code,{children:"D"}),">"]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-174",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L847",children:"packages/lexical/src/caret/LexicalCaret.ts:847"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"getstate",children:"$getState"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$getState"}),"<",(0,d.jsx)(l.code,{children:"K"}),", ",(0,d.jsx)(l.code,{children:"V"}),">(",(0,d.jsx)(l.code,{children:"node"}),", ",(0,d.jsx)(l.code,{children:"stateConfig"}),", ",(0,d.jsx)(l.code,{children:"version?"}),"): ",(0,d.jsx)(l.code,{children:"V"})]}),"\n",(0,d.jsxs)(l.p,{children:["The accessor for working with node state. This will read the value for the\nstate on the given node, and will return ",(0,d.jsx)(l.code,{children:"stateConfig.defaultValue"})," if the\nstate has never been set on this node."]}),"\n",(0,d.jsxs)(l.p,{children:["The ",(0,d.jsx)(l.code,{children:"version"})," parameter is optional and should generally be ",(0,d.jsx)(l.code,{children:"'latest'"}),",\nconsistent with the behavior of other node methods and functions,\nbut for certain use cases such as ",(0,d.jsx)(l.code,{children:"updateDOM"})," you may have a need to\nuse ",(0,d.jsx)(l.code,{children:"'direct'"})," to read the state from a previous version of the node."]}),"\n",(0,d.jsxs)(l.p,{children:["For very advanced use cases, you can expect that 'direct' does not\nrequire an editor state, just like directly accessing other properties\nof a node without an accessor (e.g. ",(0,d.jsx)(l.code,{children:"textNode.__text"}),")."]}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-46",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"K"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.code,{children:"string"})]})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"V"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"V"})})]})]})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-40",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Default value"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"node"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,d.jsx)(l.code,{children:"LexicalNode"})})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"undefined"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:"Any LexicalNode"})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"stateConfig"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.StateConfig",children:(0,d.jsx)(l.code,{children:"StateConfig"})}),"<",(0,d.jsx)(l.code,{children:"K"}),", ",(0,d.jsx)(l.code,{children:"V"}),">"]}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"undefined"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:"The configuration of the state to read"})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"version"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.code,{children:'"latest"'})," | ",(0,d.jsx)(l.code,{children:'"direct"'})]}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"'latest'"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:"The default value 'latest' will read the latest version of the node state, 'direct' will read the version that is stored on this LexicalNode which not reflect the version used in the current editor state"})]})]})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-49",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.code,{children:"V"})}),"\n",(0,d.jsx)(l.p,{children:"The current value from the state, or the default value provided by the configuration."}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-175",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNodeState.ts#L329",children:"packages/lexical/src/LexicalNodeState.ts:329"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"getstatechange",children:"$getStateChange"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$getStateChange"}),"<",(0,d.jsx)(l.code,{children:"T"}),", ",(0,d.jsx)(l.code,{children:"K"}),", ",(0,d.jsx)(l.code,{children:"V"}),">(",(0,d.jsx)(l.code,{children:"node"}),", ",(0,d.jsx)(l.code,{children:"prevNode"}),", ",(0,d.jsx)(l.code,{children:"stateConfig"}),"): ",(0,d.jsx)(l.code,{children:"null"})," | [value: V, prevValue: V]"]}),"\n",(0,d.jsxs)(l.p,{children:["Given two versions of a node and a stateConfig, compare their state values\nusing ",(0,d.jsx)(l.code,{children:"$getState(nodeVersion, stateConfig, 'direct')"}),".\nIf the values are equal according to ",(0,d.jsx)(l.code,{children:"stateConfig.isEqual"}),", return ",(0,d.jsx)(l.code,{children:"null"}),",\notherwise return ",(0,d.jsx)(l.code,{children:"[value, prevValue]"}),"."]}),"\n",(0,d.jsxs)(l.p,{children:["This is useful for implementing updateDOM. Note that the ",(0,d.jsx)(l.code,{children:"'direct'"}),"\nversion argument is used for both nodes."]}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-47",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"T"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,d.jsx)(l.code,{children:"LexicalNode"})})]})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"K"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.code,{children:"string"})]})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"V"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"V"})})]})]})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-41",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"node"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"T"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:"Any LexicalNode"})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"prevNode"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"T"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:"A previous version of node"})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"stateConfig"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.StateConfig",children:(0,d.jsx)(l.code,{children:"StateConfig"})}),"<",(0,d.jsx)(l.code,{children:"K"}),", ",(0,d.jsx)(l.code,{children:"V"}),">"]}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:"The configuration of the state to read"})]})]})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-50",children:"Returns"}),"\n",(0,d.jsxs)(l.p,{children:[(0,d.jsx)(l.code,{children:"null"})," | [value: V, prevValue: V]"]}),"\n",(0,d.jsxs)(l.p,{children:[(0,d.jsx)(l.code,{children:"[value, prevValue]"})," if changed, otherwise ",(0,d.jsx)(l.code,{children:"null"})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-176",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNodeState.ts#L357",children:"packages/lexical/src/LexicalNodeState.ts:357"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"gettextcontent",children:"$getTextContent"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$getTextContent"}),"(): ",(0,d.jsx)(l.code,{children:"string"})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-51",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.code,{children:"string"})}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-177",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalSelection.ts#L3106",children:"packages/lexical/src/LexicalSelection.ts:3106"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"gettextnodeoffset",children:"$getTextNodeOffset"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$getTextNodeOffset"}),"(",(0,d.jsx)(l.code,{children:"origin"}),", ",(0,d.jsx)(l.code,{children:"offset"}),"): ",(0,d.jsx)(l.code,{children:"number"})]}),"\n",(0,d.jsx)(l.p,{children:"Get a normalized offset into a TextNode given a numeric offset or a\ndirection for which end of the string to use. Throws in dev if the offset\nis not in the bounds of the text content size."}),"\n",(0,d.jsx)(l.h4,{id:"parameters-42",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"origin"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.TextNode",children:(0,d.jsx)(l.code,{children:"TextNode"})})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:"a TextNode"})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"offset"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.code,{children:"number"})," | ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#caretdirection",children:(0,d.jsx)(l.code,{children:"CaretDirection"})})]}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:"An absolute offset into the TextNode string, or a direction for which end to use as the offset"})]})]})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-52",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.code,{children:"number"})}),"\n",(0,d.jsx)(l.p,{children:"An absolute offset into the TextNode string"}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-178",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L901",children:"packages/lexical/src/caret/LexicalCaret.ts:901"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"gettextpointcaret",children:"$getTextPointCaret"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$getTextPointCaret"}),"<",(0,d.jsx)(l.code,{children:"T"}),", ",(0,d.jsx)(l.code,{children:"D"}),">(",(0,d.jsx)(l.code,{children:"origin"}),", ",(0,d.jsx)(l.code,{children:"direction"}),", ",(0,d.jsx)(l.code,{children:"offset"}),"): ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.TextPointCaret",children:(0,d.jsx)(l.code,{children:"TextPointCaret"})}),"<",(0,d.jsx)(l.code,{children:"T"}),", ",(0,d.jsx)(l.code,{children:"D"}),">"]}),"\n",(0,d.jsx)(l.p,{children:"Construct a TextPointCaret"}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-48",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"T"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.TextNode",children:(0,d.jsx)(l.code,{children:"TextNode"})})]})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"D"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#caretdirection",children:(0,d.jsx)(l.code,{children:"CaretDirection"})})]})]})]})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-43",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"origin"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"T"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:"The TextNode"})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"direction"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"D"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:"The direction (next points to the end of the text, previous points to the beginning)"})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"offset"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.code,{children:"number"})," | ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#caretdirection",children:(0,d.jsx)(l.code,{children:"CaretDirection"})})]}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:"The offset into the text in absolute positive string coordinates (0 is the start)"})]})]})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-53",children:"Returns"}),"\n",(0,d.jsxs)(l.p,{children:[(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.TextPointCaret",children:(0,d.jsx)(l.code,{children:"TextPointCaret"})}),"<",(0,d.jsx)(l.code,{children:"T"}),", ",(0,d.jsx)(l.code,{children:"D"}),">"]}),"\n",(0,d.jsx)(l.p,{children:"a TextPointCaret"}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-179",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L866",children:"packages/lexical/src/caret/LexicalCaret.ts:866"})}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$getTextPointCaret"}),"<",(0,d.jsx)(l.code,{children:"T"}),", ",(0,d.jsx)(l.code,{children:"D"}),">(",(0,d.jsx)(l.code,{children:"origin"}),", ",(0,d.jsx)(l.code,{children:"direction"}),", ",(0,d.jsx)(l.code,{children:"offset"}),"): ",(0,d.jsx)(l.code,{children:"null"})," | ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.TextPointCaret",children:(0,d.jsx)(l.code,{children:"TextPointCaret"})}),"<",(0,d.jsx)(l.code,{children:"T"}),", ",(0,d.jsx)(l.code,{children:"D"}),">"]}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-49",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"T"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.TextNode",children:(0,d.jsx)(l.code,{children:"TextNode"})})]})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"D"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#caretdirection",children:(0,d.jsx)(l.code,{children:"CaretDirection"})})]})]})]})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-44",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"origin"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.code,{children:"null"})," | ",(0,d.jsx)(l.code,{children:"T"})]})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"direction"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"D"})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"offset"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.code,{children:"number"})," | ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#caretdirection",children:(0,d.jsx)(l.code,{children:"CaretDirection"})})]})]})]})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-54",children:"Returns"}),"\n",(0,d.jsxs)(l.p,{children:[(0,d.jsx)(l.code,{children:"null"})," | ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.TextPointCaret",children:(0,d.jsx)(l.code,{children:"TextPointCaret"})}),"<",(0,d.jsx)(l.code,{children:"T"}),", ",(0,d.jsx)(l.code,{children:"D"}),">"]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-180",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L874",children:"packages/lexical/src/caret/LexicalCaret.ts:874"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"gettextpointcaretslice",children:"$getTextPointCaretSlice"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$getTextPointCaretSlice"}),"<",(0,d.jsx)(l.code,{children:"T"}),", ",(0,d.jsx)(l.code,{children:"D"}),">(",(0,d.jsx)(l.code,{children:"caret"}),", ",(0,d.jsx)(l.code,{children:"distance"}),"): ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.TextPointCaretSlice",children:(0,d.jsx)(l.code,{children:"TextPointCaretSlice"})}),"<",(0,d.jsx)(l.code,{children:"T"}),", ",(0,d.jsx)(l.code,{children:"D"}),">"]}),"\n",(0,d.jsx)(l.p,{children:"Construct a TextPointCaretSlice given a TextPointCaret and a signed distance. The\ndistance should be negative to slice text before the caret's offset, and positive\nto slice text after the offset. The direction of the caret itself is not\nrelevant to the string coordinates when working with a TextPointCaretSlice\nbut mutation operations will preserve the direction."}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-50",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"T"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.TextNode",children:(0,d.jsx)(l.code,{children:"TextNode"})})]})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"D"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#caretdirection",children:(0,d.jsx)(l.code,{children:"CaretDirection"})})]})]})]})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-45",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"caret"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.TextPointCaret",children:(0,d.jsx)(l.code,{children:"TextPointCaret"})}),"<",(0,d.jsx)(l.code,{children:"T"}),", ",(0,d.jsx)(l.code,{children:"D"}),">"]})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"distance"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"number"})})]})]})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-55",children:"Returns"}),"\n",(0,d.jsxs)(l.p,{children:[(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.TextPointCaretSlice",children:(0,d.jsx)(l.code,{children:"TextPointCaretSlice"})}),"<",(0,d.jsx)(l.code,{children:"T"}),", ",(0,d.jsx)(l.code,{children:"D"}),">"]}),"\n",(0,d.jsx)(l.p,{children:"TextPointCaretSlice"}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-181",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L933",children:"packages/lexical/src/caret/LexicalCaret.ts:933"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"hasancestor",children:"$hasAncestor"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$hasAncestor"}),"(",(0,d.jsx)(l.code,{children:"child"}),", ",(0,d.jsx)(l.code,{children:"targetNode"}),"): ",(0,d.jsx)(l.code,{children:"boolean"})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-46",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"child"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,d.jsx)(l.code,{children:"LexicalNode"})})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"targetNode"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,d.jsx)(l.code,{children:"LexicalNode"})})})]})]})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-56",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.code,{children:"boolean"})}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-182",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalUtils.ts#L1432",children:"packages/lexical/src/LexicalUtils.ts:1432"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"hasupdatetag",children:"$hasUpdateTag"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$hasUpdateTag"}),"(",(0,d.jsx)(l.code,{children:"tag"}),"): ",(0,d.jsx)(l.code,{children:"boolean"})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-47",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"tag"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#updatetag",children:(0,d.jsx)(l.code,{children:"UpdateTag"})})})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-57",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.code,{children:"boolean"})}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-183",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalUtils.ts#L1389",children:"packages/lexical/src/LexicalUtils.ts:1389"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"insertnodes",children:"$insertNodes"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$insertNodes"}),"(",(0,d.jsx)(l.code,{children:"nodes"}),"): ",(0,d.jsx)(l.code,{children:"void"})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-48",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"nodes"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,d.jsx)(l.code,{children:"LexicalNode"})}),"[]"]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-58",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.code,{children:"void"})}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-184",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalSelection.ts#L3097",children:"packages/lexical/src/LexicalSelection.ts:3097"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"isblockelementnode",children:"$isBlockElementNode"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$isBlockElementNode"}),"(",(0,d.jsx)(l.code,{children:"node"}),"): node is ElementNode"]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-49",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"node"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.code,{children:"undefined"})," | ",(0,d.jsx)(l.code,{children:"null"})," | ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,d.jsx)(l.code,{children:"LexicalNode"})})]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-59",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:"node is ElementNode"}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-185",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalSelection.ts#L2513",children:"packages/lexical/src/LexicalSelection.ts:2513"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"ischildcaret",children:"$isChildCaret"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$isChildCaret"}),"<",(0,d.jsx)(l.code,{children:"D"}),">(",(0,d.jsx)(l.code,{children:"caret"}),"): caret is ChildCaret<ElementNode, D>"]}),"\n",(0,d.jsx)(l.p,{children:"Guard to check if the given argument is specifically a ChildCaret"}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-51",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"D"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#caretdirection",children:(0,d.jsx)(l.code,{children:"CaretDirection"})})]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-50",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"caret"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.code,{children:"undefined"})," | ",(0,d.jsx)(l.code,{children:"null"})," | ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#pointcaret",children:(0,d.jsx)(l.code,{children:"PointCaret"})}),"<",(0,d.jsx)(l.code,{children:"D"}),">"]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-60",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:"caret is ChildCaret<ElementNode, D>"}),"\n",(0,d.jsx)(l.p,{children:"true if caret is a ChildCaret"}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-186",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L759",children:"packages/lexical/src/caret/LexicalCaret.ts:759"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"isdecoratornode",children:"$isDecoratorNode"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$isDecoratorNode"}),"<",(0,d.jsx)(l.code,{children:"T"}),">(",(0,d.jsx)(l.code,{children:"node"}),"): node is DecoratorNode<T>"]}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-52",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsx)(l.tr,{children:(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"})})}),(0,d.jsx)(l.tbody,{children:(0,d.jsx)(l.tr,{children:(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"T"})})})})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-51",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"node"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.code,{children:"undefined"})," | ",(0,d.jsx)(l.code,{children:"null"})," | ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,d.jsx)(l.code,{children:"LexicalNode"})})]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-61",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:"node is DecoratorNode<T>"}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-187",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/nodes/LexicalDecoratorNode.ts#L48",children:"packages/lexical/src/nodes/LexicalDecoratorNode.ts:48"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"iselementnode",children:"$isElementNode"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$isElementNode"}),"(",(0,d.jsx)(l.code,{children:"node"}),"): node is ElementNode"]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-52",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"node"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.code,{children:"undefined"})," | ",(0,d.jsx)(l.code,{children:"null"})," | ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,d.jsx)(l.code,{children:"LexicalNode"})})]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-62",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:"node is ElementNode"}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-188",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/nodes/LexicalElementNode.ts#L993",children:"packages/lexical/src/nodes/LexicalElementNode.ts:993"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"isextendabletextpointcaret",children:"$isExtendableTextPointCaret"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$isExtendableTextPointCaret"}),"<",(0,d.jsx)(l.code,{children:"D"}),">(",(0,d.jsx)(l.code,{children:"caret"}),"): caret is TextPointCaret<TextNode, D> & Object"]}),"\n",(0,d.jsx)(l.p,{children:"Determine whether the TextPointCaret's offset can be extended further without leaving the TextNode.\nReturns false if the given caret is not a TextPointCaret or the offset can not be moved further in\ndirection."}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-53",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"D"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#caretdirection",children:(0,d.jsx)(l.code,{children:"CaretDirection"})})]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-53",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"caret"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#pointcaret",children:(0,d.jsx)(l.code,{children:"PointCaret"})}),"<",(0,d.jsx)(l.code,{children:"D"}),">"]}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:"A PointCaret"})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-63",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:"caret is TextPointCaret<TextNode, D> & Object"}),"\n",(0,d.jsx)(l.p,{children:"true if caret is a TextPointCaret with an offset that is not at the end of the text given the direction."}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-189",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaretUtils.ts#L500",children:"packages/lexical/src/caret/LexicalCaretUtils.ts:500"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"isinlineelementordecoratornode",children:"$isInlineElementOrDecoratorNode"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$isInlineElementOrDecoratorNode"}),"(",(0,d.jsx)(l.code,{children:"node"}),"): ",(0,d.jsx)(l.code,{children:"boolean"})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-54",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"node"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,d.jsx)(l.code,{children:"LexicalNode"})})})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-64",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.code,{children:"boolean"})}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-190",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalUtils.ts#L1459",children:"packages/lexical/src/LexicalUtils.ts:1459"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"isleafnode",children:"$isLeafNode"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$isLeafNode"}),"(",(0,d.jsx)(l.code,{children:"node"}),"): node is DecoratorNode<unknown> | TextNode | LineBreakNode"]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-55",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"node"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.code,{children:"undefined"})," | ",(0,d.jsx)(l.code,{children:"null"})," | ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,d.jsx)(l.code,{children:"LexicalNode"})})]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-65",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:"node is DecoratorNode<unknown> | TextNode | LineBreakNode"}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-191",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalUtils.ts#L294",children:"packages/lexical/src/LexicalUtils.ts:294"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"islinebreaknode",children:"$isLineBreakNode"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$isLineBreakNode"}),"(",(0,d.jsx)(l.code,{children:"node"}),"): node is LineBreakNode"]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-56",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"node"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.code,{children:"undefined"})," | ",(0,d.jsx)(l.code,{children:"null"})," | ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,d.jsx)(l.code,{children:"LexicalNode"})})]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-66",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:"node is LineBreakNode"}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-192",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/nodes/LexicalLineBreakNode.ts#L86",children:"packages/lexical/src/nodes/LexicalLineBreakNode.ts:86"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"isnodecaret",children:"$isNodeCaret"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$isNodeCaret"}),"<",(0,d.jsx)(l.code,{children:"D"}),">(",(0,d.jsx)(l.code,{children:"caret"}),"): caret is PointCaret<D>"]}),"\n",(0,d.jsx)(l.p,{children:"Guard to check if the given argument is any type of caret"}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-54",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"D"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#caretdirection",children:(0,d.jsx)(l.code,{children:"CaretDirection"})})]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-57",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"caret"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.code,{children:"undefined"})," | ",(0,d.jsx)(l.code,{children:"null"})," | ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#pointcaret",children:(0,d.jsx)(l.code,{children:"PointCaret"})}),"<",(0,d.jsx)(l.code,{children:"D"}),">"]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-67",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:"caret is PointCaret<D>"}),"\n",(0,d.jsx)(l.p,{children:"true if caret is any type of caret"}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-193",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L735",children:"packages/lexical/src/caret/LexicalCaret.ts:735"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"isnodeselection",children:"$isNodeSelection"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$isNodeSelection"}),"(",(0,d.jsx)(l.code,{children:"x"}),"): x is NodeSelection"]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-58",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"x"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"unknown"})})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-68",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:"x is NodeSelection"}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-194",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalSelection.ts#L1936",children:"packages/lexical/src/LexicalSelection.ts:1936"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"isparagraphnode",children:"$isParagraphNode"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$isParagraphNode"}),"(",(0,d.jsx)(l.code,{children:"node"}),"): node is ParagraphNode"]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-59",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"node"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.code,{children:"undefined"})," | ",(0,d.jsx)(l.code,{children:"null"})," | ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,d.jsx)(l.code,{children:"LexicalNode"})})]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-69",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:"node is ParagraphNode"}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-195",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/nodes/LexicalParagraphNode.ts#L171",children:"packages/lexical/src/nodes/LexicalParagraphNode.ts:171"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"israngeselection",children:"$isRangeSelection"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$isRangeSelection"}),"(",(0,d.jsx)(l.code,{children:"x"}),"): x is RangeSelection"]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-60",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"x"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"unknown"})})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-70",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:"x is RangeSelection"}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-196",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalSelection.ts#L456",children:"packages/lexical/src/LexicalSelection.ts:456"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"isrootnode",children:"$isRootNode"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$isRootNode"}),"(",(0,d.jsx)(l.code,{children:"node"}),"): node is RootNode"]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-61",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"node"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.code,{children:"undefined"})," | ",(0,d.jsx)(l.code,{children:"null"})," | ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,d.jsx)(l.code,{children:"LexicalNode"})})," | ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.RootNode",children:(0,d.jsx)(l.code,{children:"RootNode"})})]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-71",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:"node is RootNode"}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-197",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/nodes/LexicalRootNode.ts#L113",children:"packages/lexical/src/nodes/LexicalRootNode.ts:113"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"isrootorshadowroot",children:"$isRootOrShadowRoot"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$isRootOrShadowRoot"}),"(",(0,d.jsx)(l.code,{children:"node"}),"): node is RootNode | ShadowRootNode"]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-62",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"node"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.code,{children:"null"})," | ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,d.jsx)(l.code,{children:"LexicalNode"})})]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-72",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:"node is RootNode | ShadowRootNode"}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-198",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalUtils.ts#L1486",children:"packages/lexical/src/LexicalUtils.ts:1486"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"issiblingcaret",children:"$isSiblingCaret"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$isSiblingCaret"}),"<",(0,d.jsx)(l.code,{children:"D"}),">(",(0,d.jsx)(l.code,{children:"caret"}),"): caret is SiblingCaret<LexicalNode, D>"]}),"\n",(0,d.jsx)(l.p,{children:"Guard to check if the given argument is specifically a SiblingCaret (or TextPointCaret)"}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-55",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"D"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#caretdirection",children:(0,d.jsx)(l.code,{children:"CaretDirection"})})]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-63",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"caret"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.code,{children:"undefined"})," | ",(0,d.jsx)(l.code,{children:"null"})," | ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#pointcaret",children:(0,d.jsx)(l.code,{children:"PointCaret"})}),"<",(0,d.jsx)(l.code,{children:"D"}),">"]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-73",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:"caret is SiblingCaret<LexicalNode, D>"}),"\n",(0,d.jsx)(l.p,{children:"true if caret is a SiblingCaret"}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-199",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L747",children:"packages/lexical/src/caret/LexicalCaret.ts:747"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"istabnode",children:"$isTabNode"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$isTabNode"}),"(",(0,d.jsx)(l.code,{children:"node"}),"): node is TabNode"]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-64",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"node"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.code,{children:"undefined"})," | ",(0,d.jsx)(l.code,{children:"null"})," | ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,d.jsx)(l.code,{children:"LexicalNode"})})]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-74",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:"node is TabNode"}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-200",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/nodes/LexicalTabNode.ts#L105",children:"packages/lexical/src/nodes/LexicalTabNode.ts:105"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"istextnode",children:"$isTextNode"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$isTextNode"}),"(",(0,d.jsx)(l.code,{children:"node"}),"): node is TextNode"]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-65",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"node"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.code,{children:"undefined"})," | ",(0,d.jsx)(l.code,{children:"null"})," | ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,d.jsx)(l.code,{children:"LexicalNode"})})]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-75",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:"node is TextNode"}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-201",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/nodes/LexicalTextNode.ts#L1378",children:"packages/lexical/src/nodes/LexicalTextNode.ts:1378"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"istextpointcaret",children:"$isTextPointCaret"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$isTextPointCaret"}),"<",(0,d.jsx)(l.code,{children:"D"}),">(",(0,d.jsx)(l.code,{children:"caret"}),"): caret is TextPointCaret<TextNode, D>"]}),"\n",(0,d.jsx)(l.p,{children:"Guard to check if the given caret is specifically a TextPointCaret"}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-56",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"D"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#caretdirection",children:(0,d.jsx)(l.code,{children:"CaretDirection"})})]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-66",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"caret"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.code,{children:"undefined"})," | ",(0,d.jsx)(l.code,{children:"null"})," | ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#pointcaret",children:(0,d.jsx)(l.code,{children:"PointCaret"})}),"<",(0,d.jsx)(l.code,{children:"D"}),">"]}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:"Any caret"})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-76",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:"caret is TextPointCaret<TextNode, D>"}),"\n",(0,d.jsx)(l.p,{children:"true if it is a TextPointCaret"}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-202",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L723",children:"packages/lexical/src/caret/LexicalCaret.ts:723"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"istextpointcaretslice",children:"$isTextPointCaretSlice"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$isTextPointCaretSlice"}),"<",(0,d.jsx)(l.code,{children:"D"}),">(",(0,d.jsx)(l.code,{children:"caretOrSlice"}),"): caretOrSlice is TextPointCaretSlice<TextNode, D>"]}),"\n",(0,d.jsx)(l.p,{children:"Guard to check for a TextPointCaretSlice"}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-57",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"D"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#caretdirection",children:(0,d.jsx)(l.code,{children:"CaretDirection"})})]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-67",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"caretOrSlice"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.code,{children:"undefined"})," | ",(0,d.jsx)(l.code,{children:"null"})," | ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#pointcaret",children:(0,d.jsx)(l.code,{children:"PointCaret"})}),"<",(0,d.jsx)(l.code,{children:"D"}),"> | ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.TextPointCaretSlice",children:(0,d.jsx)(l.code,{children:"TextPointCaretSlice"})}),"<",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.TextNode",children:(0,d.jsx)(l.code,{children:"TextNode"})}),", ",(0,d.jsx)(l.code,{children:"D"}),">"]}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:"A caret or slice"})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-77",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:"caretOrSlice is TextPointCaretSlice<TextNode, D>"}),"\n",(0,d.jsx)(l.p,{children:"true if caretOrSlice is a TextPointCaretSlice"}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-203",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L1111",children:"packages/lexical/src/caret/LexicalCaret.ts:1111"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"istokenorsegmented",children:"$isTokenOrSegmented"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$isTokenOrSegmented"}),"(",(0,d.jsx)(l.code,{children:"node"}),"): ",(0,d.jsx)(l.code,{children:"boolean"})]}),"\n",(0,d.jsx)(l.p,{children:"Return true if the TextNode is a TabNode, or is in token or segmented mode."}),"\n",(0,d.jsx)(l.h4,{id:"parameters-68",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"node"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.TextNode",children:(0,d.jsx)(l.code,{children:"TextNode"})})})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-78",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.code,{children:"boolean"})}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-204",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalUtils.ts#L233",children:"packages/lexical/src/LexicalUtils.ts:233"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"istokenortab",children:"$isTokenOrTab"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$isTokenOrTab"}),"(",(0,d.jsx)(l.code,{children:"node"}),"): ",(0,d.jsx)(l.code,{children:"boolean"})]}),"\n",(0,d.jsx)(l.p,{children:"Return true if the TextNode is a TabNode or is in token mode."}),"\n",(0,d.jsx)(l.h4,{id:"parameters-69",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"node"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.TextNode",children:(0,d.jsx)(l.code,{children:"TextNode"})})})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-79",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.code,{children:"boolean"})}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-205",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalUtils.ts#L226",children:"packages/lexical/src/LexicalUtils.ts:226"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"nodesoftype",children:"$nodesOfType"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$nodesOfType"}),"<",(0,d.jsx)(l.code,{children:"T"}),">(",(0,d.jsx)(l.code,{children:"klass"}),"): ",(0,d.jsx)(l.code,{children:"T"}),"[]"]}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-58",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"T"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,d.jsx)(l.code,{children:"LexicalNode"})})]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-70",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"klass"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#klass",children:(0,d.jsx)(l.code,{children:"Klass"})}),"<",(0,d.jsx)(l.code,{children:"T"}),">"]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-80",children:"Returns"}),"\n",(0,d.jsxs)(l.p,{children:[(0,d.jsx)(l.code,{children:"T"}),"[]"]}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.strong,{children:(0,d.jsx)(l.code,{children:"Deprecated"})})}),"\n",(0,d.jsxs)(l.p,{children:["Use ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalEditor#registermutationlistener",children:"LexicalEditor.registerMutationListener"})," with ",(0,d.jsx)(l.code,{children:"skipInitialization: false"})," instead."]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-206",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalUtils.ts#L1205",children:"packages/lexical/src/LexicalUtils.ts:1205"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"normalizecaret",children:"$normalizeCaret"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$normalizeCaret"}),"<",(0,d.jsx)(l.code,{children:"D"}),">(",(0,d.jsx)(l.code,{children:"initialCaret"}),"): ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#pointcaret",children:(0,d.jsx)(l.code,{children:"PointCaret"})}),"<",(0,d.jsx)(l.code,{children:"D"}),">"]}),"\n",(0,d.jsx)(l.p,{children:"Normalize a caret to the deepest equivalent PointCaret.\nThis will return a TextPointCaret with the offset set according\nto the direction if given a caret with a TextNode origin\nor a caret with an ElementNode origin with the deepest ChildCaret\nhaving an adjacent TextNode."}),"\n",(0,d.jsx)(l.p,{children:"If given a TextPointCaret, it will be returned, as no normalization\nis required when an offset is already present."}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-59",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"D"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#caretdirection",children:(0,d.jsx)(l.code,{children:"CaretDirection"})})]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-71",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"initialCaret"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#pointcaret",children:(0,d.jsx)(l.code,{children:"PointCaret"})}),"<",(0,d.jsx)(l.code,{children:"D"}),">"]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-81",children:"Returns"}),"\n",(0,d.jsxs)(l.p,{children:[(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#pointcaret",children:(0,d.jsx)(l.code,{children:"PointCaret"})}),"<",(0,d.jsx)(l.code,{children:"D"}),">"]}),"\n",(0,d.jsx)(l.p,{children:"The normalized PointCaret"}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-207",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaretUtils.ts#L475",children:"packages/lexical/src/caret/LexicalCaretUtils.ts:475"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"normalizeselection__experimental",children:"$normalizeSelection__EXPERIMENTAL"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$normalizeSelection__EXPERIMENTAL"}),"(",(0,d.jsx)(l.code,{children:"selection"}),"): ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.RangeSelection",children:(0,d.jsx)(l.code,{children:"RangeSelection"})})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-72",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"selection"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.RangeSelection",children:(0,d.jsx)(l.code,{children:"RangeSelection"})})})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-82",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.RangeSelection",children:(0,d.jsx)(l.code,{children:"RangeSelection"})})}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-208",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNormalization.ts#L95",children:"packages/lexical/src/LexicalNormalization.ts:95"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"onupdate",children:"$onUpdate"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$onUpdate"}),"(",(0,d.jsx)(l.code,{children:"updateFn"}),"): ",(0,d.jsx)(l.code,{children:"void"})]}),"\n",(0,d.jsxs)(l.p,{children:["Add a function to run after the current update. This will run after any\n",(0,d.jsx)(l.code,{children:"onUpdate"})," function already supplied to ",(0,d.jsx)(l.code,{children:"editor.update()"}),", as well as any\nfunctions added with previous calls to ",(0,d.jsx)(l.code,{children:"$onUpdate"}),"."]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-73",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"updateFn"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["() => ",(0,d.jsx)(l.code,{children:"void"})]}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:"The function to run after the current update."})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-83",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.code,{children:"void"})}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-209",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalUtils.ts#L1407",children:"packages/lexical/src/LexicalUtils.ts:1407"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"parseserializednode",children:"$parseSerializedNode"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$parseSerializedNode"}),"(",(0,d.jsx)(l.code,{children:"serializedNode"}),"): ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,d.jsx)(l.code,{children:"LexicalNode"})})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-74",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"serializedNode"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#serializedlexicalnode",children:(0,d.jsx)(l.code,{children:"SerializedLexicalNode"})})})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-84",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,d.jsx)(l.code,{children:"LexicalNode"})})}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-210",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalUpdates.ts#L356",children:"packages/lexical/src/LexicalUpdates.ts:356"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"removetextfromcaretrange",children:"$removeTextFromCaretRange"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$removeTextFromCaretRange"}),"<",(0,d.jsx)(l.code,{children:"D"}),">(",(0,d.jsx)(l.code,{children:"initialRange"}),", ",(0,d.jsx)(l.code,{children:"sliceMode?"}),"): ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.CaretRange",children:(0,d.jsx)(l.code,{children:"CaretRange"})}),"<",(0,d.jsx)(l.code,{children:"D"}),">"]}),"\n",(0,d.jsx)(l.p,{children:"Remove all text and nodes in the given range. If the range spans multiple\nblocks then the remaining contents of the later block will be merged with\nthe earlier block."}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-60",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"D"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#caretdirection",children:(0,d.jsx)(l.code,{children:"CaretDirection"})})]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-75",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Default value"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"initialRange"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.CaretRange",children:(0,d.jsx)(l.code,{children:"CaretRange"})}),"<",(0,d.jsx)(l.code,{children:"D"}),">"]}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"undefined"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:"The range to remove text and nodes from"})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"sliceMode"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.code,{children:'"removeEmptySlices"'})," | ",(0,d.jsx)(l.code,{children:'"preserveEmptyTextSliceCaret"'})]}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"'removeEmptySlices'"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:"If 'preserveEmptyTextPointCaret' it will leave an empty TextPointCaret at the anchor for insert if one exists, otherwise empty slices will be removed"})]})]})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-85",children:"Returns"}),"\n",(0,d.jsxs)(l.p,{children:[(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.CaretRange",children:(0,d.jsx)(l.code,{children:"CaretRange"})}),"<",(0,d.jsx)(l.code,{children:"D"}),">"]}),"\n",(0,d.jsx)(l.p,{children:"The new collapsed range (biased towards the earlier node)"}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-211",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaretUtils.ts#L232",children:"packages/lexical/src/caret/LexicalCaretUtils.ts:232"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"rewindsiblingcaret",children:"$rewindSiblingCaret"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$rewindSiblingCaret"}),"<",(0,d.jsx)(l.code,{children:"T"}),", ",(0,d.jsx)(l.code,{children:"D"}),">(",(0,d.jsx)(l.code,{children:"caret"}),"): ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#nodecaret",children:(0,d.jsx)(l.code,{children:"NodeCaret"})}),"<",(0,d.jsx)(l.code,{children:"D"}),">"]}),"\n",(0,d.jsx)(l.p,{children:"Given a SiblingCaret we can always compute a caret that points to the\norigin of that caret in the same direction. The adjacent caret of the\nreturned caret will be equivalent to the given caret."}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-61",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"T"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,d.jsx)(l.code,{children:"LexicalNode"})})]})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"D"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#caretdirection",children:(0,d.jsx)(l.code,{children:"CaretDirection"})})]})]})]})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-76",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"caret"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.SiblingCaret",children:(0,d.jsx)(l.code,{children:"SiblingCaret"})}),"<",(0,d.jsx)(l.code,{children:"T"}),", ",(0,d.jsx)(l.code,{children:"D"}),">"]}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:'The caret to "rewind"'})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-86",children:"Returns"}),"\n",(0,d.jsxs)(l.p,{children:[(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#nodecaret",children:(0,d.jsx)(l.code,{children:"NodeCaret"})}),"<",(0,d.jsx)(l.code,{children:"D"}),">"]}),"\n",(0,d.jsx)(l.p,{children:"A new caret (ChildCaret or SiblingCaret) with the same direction"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.strong,{children:(0,d.jsx)(l.code,{children:"Example"})})}),"\n",(0,d.jsx)(l.pre,{children:(0,d.jsx)(l.code,{className:"language-ts",children:"siblingCaret.is($rewindSiblingCaret(siblingCaret).getAdjacentCaret())\n"})}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-212",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaretUtils.ts#L183",children:"packages/lexical/src/caret/LexicalCaretUtils.ts:183"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"selectall",children:"$selectAll"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$selectAll"}),"(",(0,d.jsx)(l.code,{children:"selection?"}),"): ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.RangeSelection",children:(0,d.jsx)(l.code,{children:"RangeSelection"})})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-77",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"selection?"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.code,{children:"null"})," | ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.RangeSelection",children:(0,d.jsx)(l.code,{children:"RangeSelection"})})]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-87",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.RangeSelection",children:(0,d.jsx)(l.code,{children:"RangeSelection"})})}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-213",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalUtils.ts#L1123",children:"packages/lexical/src/LexicalUtils.ts:1123"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"setcompositionkey",children:"$setCompositionKey"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$setCompositionKey"}),"(",(0,d.jsx)(l.code,{children:"compositionKey"}),"): ",(0,d.jsx)(l.code,{children:"void"})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-78",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"compositionKey"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.code,{children:"null"})," | ",(0,d.jsx)(l.code,{children:"string"})]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-88",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.code,{children:"void"})}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-214",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalUtils.ts#L476",children:"packages/lexical/src/LexicalUtils.ts:476"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"setpointfromcaret",children:"$setPointFromCaret"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$setPointFromCaret"}),"<",(0,d.jsx)(l.code,{children:"D"}),">(",(0,d.jsx)(l.code,{children:"point"}),", ",(0,d.jsx)(l.code,{children:"caret"}),"): ",(0,d.jsx)(l.code,{children:"void"})]}),"\n",(0,d.jsx)(l.p,{children:"Update the given point in-place from the PointCaret"}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-62",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"D"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#caretdirection",children:(0,d.jsx)(l.code,{children:"CaretDirection"})})]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-79",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"point"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#pointtype",children:(0,d.jsx)(l.code,{children:"PointType"})})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:"the point to set"})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"caret"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#pointcaret",children:(0,d.jsx)(l.code,{children:"PointCaret"})}),"<",(0,d.jsx)(l.code,{children:"D"}),">"]}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:"the caret to set the point from"})]})]})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-89",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.code,{children:"void"})}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-215",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaretUtils.ts#L91",children:"packages/lexical/src/caret/LexicalCaretUtils.ts:91"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"setselection",children:"$setSelection"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$setSelection"}),"(",(0,d.jsx)(l.code,{children:"selection"}),"): ",(0,d.jsx)(l.code,{children:"void"})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-80",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"selection"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.code,{children:"null"})," | ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.BaseSelection",children:(0,d.jsx)(l.code,{children:"BaseSelection"})})]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-90",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.code,{children:"void"})}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-216",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalUtils.ts#L622",children:"packages/lexical/src/LexicalUtils.ts:622"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"setselectionfromcaretrange",children:"$setSelectionFromCaretRange"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$setSelectionFromCaretRange"}),"(",(0,d.jsx)(l.code,{children:"caretRange"}),"): ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.RangeSelection",children:(0,d.jsx)(l.code,{children:"RangeSelection"})})]}),"\n",(0,d.jsx)(l.p,{children:"Set a RangeSelection on the editor from the given CaretRange"}),"\n",(0,d.jsx)(l.h4,{id:"parameters-81",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"caretRange"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.CaretRange",children:(0,d.jsx)(l.code,{children:"CaretRange"})}),"<",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#caretdirection",children:(0,d.jsx)(l.code,{children:"CaretDirection"})}),">"]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-91",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.RangeSelection",children:(0,d.jsx)(l.code,{children:"RangeSelection"})})}),"\n",(0,d.jsx)(l.p,{children:"The new RangeSelection"}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-217",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaretUtils.ts#L127",children:"packages/lexical/src/caret/LexicalCaretUtils.ts:127"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"setstate",children:"$setState"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$setState"}),"<",(0,d.jsx)(l.code,{children:"Node"}),", ",(0,d.jsx)(l.code,{children:"K"}),", ",(0,d.jsx)(l.code,{children:"V"}),">(",(0,d.jsx)(l.code,{children:"node"}),", ",(0,d.jsx)(l.code,{children:"stateConfig"}),", ",(0,d.jsx)(l.code,{children:"valueOrUpdater"}),"): ",(0,d.jsx)(l.code,{children:"Node"})]}),"\n",(0,d.jsxs)(l.p,{children:["Set the state defined by stateConfig on node. Like with ",(0,d.jsx)(l.code,{children:"React.useState"}),"\nyou may directly specify the value or use an updater function that will\nbe called with the previous value of the state on that node (which will\nbe the ",(0,d.jsx)(l.code,{children:"stateConfig.defaultValue"})," if not set)."]}),"\n",(0,d.jsxs)(l.p,{children:["When an updater function is used, the node will only be marked dirty if\n",(0,d.jsx)(l.code,{children:"stateConfig.isEqual(prevValue, value)"})," is false."]}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-63",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"Node"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,d.jsx)(l.code,{children:"LexicalNode"})})]})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"K"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.code,{children:"string"})]})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"V"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"V"})})]})]})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-82",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"node"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"Node"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:"The LexicalNode to set the state on"})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"stateConfig"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.StateConfig",children:(0,d.jsx)(l.code,{children:"StateConfig"})}),"<",(0,d.jsx)(l.code,{children:"K"}),", ",(0,d.jsx)(l.code,{children:"V"}),">"]}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:"The configuration for this state"})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"valueOrUpdater"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#valueorupdater",children:(0,d.jsx)(l.code,{children:"ValueOrUpdater"})}),"<",(0,d.jsx)(l.code,{children:"V"}),">"]}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:"The value or updater function"})]})]})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-92",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.code,{children:"Node"})}),"\n",(0,d.jsx)(l.p,{children:"node"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.strong,{children:(0,d.jsx)(l.code,{children:"Example"})})}),"\n",(0,d.jsx)(l.pre,{children:(0,d.jsx)(l.code,{className:"language-ts",children:"const toggle = createState('toggle', {parse: Boolean});\n// set it direction\n$setState(node, counterState, true);\n// use an updater\n$setState(node, counterState, (prev) => !prev);\n"})}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-218",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNodeState.ts#L390",children:"packages/lexical/src/LexicalNodeState.ts:390"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"splitatpointcaretnext",children:"$splitAtPointCaretNext"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$splitAtPointCaretNext"}),"(",(0,d.jsx)(l.code,{children:"pointCaret"}),", ",(0,d.jsx)(l.code,{children:"\xabdestructured\xbb?"}),"): ",(0,d.jsx)(l.code,{children:"null"})," | ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#nodecaret",children:(0,d.jsx)(l.code,{children:"NodeCaret"})}),"<",(0,d.jsx)(l.code,{children:'"next"'}),">"]}),"\n",(0,d.jsx)(l.p,{children:"Split a node at a PointCaret and return a NodeCaret at that point, or null if the\nnode can't be split. This is non-recursive and will only perform at most one split."}),"\n",(0,d.jsx)(l.h4,{id:"parameters-83",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"pointCaret"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#pointcaret",children:(0,d.jsx)(l.code,{children:"PointCaret"})}),"<",(0,d.jsx)(l.code,{children:'"next"'}),">"]})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"\xabdestructured\xbb"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.SplitAtPointCaretNextOptions",children:(0,d.jsx)(l.code,{children:"SplitAtPointCaretNextOptions"})})})]})]})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-93",children:"Returns"}),"\n",(0,d.jsxs)(l.p,{children:[(0,d.jsx)(l.code,{children:"null"})," | ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#nodecaret",children:(0,d.jsx)(l.code,{children:"NodeCaret"})}),"<",(0,d.jsx)(l.code,{children:'"next"'}),">"]}),"\n",(0,d.jsx)(l.p,{children:"The NodeCaret pointing to the location of the split (or null if a split is not possible)"}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-219",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaretUtils.ts#L689",children:"packages/lexical/src/caret/LexicalCaretUtils.ts:689"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"splitnode",children:"$splitNode"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$splitNode"}),"(",(0,d.jsx)(l.code,{children:"node"}),", ",(0,d.jsx)(l.code,{children:"offset"}),"): [",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:(0,d.jsx)(l.code,{children:"ElementNode"})})," | ",(0,d.jsx)(l.code,{children:"null"}),", ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:(0,d.jsx)(l.code,{children:"ElementNode"})}),"]"]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-84",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"node"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:(0,d.jsx)(l.code,{children:"ElementNode"})})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"offset"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"number"})})]})]})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-94",children:"Returns"}),"\n",(0,d.jsxs)(l.p,{children:["[",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:(0,d.jsx)(l.code,{children:"ElementNode"})})," | ",(0,d.jsx)(l.code,{children:"null"}),", ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:(0,d.jsx)(l.code,{children:"ElementNode"})}),"]"]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-220",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalUtils.ts#L1708",children:"packages/lexical/src/LexicalUtils.ts:1708"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"updaterangeselectionfromcaretrange",children:"$updateRangeSelectionFromCaretRange"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"$updateRangeSelectionFromCaretRange"}),"(",(0,d.jsx)(l.code,{children:"selection"}),", ",(0,d.jsx)(l.code,{children:"caretRange"}),"): ",(0,d.jsx)(l.code,{children:"void"})]}),"\n",(0,d.jsx)(l.p,{children:"Update the points of a RangeSelection based on the given PointCaret."}),"\n",(0,d.jsx)(l.h4,{id:"parameters-85",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"selection"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.RangeSelection",children:(0,d.jsx)(l.code,{children:"RangeSelection"})})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"caretRange"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.CaretRange",children:(0,d.jsx)(l.code,{children:"CaretRange"})}),"<",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#caretdirection",children:(0,d.jsx)(l.code,{children:"CaretDirection"})}),">"]})]})]})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-95",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.code,{children:"void"})}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-221",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaretUtils.ts#L142",children:"packages/lexical/src/caret/LexicalCaretUtils.ts:142"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"buildimportmap",children:"buildImportMap"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"buildImportMap"}),"<",(0,d.jsx)(l.code,{children:"K"}),">(",(0,d.jsx)(l.code,{children:"importMap"}),"): ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#domconversionmap",children:(0,d.jsx)(l.code,{children:"DOMConversionMap"})})]}),"\n",(0,d.jsx)(l.p,{children:"An identity function that will infer the type of DOM nodes\nbased on tag names to make it easier to construct a\nDOMConversionMap."}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-64",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"K"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.code,{children:"string"})]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-86",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"importMap"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:"{ [NodeName in string]: DOMConversionPropByTagName<NodeName> }"})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-96",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#domconversionmap",children:(0,d.jsx)(l.code,{children:"DOMConversionMap"})})}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-222",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L335",children:"packages/lexical/src/LexicalNode.ts:335"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"createcommand",children:"createCommand"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"createCommand"}),"<",(0,d.jsx)(l.code,{children:"T"}),">(",(0,d.jsx)(l.code,{children:"type?"}),"): ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#lexicalcommand",children:(0,d.jsx)(l.code,{children:"LexicalCommand"})}),"<",(0,d.jsx)(l.code,{children:"T"}),">"]}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-65",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsx)(l.tr,{children:(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"})})}),(0,d.jsx)(l.tbody,{children:(0,d.jsx)(l.tr,{children:(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"T"})})})})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-87",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"type?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"string"})})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-97",children:"Returns"}),"\n",(0,d.jsxs)(l.p,{children:[(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#lexicalcommand",children:(0,d.jsx)(l.code,{children:"LexicalCommand"})}),"<",(0,d.jsx)(l.code,{children:"T"}),">"]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-223",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalCommands.ts#L17",children:"packages/lexical/src/LexicalCommands.ts:17"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"createeditor",children:"createEditor"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"createEditor"}),"(",(0,d.jsx)(l.code,{children:"editorConfig?"}),"): ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalEditor",children:(0,d.jsx)(l.code,{children:"LexicalEditor"})})]}),"\n",(0,d.jsx)(l.p,{children:"Creates a new LexicalEditor attached to a single contentEditable (provided in the config). This is\nthe lowest-level initialization API for a LexicalEditor. If you're using React or another framework,\nconsider using the appropriate abstractions, such as LexicalComposer"}),"\n",(0,d.jsx)(l.h4,{id:"parameters-88",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"editorConfig?"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#createeditorargs",children:(0,d.jsx)(l.code,{children:"CreateEditorArgs"})})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:"the editor configuration."})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-98",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalEditor",children:(0,d.jsx)(l.code,{children:"LexicalEditor"})})}),"\n",(0,d.jsx)(l.p,{children:"a LexicalEditor instance"}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-224",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalEditor.ts#L505",children:"packages/lexical/src/LexicalEditor.ts:505"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"createstate",children:"createState"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"createState"}),"<",(0,d.jsx)(l.code,{children:"K"}),", ",(0,d.jsx)(l.code,{children:"V"}),">(",(0,d.jsx)(l.code,{children:"key"}),", ",(0,d.jsx)(l.code,{children:"valueConfig"}),"): ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.StateConfig",children:(0,d.jsx)(l.code,{children:"StateConfig"})}),"<",(0,d.jsx)(l.code,{children:"K"}),", ",(0,d.jsx)(l.code,{children:"V"}),">"]}),"\n",(0,d.jsx)(l.p,{children:"Create a StateConfig for the given string key and StateValueConfig."}),"\n",(0,d.jsx)(l.p,{children:"The key must be locally unique. In dev you will get a key collision error\nwhen you use two separate StateConfig on the same node with the same key."}),"\n",(0,d.jsxs)(l.p,{children:["The returned StateConfig value should be used with ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#getstate",children:"$getState"})," and\n",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#setstate",children:"$setState"}),"."]}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-66",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"K"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.code,{children:"string"})]})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"V"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"V"})})]})]})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-89",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"key"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"K"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:"The key to use"})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"valueConfig"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.StateValueConfig",children:(0,d.jsx)(l.code,{children:"StateValueConfig"})}),"<",(0,d.jsx)(l.code,{children:"V"}),">"]}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:"Configuration for the value type"})]})]})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-99",children:"Returns"}),"\n",(0,d.jsxs)(l.p,{children:[(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.StateConfig",children:(0,d.jsx)(l.code,{children:"StateConfig"})}),"<",(0,d.jsx)(l.code,{children:"K"}),", ",(0,d.jsx)(l.code,{children:"V"}),">"]}),"\n",(0,d.jsx)(l.p,{children:"a StateConfig"}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-225",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNodeState.ts#L303",children:"packages/lexical/src/LexicalNodeState.ts:303"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"flipdirection-1",children:"flipDirection"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"flipDirection"}),"<",(0,d.jsx)(l.code,{children:"D"}),">(",(0,d.jsx)(l.code,{children:"direction"}),"): ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#flipdirection",children:(0,d.jsx)(l.code,{children:"FlipDirection"})}),"<",(0,d.jsx)(l.code,{children:"D"}),">"]}),"\n",(0,d.jsx)(l.p,{children:"Flip a direction ('next' -> 'previous'; 'previous' -> 'next')."}),"\n",(0,d.jsx)(l.p,{children:"Note that TypeScript can't prove that FlipDirection is its own\ninverse (but if you have a concrete 'next' or 'previous' it will\nsimplify accordingly)."}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-67",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"D"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#caretdirection",children:(0,d.jsx)(l.code,{children:"CaretDirection"})})]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-90",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"direction"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"D"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:"A direction"})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-100",children:"Returns"}),"\n",(0,d.jsxs)(l.p,{children:[(0,d.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#flipdirection",children:(0,d.jsx)(l.code,{children:"FlipDirection"})}),"<",(0,d.jsx)(l.code,{children:"D"}),">"]}),"\n",(0,d.jsx)(l.p,{children:"The opposite direction"}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-226",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L580",children:"packages/lexical/src/caret/LexicalCaret.ts:580"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"getdomownerdocument",children:"getDOMOwnerDocument"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"getDOMOwnerDocument"}),"(",(0,d.jsx)(l.code,{children:"target"}),"): ",(0,d.jsx)(l.code,{children:"Document"})," | ",(0,d.jsx)(l.code,{children:"null"})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-91",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"target"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.code,{children:"null"})," | ",(0,d.jsx)(l.code,{children:"EventTarget"})]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-101",children:"Returns"}),"\n",(0,d.jsxs)(l.p,{children:[(0,d.jsx)(l.code,{children:"Document"})," | ",(0,d.jsx)(l.code,{children:"null"})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-227",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalUtils.ts#L1326",children:"packages/lexical/src/LexicalUtils.ts:1326"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"getdomselection",children:"getDOMSelection"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"getDOMSelection"}),"(",(0,d.jsx)(l.code,{children:"targetWindow"}),"): ",(0,d.jsx)(l.code,{children:"null"})," | ",(0,d.jsx)(l.code,{children:"Selection"})]}),"\n",(0,d.jsx)(l.p,{children:"Returns the selection for the given window, or the global window if null.\nWill return null if CAN_USE_DOM is false."}),"\n",(0,d.jsx)(l.h4,{id:"parameters-92",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"targetWindow"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.code,{children:"null"})," | ",(0,d.jsx)(l.code,{children:"Window"})]}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:"The window to get the selection from"})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-102",children:"Returns"}),"\n",(0,d.jsxs)(l.p,{children:[(0,d.jsx)(l.code,{children:"null"})," | ",(0,d.jsx)(l.code,{children:"Selection"})]}),"\n",(0,d.jsx)(l.p,{children:"a Selection or null"}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-228",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalUtils.ts#L1691",children:"packages/lexical/src/LexicalUtils.ts:1691"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"getdomselectionfromtarget",children:"getDOMSelectionFromTarget"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"getDOMSelectionFromTarget"}),"(",(0,d.jsx)(l.code,{children:"eventTarget"}),"): ",(0,d.jsx)(l.code,{children:"null"})," | ",(0,d.jsx)(l.code,{children:"Selection"})]}),"\n",(0,d.jsx)(l.p,{children:"Returns the selection for the defaultView of the ownerDocument of given EventTarget."}),"\n",(0,d.jsx)(l.h4,{id:"parameters-93",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"eventTarget"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.code,{children:"null"})," | ",(0,d.jsx)(l.code,{children:"EventTarget"})]}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:"The node to get the selection from"})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-103",children:"Returns"}),"\n",(0,d.jsxs)(l.p,{children:[(0,d.jsx)(l.code,{children:"null"})," | ",(0,d.jsx)(l.code,{children:"Selection"})]}),"\n",(0,d.jsx)(l.p,{children:"a Selection or null"}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-229",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalUtils.ts#L1701",children:"packages/lexical/src/LexicalUtils.ts:1701"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"getdomtextnode",children:"getDOMTextNode"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"getDOMTextNode"}),"(",(0,d.jsx)(l.code,{children:"element"}),"): ",(0,d.jsx)(l.code,{children:"Text"})," | ",(0,d.jsx)(l.code,{children:"null"})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-94",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"element"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.code,{children:"null"})," | ",(0,d.jsx)(l.code,{children:"Node"})]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-104",children:"Returns"}),"\n",(0,d.jsxs)(l.p,{children:[(0,d.jsx)(l.code,{children:"Text"})," | ",(0,d.jsx)(l.code,{children:"null"})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-230",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalUtils.ts#L253",children:"packages/lexical/src/LexicalUtils.ts:253"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"getnearesteditorfromdomnode",children:"getNearestEditorFromDOMNode"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"getNearestEditorFromDOMNode"}),"(",(0,d.jsx)(l.code,{children:"node"}),"): ",(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalEditor",children:(0,d.jsx)(l.code,{children:"LexicalEditor"})})," | ",(0,d.jsx)(l.code,{children:"null"})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-95",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"node"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.code,{children:"null"})," | ",(0,d.jsx)(l.code,{children:"Node"})]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-105",children:"Returns"}),"\n",(0,d.jsxs)(l.p,{children:[(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalEditor",children:(0,d.jsx)(l.code,{children:"LexicalEditor"})})," | ",(0,d.jsx)(l.code,{children:"null"})]}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-231",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalUtils.ts#L193",children:"packages/lexical/src/LexicalUtils.ts:193"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"isblockdomnode",children:"isBlockDomNode"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"isBlockDomNode"}),"(",(0,d.jsx)(l.code,{children:"node"}),"): ",(0,d.jsx)(l.code,{children:"boolean"})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-96",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"node"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"Node"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:"the Dom Node to check"})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-106",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.code,{children:"boolean"})}),"\n",(0,d.jsx)(l.p,{children:"if the Dom Node is a block node"}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-232",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalUtils.ts#L1828",children:"packages/lexical/src/LexicalUtils.ts:1828"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"iscurrentlyreadonlymode",children:"isCurrentlyReadOnlyMode"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"isCurrentlyReadOnlyMode"}),"(): ",(0,d.jsx)(l.code,{children:"boolean"})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-107",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.code,{children:"boolean"})}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-233",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalUpdates.ts#L79",children:"packages/lexical/src/LexicalUpdates.ts:79"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"isdomdocumentnode",children:"isDOMDocumentNode"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"isDOMDocumentNode"}),"(",(0,d.jsx)(l.code,{children:"node"}),"): node is Document"]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-97",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"node"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"unknown"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:"The element being tested"})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-108",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:"node is Document"}),"\n",(0,d.jsx)(l.p,{children:"Returns true if node is an DOM Document node, false otherwise."}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-234",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalUtils.ts#L249",children:"packages/lexical/src/LexicalUtils.ts:249"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"isdomnode",children:"isDOMNode"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"isDOMNode"}),"(",(0,d.jsx)(l.code,{children:"x"}),"): x is Node"]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-98",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"x"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"unknown"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:"The element being tested"})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-109",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:"x is Node"}),"\n",(0,d.jsx)(l.p,{children:"Returns true if x is a DOM Node, false otherwise."}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-235",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalUtils.ts#L1793",children:"packages/lexical/src/LexicalUtils.ts:1793"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"isdomtextnode",children:"isDOMTextNode"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"isDOMTextNode"}),"(",(0,d.jsx)(l.code,{children:"node"}),"): node is Text"]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-99",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"node"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"unknown"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:"The element being tested"})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-110",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:"node is Text"}),"\n",(0,d.jsx)(l.p,{children:"Returns true if node is an DOM Text node, false otherwise."}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-236",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalUtils.ts#L241",children:"packages/lexical/src/LexicalUtils.ts:241"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"isdocumentfragment",children:"isDocumentFragment"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"isDocumentFragment"}),"(",(0,d.jsx)(l.code,{children:"x"}),"): x is DocumentFragment"]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-100",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"x"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"unknown"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:"The element being testing"})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-111",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:"x is DocumentFragment"}),"\n",(0,d.jsx)(l.p,{children:"Returns true if x is a document fragment, false otherwise."}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-237",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalUtils.ts#L1806",children:"packages/lexical/src/LexicalUtils.ts:1806"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"isexactshortcutmatch",children:"isExactShortcutMatch"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"isExactShortcutMatch"}),"(",(0,d.jsx)(l.code,{children:"event"}),", ",(0,d.jsx)(l.code,{children:"expectedKey"}),", ",(0,d.jsx)(l.code,{children:"mask"}),"): ",(0,d.jsx)(l.code,{children:"boolean"})]}),"\n",(0,d.jsx)(l.p,{children:"Match a KeyboardEvent with its expected state"}),"\n",(0,d.jsx)(l.h4,{id:"parameters-101",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"event"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"KeyboardEventModifiers"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:"A KeyboardEvent, or structurally similar object"})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"expectedKey"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"string"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:"The string to compare with event.key (case insensitive)"})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"mask"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"KeyboardEventModifierMask"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:"An object specifying the expected state of the modifiers"})]})]})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-112",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.code,{children:"boolean"})}),"\n",(0,d.jsx)(l.p,{children:"true if the event matches"}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-238",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalUtils.ts#L946",children:"packages/lexical/src/LexicalUtils.ts:946"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"ishtmlanchorelement",children:"isHTMLAnchorElement"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"isHTMLAnchorElement"}),"(",(0,d.jsx)(l.code,{children:"x"}),"): x is HTMLAnchorElement"]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-102",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"x"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"unknown"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:"The element being tested"})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-113",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:"x is HTMLAnchorElement"}),"\n",(0,d.jsx)(l.p,{children:"Returns true if x is an HTML anchor tag, false otherwise"}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-239",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalUtils.ts#L1777",children:"packages/lexical/src/LexicalUtils.ts:1777"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"ishtmlelement",children:"isHTMLElement"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"isHTMLElement"}),"(",(0,d.jsx)(l.code,{children:"x"}),"): x is HTMLElement"]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-103",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"x"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"unknown"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:"The element being tested"})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-114",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:"x is HTMLElement"}),"\n",(0,d.jsx)(l.p,{children:"Returns true if x is an HTML element, false otherwise."}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-240",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalUtils.ts#L1785",children:"packages/lexical/src/LexicalUtils.ts:1785"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"isinlinedomnode",children:"isInlineDomNode"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"isInlineDomNode"}),"(",(0,d.jsx)(l.code,{children:"node"}),"): ",(0,d.jsx)(l.code,{children:"boolean"})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-104",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"node"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"Node"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:"the Dom Node to check"})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-115",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.code,{children:"boolean"})}),"\n",(0,d.jsx)(l.p,{children:"if the Dom Node is an inline node"}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-241",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalUtils.ts#L1815",children:"packages/lexical/src/LexicalUtils.ts:1815"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"islexicaleditor",children:"isLexicalEditor"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"isLexicalEditor"}),"(",(0,d.jsx)(l.code,{children:"editor"}),"): editor is LexicalEditor"]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-105",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"editor"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"unknown"})})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-116",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:"editor is LexicalEditor"}),"\n",(0,d.jsx)(l.p,{children:"true if the given argument is a LexicalEditor instance from this build of Lexical"}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-242",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalUtils.ts#L188",children:"packages/lexical/src/LexicalUtils.ts:188"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"ismodifiermatch",children:"isModifierMatch"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"isModifierMatch"}),"(",(0,d.jsx)(l.code,{children:"event"}),", ",(0,d.jsx)(l.code,{children:"mask"}),"): ",(0,d.jsx)(l.code,{children:"boolean"})]}),"\n",(0,d.jsx)(l.p,{children:"Match a KeyboardEvent with its expected modifier state"}),"\n",(0,d.jsx)(l.h4,{id:"parameters-106",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"event"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"KeyboardEventModifiers"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:"A KeyboardEvent, or structurally similar object"})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"mask"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"KeyboardEventModifierMask"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:"An object specifying the expected state of the modifiers"})]})]})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-117",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.code,{children:"boolean"})}),"\n",(0,d.jsx)(l.p,{children:"true if the event matches"}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-243",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalUtils.ts#L926",children:"packages/lexical/src/LexicalUtils.ts:926"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"isselectioncapturedindecoratorinput",children:"isSelectionCapturedInDecoratorInput"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"isSelectionCapturedInDecoratorInput"}),"(",(0,d.jsx)(l.code,{children:"anchorDOM"}),"): ",(0,d.jsx)(l.code,{children:"boolean"})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-107",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"anchorDOM"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"Node"})})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-118",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.code,{children:"boolean"})}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-244",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalUtils.ts#L147",children:"packages/lexical/src/LexicalUtils.ts:147"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"isselectionwithineditor",children:"isSelectionWithinEditor"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"isSelectionWithinEditor"}),"(",(0,d.jsx)(l.code,{children:"editor"}),", ",(0,d.jsx)(l.code,{children:"anchorDOM"}),", ",(0,d.jsx)(l.code,{children:"focusDOM"}),"): ",(0,d.jsx)(l.code,{children:"boolean"})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-108",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"editor"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalEditor",children:(0,d.jsx)(l.code,{children:"LexicalEditor"})})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"anchorDOM"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.code,{children:"null"})," | ",(0,d.jsx)(l.code,{children:"Node"})]})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"focusDOM"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.code,{children:"null"})," | ",(0,d.jsx)(l.code,{children:"Node"})]})]})]})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-119",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.code,{children:"boolean"})}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-245",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalUtils.ts#L164",children:"packages/lexical/src/LexicalUtils.ts:164"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"makestepwiseiterator",children:"makeStepwiseIterator"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"makeStepwiseIterator"}),"<",(0,d.jsx)(l.code,{children:"State"}),", ",(0,d.jsx)(l.code,{children:"Stop"}),", ",(0,d.jsx)(l.code,{children:"Value"}),">(",(0,d.jsx)(l.code,{children:"config"}),"): ",(0,d.jsx)(l.code,{children:"IterableIterator"}),"<",(0,d.jsx)(l.code,{children:"Value"}),">"]}),"\n",(0,d.jsx)(l.p,{children:"A generalized utility for creating a stepwise iterator\nbased on:"}),"\n",(0,d.jsxs)(l.ul,{children:["\n",(0,d.jsx)(l.li,{children:"an initial state"}),"\n",(0,d.jsx)(l.li,{children:"a stop guard that returns true if the iteration is over, this\nis typically used to detect a sentinel value such as null or\nundefined from the state but may return true for other conditions\nas well"}),"\n",(0,d.jsx)(l.li,{children:"a step function that advances the state (this will be called\nafter map each time next() is called to prepare the next state)"}),"\n",(0,d.jsx)(l.li,{children:"a map function that will be called that may transform the state\nbefore returning it. It will only be called once for each next()\ncall when stop(state) === false"}),"\n"]}),"\n",(0,d.jsx)(l.h4,{id:"type-parameters-68",children:"Type parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsx)(l.tr,{children:(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"})})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsx)(l.tr,{children:(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"State"})})}),(0,d.jsx)(l.tr,{children:(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"Stop"})})}),(0,d.jsx)(l.tr,{children:(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"Value"})})})]})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-109",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsx)(l.tbody,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"config"})}),(0,d.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,d.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.StepwiseIteratorConfig",children:(0,d.jsx)(l.code,{children:"StepwiseIteratorConfig"})}),"<",(0,d.jsx)(l.code,{children:"State"}),", ",(0,d.jsx)(l.code,{children:"Stop"}),", ",(0,d.jsx)(l.code,{children:"Value"}),">"]})]})})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-120",children:"Returns"}),"\n",(0,d.jsxs)(l.p,{children:[(0,d.jsx)(l.code,{children:"IterableIterator"}),"<",(0,d.jsx)(l.code,{children:"Value"}),">"]}),"\n",(0,d.jsx)(l.p,{children:"An IterableIterator"}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-246",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L1183",children:"packages/lexical/src/caret/LexicalCaret.ts:1183"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"resetrandomkey",children:"resetRandomKey"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"resetRandomKey"}),"(): ",(0,d.jsx)(l.code,{children:"void"})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-121",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.code,{children:"void"})}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-247",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalUtils.ts#L101",children:"packages/lexical/src/LexicalUtils.ts:101"})}),"\n",(0,d.jsx)(l.hr,{}),"\n",(0,d.jsx)(l.h3,{id:"setnodeindentfromdom",children:"setNodeIndentFromDOM"}),"\n",(0,d.jsxs)(l.p,{children:["\u25B8 ",(0,d.jsx)(l.strong,{children:"setNodeIndentFromDOM"}),"(",(0,d.jsx)(l.code,{children:"elementDom"}),", ",(0,d.jsx)(l.code,{children:"elementNode"}),"): ",(0,d.jsx)(l.code,{children:"void"})]}),"\n",(0,d.jsx)(l.h4,{id:"parameters-110",children:"Parameters"}),"\n",(0,d.jsxs)(l.table,{children:[(0,d.jsx)(l.thead,{children:(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,d.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,d.jsxs)(l.tbody,{children:[(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"elementDom"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"HTMLElement"})})]}),(0,d.jsxs)(l.tr,{children:[(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.code,{children:"elementNode"})}),(0,d.jsx)(l.td,{style:{textAlign:"left"},children:(0,d.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:(0,d.jsx)(l.code,{children:"ElementNode"})})})]})]})]}),"\n",(0,d.jsx)(l.h4,{id:"returns-122",children:"Returns"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.code,{children:"void"})}),"\n",(0,d.jsx)(l.h4,{id:"defined-in-248",children:"Defined in"}),"\n",(0,d.jsx)(l.p,{children:(0,d.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalUtils.ts#L1970",children:"packages/lexical/src/LexicalUtils.ts:1970"})})]})}function h(e={}){let{wrapper:l}={...(0,s.a)(),...e.components};return l?(0,d.jsx)(l,{...e,children:(0,d.jsx)(x,{...e})}):x(e)}},22840:function(e,l,i){i.d(l,{Z:()=>c,a:()=>t});var n=i(2784);let d={},s=n.createContext(d);function t(e){let l=n.useContext(s);return n.useMemo(function(){return"function"==typeof e?e(l):{...l,...e}},[l,e])}function c(e){let l;return l=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:t(e.components),n.createElement(s.Provider,{value:l},e.children)}}}]);