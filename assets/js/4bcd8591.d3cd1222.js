"use strict";(self.webpackChunk_lexical_website=self.webpackChunk_lexical_website||[]).push([["1864"],{50500:function(e,t,n){n.r(t),n.d(t,{frontMatter:()=>c,default:()=>u,contentTitle:()=>s,assets:()=>r,toc:()=>l,metadata:()=>i});var i=JSON.parse('{"id":"react/create_plugin","title":"Creating a React Plugin","description":"In addition to using the Lexical React plugins offered by the core library, you can make your own plugins to extend or alter Lexical\'s functionality to suit your own use cases.","source":"@site/docs/react/create_plugin.md","sourceDirName":"react","slug":"/react/create_plugin","permalink":"/docs/react/create_plugin","draft":false,"unlisted":false,"editUrl":"https://github.com/QubitPi/lexical/tree/main/packages/lexical-website/docs/react/create_plugin.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Lexical Plugins","permalink":"/docs/react/plugins"},"next":{"title":"React FAQ","permalink":"/docs/react/faq"}}'),a=n(52322),o=n(22840);let c={},s="Creating a React Plugin",r={},l=[];function d(e){let t={a:"a",code:"code",h1:"h1",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"creating-a-react-plugin",children:"Creating a React Plugin"})}),"\n",(0,a.jsx)(t.p,{children:"In addition to using the Lexical React plugins offered by the core library, you can make your own plugins to extend or alter Lexical's functionality to suit your own use cases."}),"\n",(0,a.jsx)(t.p,{children:"Lexical's React plugin interface is simple - just create a React component and add it as a child of your LexicalComposer component:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsx",children:" <LexicalComposer>\n    <MyLexicalPlugin>\n </LexicalComposer>\n"})}),"\n",(0,a.jsxs)(t.p,{children:["If the Plugin introduces new nodes, they have to be registered in ",(0,a.jsx)(t.code,{children:"initialConfig.nodes"}),":"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:"const initialConfig = {\n  namespace: 'MyEditor',\n  nodes: [MyLexicalNode],\n};\n"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsx",children:" <LexicalComposer initialConfig={initialConfig}>\n    <MyLexicalPlugin>\n </LexicalComposer>\n"})}),"\n",(0,a.jsx)(t.p,{children:"LexicalComposer provides access to the underlying LexicalEditor instance via React Context:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsx",children:"//MyLexicalPlugin.js\n\nexport function MyLexicalPlugin(props) {\n    const [editor] = useLexicalComposerContext();\n    ...\n}\n"})}),"\n",(0,a.jsxs)(t.p,{children:["With access to the Editor, your plugin can extend Lexical via ",(0,a.jsx)(t.a,{href:"/docs/concepts/commands",children:"Commands"}),", ",(0,a.jsx)(t.a,{href:"/docs/concepts/transforms",children:"Transforms"}),", or other APIs. For example, the ",(0,a.jsx)(t.a,{href:"https://github.com/facebook/lexical/blob/0775ab929e65723433626fa8c25900941e7f232f/packages/lexical-playground/src/plugins/TwitterPlugin/index.ts#L18",children:"TwitterPlugin"})," embeds a tweet into the editor, fetching the data asynchronously from Twitter based on the provided Tweet ID:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsx",children:"export const INSERT_TWEET_COMMAND: LexicalCommand<string> = createCommand();\n\nexport default function TwitterPlugin(): JSX.Element | null {\n  const [editor] = useLexicalComposerContext();\n\n  useEffect(() => {\n    if (!editor.hasNodes([TweetNode])) {\n      throw new Error('TwitterPlugin: TweetNode not registered on editor (initialConfig.nodes)');\n    }\n\n    return editor.registerCommand<string>(\n      INSERT_TWEET_COMMAND,\n      (payload) => {\n        const tweetNode = $createTweetNode(payload);\n        $insertNodeToNearestRoot(tweetNode);\n\n        return true;\n      },\n      COMMAND_PRIORITY_EDITOR,\n    );\n  }, [editor]);\n\n  return null;\n}\n"})}),"\n",(0,a.jsx)(t.p,{children:"TwitterPlugin is just a React component that accesses the Lexical editor via React Context (useLexicalComposerContext). Using the LexicalEditor instance, this plugin does two things:"}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsx)(t.li,{children:"Verifies that there is a TweetNode registered on the editor (if you forget to register the node, you can't do #2)"}),"\n",(0,a.jsx)(t.li,{children:'registers a "command", passing a callback that will run when that command is dispatched. The command callback creates and inserts a TweetNode in the editor.'}),"\n"]}),"\n",(0,a.jsxs)(t.p,{children:["You can see how ",(0,a.jsx)(t.a,{href:"https://github.com/facebook/lexical/blob/0775ab929e65723433626fa8c25900941e7f232f/packages/lexical-playground/src/Editor.tsx#L137",children:"TwitterPlugin is used in the playground"}),". It's added as a child of a LexicalComposer component, which does the job of providing the Context necessary for access to the editor instance. To actually trigger this command callback and insert a ",(0,a.jsx)(t.a,{href:"https://github.com/facebook/lexical/blob/b0fa38615c03f1c4fc7c8c5ea26412b723770e55/packages/lexical-playground/src/nodes/TweetNode.tsx#L212",children:"TweetNode"}),", we have a ",(0,a.jsx)(t.a,{href:"https://github.com/facebook/lexical/blob/b0fa38615c03f1c4fc7c8c5ea26412b723770e55/packages/lexical-playground/src/plugins/ToolbarPlugin.tsx#L534",children:"button"}),' that "dispatches" the Tweet command we registered in the plugin.']}),"\n",(0,a.jsxs)(t.p,{children:["While the TwitterPlugin registers a command that inserts a custom node, this is only one example of what can be done with a plugin. To get a better idea of what's possible, take a look at the ",(0,a.jsx)(t.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical-playground/src/plugins",children:"plugins defined in the playground"}),"."]})]})}function u(e={}){let{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},22840:function(e,t,n){n.d(t,{Z:()=>s,a:()=>c});var i=n(2784);let a={},o=i.createContext(a);function c(e){let t=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:c(e.components),i.createElement(o.Provider,{value:t},e.children)}}}]);