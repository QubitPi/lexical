"use strict";(self.webpackChunk_lexical_website=self.webpackChunk_lexical_website||[]).push([["375"],{85782:function(e,t,n){n.r(t),n.d(t,{frontMatter:()=>a,default:()=>p,contentTitle:()=>l,assets:()=>d,toc:()=>s,metadata:()=>r});var r=JSON.parse('{"id":"getting-started/theming","title":"Theming","description":"Lexical tries to make theming straight-forward, by providing a way of passing a customizable theming object that maps CSS class names to the editor on creation. Here\'s an example of a plain-text theme:","source":"@site/docs/getting-started/theming.md","sourceDirName":"getting-started","slug":"/getting-started/theming","permalink":"/lexical/docs/getting-started/theming","draft":false,"unlisted":false,"editUrl":"https://github.com/QubitPi/lexical/tree/main/packages/lexical-website/docs/getting-started/theming.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"docs","previous":{"title":"Getting Started with React","permalink":"/lexical/docs/getting-started/react"},"next":{"title":"Supported Browsers","permalink":"/lexical/docs/getting-started/supported-browsers"}}'),i=n(52322),o=n(22840);let a={sidebar_position:3},l="Theming",d={},s=[];function c(e){let t={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"theming",children:"Theming"})}),"\n",(0,i.jsx)(t.p,{children:"Lexical tries to make theming straight-forward, by providing a way of passing a customizable theming object that maps CSS class names to the editor on creation. Here's an example of a plain-text theme:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"const exampleTheme = {\n  ltr: 'ltr',\n  rtl: 'rtl',\n  paragraph: 'editor-paragraph',\n};\n"})}),"\n",(0,i.jsx)(t.p,{children:"In your CSS, you can then add something like:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-css",children:".ltr {\n  text-align: left;\n}\n\n.rtl {\n  text-align: right;\n}\n\n.editor-placeholder {\n  color: #999;\n  overflow: hidden;\n  position: absolute;\n  top: 15px;\n  left: 15px;\n  user-select: none;\n  pointer-events: none;\n}\n\n.editor-paragraph {\n  margin: 0 0 15px 0;\n  position: relative;\n}\n"})}),"\n",(0,i.jsxs)(t.p,{children:["To apply it, you need to pass it to your editor instance. If you're using a framework like React, this is done by\npassing it as a property of the ",(0,i.jsx)(t.code,{children:"initialConfig"})," to ",(0,i.jsx)(t.code,{children:"<LexicalComposer>"}),", like shown:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-jsx",children:"import {LexicalComposer} from '@lexical/react/LexicalComposer';\nimport {PlainTextPlugin} from '@lexical/react/LexicalPlainTextPlugin';\nimport {ContentEditable} from '@lexical/react/LexicalContentEditable';\nimport {exampleTheme} from './exampleTheme';\nimport {LexicalErrorBoundary} from '@lexical/react/LexicalErrorBoundary';\n\nconst initialConfig = {namespace: 'MyEditor', theme: exampleTheme};\n\nexport default function Editor() {\n  return (\n    <LexicalComposer initialConfig={initialConfig}>\n      <PlainTextPlugin\n        contentEditable={\n          <ContentEditable\n            aria-placeholder={'Enter some text...'}\n            placeholder={<div className=\"editor-placeholder\">Enter some text...</div>}\n          />\n        }\n        ErrorBoundary={LexicalErrorBoundary}\n      />\n    </LexicalComposer>\n  );\n}\n"})}),"\n",(0,i.jsxs)(t.p,{children:["If you are using vanilla JS, you can pass it to the ",(0,i.jsx)(t.code,{children:"createEditor()"})," function, like shown:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"import {createEditor} from 'lexical';\n\nconst editor = createEditor({\n  namespace: 'MyEditor',\n  theme: exampleTheme,\n});\n"})}),"\n",(0,i.jsx)(t.p,{children:"Many of the Lexical's core nodes also accept theming properties. Here's a more comprehensive theming object:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"const exampleTheme = {\n  ltr: 'ltr',\n  rtl: 'rtl',\n  paragraph: 'editor-paragraph',\n  quote: 'editor-quote',\n  heading: {\n    h1: 'editor-heading-h1',\n    h2: 'editor-heading-h2',\n    h3: 'editor-heading-h3',\n    h4: 'editor-heading-h4',\n    h5: 'editor-heading-h5',\n    h6: 'editor-heading-h6',\n  },\n  list: {\n    nested: {\n      listitem: 'editor-nested-listitem',\n    },\n    ol: 'editor-list-ol',\n    ul: 'editor-list-ul',\n    listitem: 'editor-listItem',\n    listitemChecked: 'editor-listItemChecked',\n    listitemUnchecked: 'editor-listItemUnchecked',\n  },\n  hashtag: 'editor-hashtag',\n  image: 'editor-image',\n  link: 'editor-link',\n  text: {\n    bold: 'editor-textBold',\n    code: 'editor-textCode',\n    italic: 'editor-textItalic',\n    strikethrough: 'editor-textStrikethrough',\n    subscript: 'editor-textSubscript',\n    superscript: 'editor-textSuperscript',\n    underline: 'editor-textUnderline',\n    underlineStrikethrough: 'editor-textUnderlineStrikethrough',\n  },\n  code: 'editor-code',\n  codeHighlight: {\n    atrule: 'editor-tokenAttr',\n    attr: 'editor-tokenAttr',\n    boolean: 'editor-tokenProperty',\n    builtin: 'editor-tokenSelector',\n    cdata: 'editor-tokenComment',\n    char: 'editor-tokenSelector',\n    class: 'editor-tokenFunction',\n    'class-name': 'editor-tokenFunction',\n    comment: 'editor-tokenComment',\n    constant: 'editor-tokenProperty',\n    deleted: 'editor-tokenProperty',\n    doctype: 'editor-tokenComment',\n    entity: 'editor-tokenOperator',\n    function: 'editor-tokenFunction',\n    important: 'editor-tokenVariable',\n    inserted: 'editor-tokenSelector',\n    keyword: 'editor-tokenAttr',\n    namespace: 'editor-tokenVariable',\n    number: 'editor-tokenProperty',\n    operator: 'editor-tokenOperator',\n    prolog: 'editor-tokenComment',\n    property: 'editor-tokenProperty',\n    punctuation: 'editor-tokenPunctuation',\n    regex: 'editor-tokenVariable',\n    selector: 'editor-tokenSelector',\n    string: 'editor-tokenSelector',\n    symbol: 'editor-tokenProperty',\n    tag: 'editor-tokenProperty',\n    url: 'editor-tokenOperator',\n    variable: 'editor-tokenVariable',\n  },\n};\n"})})]})}function p(e={}){let{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},22840:function(e,t,n){n.d(t,{Z:()=>l,a:()=>a});var r=n(2784);let i={},o=r.createContext(i);function a(e){let t=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(o.Provider,{value:t},e.children)}}}]);