"use strict";(self.webpackChunk_lexical_website=self.webpackChunk_lexical_website||[]).push([["4273"],{75194:function(e,l,i){i.r(l),i.d(l,{frontMatter:()=>r,default:()=>h,contentTitle:()=>t,assets:()=>c,toc:()=>o,metadata:()=>s});var s=JSON.parse('{"id":"api/classes/lexical.RootNode","title":"Class: RootNode","description":"lexical.RootNode","source":"@site/docs/api/classes/lexical.RootNode.md","sourceDirName":"api/classes","slug":"/api/classes/lexical.RootNode","permalink":"/docs/api/classes/lexical.RootNode","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","frontMatter":{"id":"lexical.RootNode","title":"Class: RootNode","custom_edit_url":null},"sidebar":"api","previous":{"title":"RangeSelection","permalink":"/docs/api/classes/lexical.RangeSelection"},"next":{"title":"StateConfig","permalink":"/docs/api/classes/lexical.StateConfig"}}'),n=i(52322),d=i(22840);let r={id:"lexical.RootNode",title:"Class: RootNode",custom_edit_url:null},t=void 0,c={},o=[{value:"Hierarchy",id:"hierarchy",level:2},{value:"Constructors",id:"constructors",level:2},{value:"constructor",id:"constructor",level:3},{value:"Returns",id:"returns",level:4},{value:"Overrides",id:"overrides",level:4},{value:"Defined in",id:"defined-in",level:4},{value:"Methods",id:"methods",level:2},{value:"collapseAtStart",id:"collapseatstart",level:3},{value:"Returns",id:"returns-1",level:4},{value:"Overrides",id:"overrides-1",level:4},{value:"Defined in",id:"defined-in-1",level:4},{value:"getTextContent",id:"gettextcontent",level:3},{value:"Returns",id:"returns-2",level:4},{value:"Overrides",id:"overrides-2",level:4},{value:"Defined in",id:"defined-in-2",level:4},{value:"getTopLevelElementOrThrow",id:"gettoplevelelementorthrow",level:3},{value:"Returns",id:"returns-3",level:4},{value:"Overrides",id:"overrides-3",level:4},{value:"Defined in",id:"defined-in-3",level:4},{value:"insertAfter",id:"insertafter",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns-4",level:4},{value:"Overrides",id:"overrides-4",level:4},{value:"Defined in",id:"defined-in-4",level:4},{value:"insertBefore",id:"insertbefore",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-5",level:4},{value:"Overrides",id:"overrides-5",level:4},{value:"Defined in",id:"defined-in-5",level:4},{value:"remove",id:"remove",level:3},{value:"Returns",id:"returns-6",level:4},{value:"Overrides",id:"overrides-6",level:4},{value:"Defined in",id:"defined-in-6",level:4},{value:"replace",id:"replace",level:3},{value:"Type parameters",id:"type-parameters",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-7",level:4},{value:"Overrides",id:"overrides-7",level:4},{value:"Defined in",id:"defined-in-7",level:4},{value:"splice",id:"splice",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-8",level:4},{value:"Overrides",id:"overrides-8",level:4},{value:"Defined in",id:"defined-in-8",level:4},{value:"updateDOM",id:"updatedom",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-9",level:4},{value:"Overrides",id:"overrides-9",level:4},{value:"Defined in",id:"defined-in-9",level:4},{value:"clone",id:"clone",level:3},{value:"Returns",id:"returns-10",level:4},{value:"Overrides",id:"overrides-10",level:4},{value:"Defined in",id:"defined-in-10",level:4},{value:"getType",id:"gettype",level:3},{value:"Returns",id:"returns-11",level:4},{value:"Overrides",id:"overrides-11",level:4},{value:"Defined in",id:"defined-in-11",level:4},{value:"importJSON",id:"importjson",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-12",level:4},{value:"Overrides",id:"overrides-12",level:4},{value:"Defined in",id:"defined-in-12",level:4}];function a(e){let l={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,d.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/modules/lexical",children:"lexical"}),".RootNode"]}),"\n",(0,n.jsx)(l.h2,{id:"hierarchy",children:"Hierarchy"}),"\n",(0,n.jsxs)(l.ul,{children:["\n",(0,n.jsxs)(l.li,{children:["\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode",children:(0,n.jsx)(l.code,{children:"ElementNode"})})}),"\n",(0,n.jsxs)(l.p,{children:["\u21B3 ",(0,n.jsx)(l.strong,{children:(0,n.jsx)(l.code,{children:"RootNode"})})]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(l.h2,{id:"constructors",children:"Constructors"}),"\n",(0,n.jsx)(l.h3,{id:"constructor",children:"constructor"}),"\n",(0,n.jsxs)(l.p,{children:["\u2022 ",(0,n.jsx)(l.strong,{children:"new RootNode"}),"(): ",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.RootNode",children:(0,n.jsx)(l.code,{children:"RootNode"})})]}),"\n",(0,n.jsx)(l.h4,{id:"returns",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.RootNode",children:(0,n.jsx)(l.code,{children:"RootNode"})})}),"\n",(0,n.jsx)(l.h4,{id:"overrides",children:"Overrides"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode#constructor",children:"constructor"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/nodes/LexicalRootNode.ts#L37",children:"packages/lexical/src/nodes/LexicalRootNode.ts:37"})}),"\n",(0,n.jsx)(l.h2,{id:"methods",children:"Methods"}),"\n",(0,n.jsx)(l.h3,{id:"collapseatstart",children:"collapseAtStart"}),"\n",(0,n.jsxs)(l.p,{children:["\u25B8 ",(0,n.jsx)(l.strong,{children:"collapseAtStart"}),"(): ",(0,n.jsx)(l.code,{children:"true"})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-1",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"true"})}),"\n",(0,n.jsx)(l.h4,{id:"overrides-1",children:"Overrides"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode#collapseatstart",children:"collapseAtStart"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-1",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/nodes/LexicalRootNode.ts#L104",children:"packages/lexical/src/nodes/LexicalRootNode.ts:104"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"gettextcontent",children:"getTextContent"}),"\n",(0,n.jsxs)(l.p,{children:["\u25B8 ",(0,n.jsx)(l.strong,{children:"getTextContent"}),"(): ",(0,n.jsx)(l.code,{children:"string"})]}),"\n",(0,n.jsx)(l.p,{children:"Returns the text content of the node. Override this for\ncustom nodes that should have a representation in plain text\nformat (for copy + paste, for example)"}),"\n",(0,n.jsx)(l.h4,{id:"returns-2",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"string"})}),"\n",(0,n.jsx)(l.h4,{id:"overrides-2",children:"Overrides"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode#gettextcontent",children:"getTextContent"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-2",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/nodes/LexicalRootNode.ts#L49",children:"packages/lexical/src/nodes/LexicalRootNode.ts:49"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"gettoplevelelementorthrow",children:"getTopLevelElementOrThrow"}),"\n",(0,n.jsxs)(l.p,{children:["\u25B8 ",(0,n.jsx)(l.strong,{children:"getTopLevelElementOrThrow"}),"(): ",(0,n.jsx)(l.code,{children:"never"})]}),"\n",(0,n.jsxs)(l.p,{children:["Returns the highest (in the EditorState tree)\nnon-root ancestor of this node, or throws if none is found. See ",(0,n.jsx)(l.a,{href:"/docs/api/modules/lexical#isrootorshadowroot",children:"$isRootOrShadowRoot"}),'\nfor more information on which Elements comprise "roots".']}),"\n",(0,n.jsx)(l.h4,{id:"returns-3",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"never"})}),"\n",(0,n.jsx)(l.h4,{id:"overrides-3",children:"Overrides"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode#gettoplevelelementorthrow",children:"getTopLevelElementOrThrow"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-3",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/nodes/LexicalRootNode.ts#L42",children:"packages/lexical/src/nodes/LexicalRootNode.ts:42"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"insertafter",children:"insertAfter"}),"\n",(0,n.jsxs)(l.p,{children:["\u25B8 ",(0,n.jsx)(l.strong,{children:"insertAfter"}),"(",(0,n.jsx)(l.code,{children:"nodeToInsert"}),"): ",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(l.code,{children:"LexicalNode"})})]}),"\n",(0,n.jsx)(l.p,{children:"Inserts a node after this LexicalNode (as the next sibling)."}),"\n",(0,n.jsx)(l.h4,{id:"parameters",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,n.jsx)(l.tbody,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"nodeToInsert"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(l.code,{children:"LexicalNode"})})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:"The node to insert after this one."})]})})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-4",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(l.code,{children:"LexicalNode"})})}),"\n",(0,n.jsx)(l.h4,{id:"overrides-4",children:"Overrides"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode#insertafter",children:"insertAfter"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-4",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/nodes/LexicalRootNode.ts#L74",children:"packages/lexical/src/nodes/LexicalRootNode.ts:74"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"insertbefore",children:"insertBefore"}),"\n",(0,n.jsxs)(l.p,{children:["\u25B8 ",(0,n.jsx)(l.strong,{children:"insertBefore"}),"(",(0,n.jsx)(l.code,{children:"nodeToInsert"}),"): ",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(l.code,{children:"LexicalNode"})})]}),"\n",(0,n.jsx)(l.p,{children:"Inserts a node before this LexicalNode (as the previous sibling)."}),"\n",(0,n.jsx)(l.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,n.jsx)(l.tbody,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"nodeToInsert"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(l.code,{children:"LexicalNode"})})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:"The node to insert before this one."})]})})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-5",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(l.code,{children:"LexicalNode"})})}),"\n",(0,n.jsx)(l.h4,{id:"overrides-5",children:"Overrides"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode#insertbefore",children:"insertBefore"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-5",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/nodes/LexicalRootNode.ts#L70",children:"packages/lexical/src/nodes/LexicalRootNode.ts:70"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"remove",children:"remove"}),"\n",(0,n.jsxs)(l.p,{children:["\u25B8 ",(0,n.jsx)(l.strong,{children:"remove"}),"(): ",(0,n.jsx)(l.code,{children:"never"})]}),"\n",(0,n.jsx)(l.p,{children:"Removes this LexicalNode from the EditorState. If the node isn't re-inserted\nsomewhere, the Lexical garbage collector will eventually clean it up."}),"\n",(0,n.jsx)(l.h4,{id:"returns-6",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"never"})}),"\n",(0,n.jsx)(l.h4,{id:"overrides-6",children:"Overrides"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode#remove",children:"remove"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-6",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/nodes/LexicalRootNode.ts#L62",children:"packages/lexical/src/nodes/LexicalRootNode.ts:62"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"replace",children:"replace"}),"\n",(0,n.jsxs)(l.p,{children:["\u25B8 ",(0,n.jsx)(l.strong,{children:"replace"}),"<",(0,n.jsx)(l.code,{children:"N"}),">(",(0,n.jsx)(l.code,{children:"node"}),"): ",(0,n.jsx)(l.code,{children:"never"})]}),"\n",(0,n.jsx)(l.p,{children:"Replaces this LexicalNode with the provided node, optionally transferring the children\nof the replaced node to the replacing node."}),"\n",(0,n.jsx)(l.h4,{id:"type-parameters",children:"Type parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(l.tbody,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"N"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(l.code,{children:"LexicalNode"})})})]})})]}),"\n",(0,n.jsx)(l.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,n.jsx)(l.tbody,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"node"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"N"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:"The node to replace this one with."})]})})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-7",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"never"})}),"\n",(0,n.jsx)(l.h4,{id:"overrides-7",children:"Overrides"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode#replace",children:"replace"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-7",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/nodes/LexicalRootNode.ts#L66",children:"packages/lexical/src/nodes/LexicalRootNode.ts:66"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"splice",children:"splice"}),"\n",(0,n.jsxs)(l.p,{children:["\u25B8 ",(0,n.jsx)(l.strong,{children:"splice"}),"(",(0,n.jsx)(l.code,{children:"start"}),", ",(0,n.jsx)(l.code,{children:"deleteCount"}),", ",(0,n.jsx)(l.code,{children:"nodesToInsert"}),"): ",(0,n.jsx)(l.code,{children:"this"})]}),"\n",(0,n.jsx)(l.h4,{id:"parameters-3",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsxs)(l.tbody,{children:[(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"start"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"number"})})]}),(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"deleteCount"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"number"})})]}),(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"nodesToInsert"})}),(0,n.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(l.code,{children:"LexicalNode"})}),"[]"]})]})]})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-8",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"this"})}),"\n",(0,n.jsx)(l.h4,{id:"overrides-8",children:"Overrides"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode#splice",children:"splice"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-8",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/nodes/LexicalRootNode.ts#L85",children:"packages/lexical/src/nodes/LexicalRootNode.ts:85"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"updatedom",children:"updateDOM"}),"\n",(0,n.jsxs)(l.p,{children:["\u25B8 ",(0,n.jsx)(l.strong,{children:"updateDOM"}),"(",(0,n.jsx)(l.code,{children:"prevNode"}),", ",(0,n.jsx)(l.code,{children:"dom"}),"): ",(0,n.jsx)(l.code,{children:"false"})]}),"\n",(0,n.jsx)(l.p,{children:"Called when a node changes and should update the DOM\nin whatever way is necessary to make it align with any changes that might\nhave happened during the update."}),"\n",(0,n.jsx)(l.p,{children:'Returning "true" here will cause lexical to unmount and recreate the DOM node\n(by calling createDOM). You would need to do this if the element tag changes,\nfor instance.'}),"\n",(0,n.jsx)(l.h4,{id:"parameters-4",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsxs)(l.tbody,{children:[(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"prevNode"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"this"})})]}),(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"dom"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"HTMLElement"})})]})]})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-9",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"false"})}),"\n",(0,n.jsx)(l.h4,{id:"overrides-9",children:"Overrides"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode#updatedom",children:"updateDOM"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-9",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/nodes/LexicalRootNode.ts#L80",children:"packages/lexical/src/nodes/LexicalRootNode.ts:80"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"clone",children:"clone"}),"\n",(0,n.jsxs)(l.p,{children:["\u25B8 ",(0,n.jsx)(l.strong,{children:"clone"}),"(): ",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.RootNode",children:(0,n.jsx)(l.code,{children:"RootNode"})})]}),"\n",(0,n.jsx)(l.p,{children:"Clones this node, creating a new node with a different key\nand adding it to the EditorState (but not attaching it anywhere!). All nodes must\nimplement this method."}),"\n",(0,n.jsx)(l.h4,{id:"returns-10",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.RootNode",children:(0,n.jsx)(l.code,{children:"RootNode"})})}),"\n",(0,n.jsx)(l.h4,{id:"overrides-10",children:"Overrides"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode#clone",children:"clone"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-10",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/nodes/LexicalRootNode.ts#L33",children:"packages/lexical/src/nodes/LexicalRootNode.ts:33"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"gettype",children:"getType"}),"\n",(0,n.jsxs)(l.p,{children:["\u25B8 ",(0,n.jsx)(l.strong,{children:"getType"}),"(): ",(0,n.jsx)(l.code,{children:"string"})]}),"\n",(0,n.jsx)(l.p,{children:"Returns the string type of this node. Every node must\nimplement this and it MUST BE UNIQUE amongst nodes registered\non the editor."}),"\n",(0,n.jsx)(l.h4,{id:"returns-11",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"string"})}),"\n",(0,n.jsx)(l.h4,{id:"overrides-11",children:"Overrides"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode#gettype-1",children:"getType"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-11",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/nodes/LexicalRootNode.ts#L29",children:"packages/lexical/src/nodes/LexicalRootNode.ts:29"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"importjson",children:"importJSON"}),"\n",(0,n.jsxs)(l.p,{children:["\u25B8 ",(0,n.jsx)(l.strong,{children:"importJSON"}),"(",(0,n.jsx)(l.code,{children:"serializedNode"}),"): ",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.RootNode",children:(0,n.jsx)(l.code,{children:"RootNode"})})]}),"\n",(0,n.jsxs)(l.p,{children:["Controls how the this node is deserialized from JSON. This is usually boilerplate,\nbut provides an abstraction between the node implementation and serialized interface that can\nbe important if you ever make breaking changes to a node schema (by adding or removing properties).\nSee ",(0,n.jsx)(l.a,{href:"https://lexical.dev/docs/concepts/serialization#lexical---html",children:"Serialization & Deserialization"}),"."]}),"\n",(0,n.jsx)(l.h4,{id:"parameters-5",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(l.tbody,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"serializedNode"})}),(0,n.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,n.jsx)(l.a,{href:"/docs/api/modules/lexical#serializedrootnode",children:(0,n.jsx)(l.code,{children:"SerializedRootNode"})}),"<",(0,n.jsx)(l.a,{href:"/docs/api/modules/lexical#serializedlexicalnode",children:(0,n.jsx)(l.code,{children:"SerializedLexicalNode"})}),">"]})]})})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-12",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.RootNode",children:(0,n.jsx)(l.code,{children:"RootNode"})})}),"\n",(0,n.jsx)(l.h4,{id:"overrides-12",children:"Overrides"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode#importjson",children:"importJSON"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-12",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/nodes/LexicalRootNode.ts#L99",children:"packages/lexical/src/nodes/LexicalRootNode.ts:99"})})]})}function h(e={}){let{wrapper:l}={...(0,d.a)(),...e.components};return l?(0,n.jsx)(l,{...e,children:(0,n.jsx)(a,{...e})}):a(e)}},22840:function(e,l,i){i.d(l,{Z:()=>t,a:()=>r});var s=i(2784);let n={},d=s.createContext(n);function r(e){let l=s.useContext(d);return s.useMemo(function(){return"function"==typeof e?e(l):{...l,...e}},[l,e])}function t(e){let l;return l=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),s.createElement(d.Provider,{value:l},e.children)}}}]);