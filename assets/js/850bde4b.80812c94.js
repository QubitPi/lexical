"use strict";(self.webpackChunk_lexical_website=self.webpackChunk_lexical_website||[]).push([["4118"],{45071:function(e,i,t){t.r(i),t.d(i,{frontMatter:()=>l,default:()=>h,contentTitle:()=>s,assets:()=>r,toc:()=>c,metadata:()=>n});var n=JSON.parse('{"id":"api/interfaces/lexical.UpdateListenerPayload","title":"Interface: UpdateListenerPayload","description":"lexical.UpdateListenerPayload","source":"@site/docs/api/interfaces/lexical.UpdateListenerPayload.md","sourceDirName":"api/interfaces","slug":"/api/interfaces/lexical.UpdateListenerPayload","permalink":"/lexical/docs/api/interfaces/lexical.UpdateListenerPayload","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","frontMatter":{"id":"lexical.UpdateListenerPayload","title":"Interface: UpdateListenerPayload","custom_edit_url":null},"sidebar":"api","previous":{"title":"TextPointCaretSlice","permalink":"/lexical/docs/api/interfaces/lexical.TextPointCaretSlice"},"next":{"title":"LexicalClipboardData","permalink":"/lexical/docs/api/interfaces/lexical_clipboard.LexicalClipboardData"}}'),a=t(52322),d=t(22840);let l={id:"lexical.UpdateListenerPayload",title:"Interface: UpdateListenerPayload",custom_edit_url:null},s=void 0,r={},c=[{value:"Properties",id:"properties",level:2},{value:"dirtyElements",id:"dirtyelements",level:3},{value:"Defined in",id:"defined-in",level:4},{value:"dirtyLeaves",id:"dirtyleaves",level:3},{value:"Defined in",id:"defined-in-1",level:4},{value:"editorState",id:"editorstate",level:3},{value:"Defined in",id:"defined-in-2",level:4},{value:"mutatedNodes",id:"mutatednodes",level:3},{value:"Defined in",id:"defined-in-3",level:4},{value:"normalizedNodes",id:"normalizednodes",level:3},{value:"Defined in",id:"defined-in-4",level:4},{value:"prevEditorState",id:"preveditorstate",level:3},{value:"Defined in",id:"defined-in-5",level:4},{value:"tags",id:"tags",level:3},{value:"Defined in",id:"defined-in-6",level:4}];function o(e){let i={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",hr:"hr",p:"p",strong:"strong",...(0,d.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(i.p,{children:[(0,a.jsx)(i.a,{href:"/lexical/docs/api/modules/lexical",children:"lexical"}),".UpdateListenerPayload"]}),"\n",(0,a.jsx)(i.p,{children:"The payload passed to an UpdateListener"}),"\n",(0,a.jsx)(i.h2,{id:"properties",children:"Properties"}),"\n",(0,a.jsx)(i.h3,{id:"dirtyelements",children:"dirtyElements"}),"\n",(0,a.jsxs)(i.p,{children:["\u2022 ",(0,a.jsx)(i.strong,{children:"dirtyElements"}),": ",(0,a.jsx)(i.code,{children:"Map"}),"<",(0,a.jsx)(i.code,{children:"string"}),", ",(0,a.jsx)(i.code,{children:"boolean"}),">"]}),"\n",(0,a.jsx)(i.p,{children:"A Map of NodeKeys of ElementNodes to a boolean that is true\nif the node was intentionally mutated ('unintentional' mutations\nare triggered when an indirect descendant is marked dirty)"}),"\n",(0,a.jsx)(i.h4,{id:"defined-in",children:"Defined in"}),"\n",(0,a.jsx)(i.p,{children:(0,a.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalEditor.ts#L274",children:"packages/lexical/src/LexicalEditor.ts:274"})}),"\n",(0,a.jsx)(i.hr,{}),"\n",(0,a.jsx)(i.h3,{id:"dirtyleaves",children:"dirtyLeaves"}),"\n",(0,a.jsxs)(i.p,{children:["\u2022 ",(0,a.jsx)(i.strong,{children:"dirtyLeaves"}),": ",(0,a.jsx)(i.code,{children:"Set"}),"<",(0,a.jsx)(i.code,{children:"string"}),">"]}),"\n",(0,a.jsx)(i.p,{children:"A Set of NodeKeys of all nodes that were marked dirty that\ndo not inherit from ElementNode."}),"\n",(0,a.jsx)(i.h4,{id:"defined-in-1",children:"Defined in"}),"\n",(0,a.jsx)(i.p,{children:(0,a.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalEditor.ts#L279",children:"packages/lexical/src/LexicalEditor.ts:279"})}),"\n",(0,a.jsx)(i.hr,{}),"\n",(0,a.jsx)(i.h3,{id:"editorstate",children:"editorState"}),"\n",(0,a.jsxs)(i.p,{children:["\u2022 ",(0,a.jsx)(i.strong,{children:"editorState"}),": ",(0,a.jsx)(i.a,{href:"/lexical/docs/api/classes/lexical.EditorState",children:(0,a.jsx)(i.code,{children:"EditorState"})})]}),"\n",(0,a.jsxs)(i.p,{children:["The new EditorState after all updates have been processed,\nequivalent to ",(0,a.jsx)(i.code,{children:"editor.getEditorState()"})]}),"\n",(0,a.jsx)(i.h4,{id:"defined-in-2",children:"Defined in"}),"\n",(0,a.jsx)(i.p,{children:(0,a.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalEditor.ts#L284",children:"packages/lexical/src/LexicalEditor.ts:284"})}),"\n",(0,a.jsx)(i.hr,{}),"\n",(0,a.jsx)(i.h3,{id:"mutatednodes",children:"mutatedNodes"}),"\n",(0,a.jsxs)(i.p,{children:["\u2022 ",(0,a.jsx)(i.strong,{children:"mutatedNodes"}),": ",(0,a.jsx)(i.code,{children:"null"})," | ",(0,a.jsx)(i.code,{children:"MutatedNodes"})]}),"\n",(0,a.jsxs)(i.p,{children:["The Map of LexicalNode constructors to a ",(0,a.jsx)(i.code,{children:"Map<NodeKey, NodeMutation>"}),",\nthis is useful when you have a mutation listener type use cases that\nshould apply to all or most nodes. Will be null if no DOM was mutated,\nsuch as when only the selection changed. Note that this will be empty\nunless at least one MutationListener is explicitly registered\n(any MutationListener is sufficient to compute the mutatedNodes Map\nfor all nodes)."]}),"\n",(0,a.jsx)(i.p,{children:"Added in v0.28.0"}),"\n",(0,a.jsx)(i.h4,{id:"defined-in-3",children:"Defined in"}),"\n",(0,a.jsx)(i.p,{children:(0,a.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalEditor.ts#L296",children:"packages/lexical/src/LexicalEditor.ts:296"})}),"\n",(0,a.jsx)(i.hr,{}),"\n",(0,a.jsx)(i.h3,{id:"normalizednodes",children:"normalizedNodes"}),"\n",(0,a.jsxs)(i.p,{children:["\u2022 ",(0,a.jsx)(i.strong,{children:"normalizedNodes"}),": ",(0,a.jsx)(i.code,{children:"Set"}),"<",(0,a.jsx)(i.code,{children:"string"}),">"]}),"\n",(0,a.jsx)(i.p,{children:"For advanced use cases only."}),"\n",(0,a.jsx)(i.p,{children:"Tracks the keys of TextNode descendants that have been merged\nwith their siblings by normalization. Note that these keys may\nnot exist in either editorState or prevEditorState and generally\nthis is only used for conflict resolution edge cases in collab."}),"\n",(0,a.jsx)(i.h4,{id:"defined-in-4",children:"Defined in"}),"\n",(0,a.jsx)(i.p,{children:(0,a.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalEditor.ts#L305",children:"packages/lexical/src/LexicalEditor.ts:305"})}),"\n",(0,a.jsx)(i.hr,{}),"\n",(0,a.jsx)(i.h3,{id:"preveditorstate",children:"prevEditorState"}),"\n",(0,a.jsxs)(i.p,{children:["\u2022 ",(0,a.jsx)(i.strong,{children:"prevEditorState"}),": ",(0,a.jsx)(i.a,{href:"/lexical/docs/api/classes/lexical.EditorState",children:(0,a.jsx)(i.code,{children:"EditorState"})})]}),"\n",(0,a.jsx)(i.p,{children:"The previous EditorState that is being discarded"}),"\n",(0,a.jsx)(i.h4,{id:"defined-in-5",children:"Defined in"}),"\n",(0,a.jsx)(i.p,{children:(0,a.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalEditor.ts#L309",children:"packages/lexical/src/LexicalEditor.ts:309"})}),"\n",(0,a.jsx)(i.hr,{}),"\n",(0,a.jsx)(i.h3,{id:"tags",children:"tags"}),"\n",(0,a.jsxs)(i.p,{children:["\u2022 ",(0,a.jsx)(i.strong,{children:"tags"}),": ",(0,a.jsx)(i.code,{children:"Set"}),"<",(0,a.jsx)(i.code,{children:"string"}),">"]}),"\n",(0,a.jsxs)(i.p,{children:["The set of tags added with update options or ",(0,a.jsx)(i.a,{href:"/lexical/docs/api/modules/lexical#addupdatetag",children:"$addUpdateTag"}),",\nnode that this includes all tags that were processed in this\nreconciliation which may have been added by separate updates."]}),"\n",(0,a.jsx)(i.h4,{id:"defined-in-6",children:"Defined in"}),"\n",(0,a.jsx)(i.p,{children:(0,a.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalEditor.ts#L315",children:"packages/lexical/src/LexicalEditor.ts:315"})})]})}function h(e={}){let{wrapper:i}={...(0,d.a)(),...e.components};return i?(0,a.jsx)(i,{...e,children:(0,a.jsx)(o,{...e})}):o(e)}},22840:function(e,i,t){t.d(i,{Z:()=>s,a:()=>l});var n=t(2784);let a={},d=n.createContext(a);function l(e){let i=n.useContext(d);return n.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function s(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),n.createElement(d.Provider,{value:i},e.children)}}}]);