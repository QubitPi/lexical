"use strict";(self.webpackChunk_lexical_website=self.webpackChunk_lexical_website||[]).push([["9220"],{5664:function(e,i,l){l.r(i),l.d(i,{frontMatter:()=>d,default:()=>h,contentTitle:()=>t,assets:()=>c,toc:()=>a,metadata:()=>r});var r=JSON.parse('{"id":"api/classes/lexical_react_LexicalDecoratorBlockNode.DecoratorBlockNode","title":"Class: DecoratorBlockNode","description":"@lexical/react/LexicalDecoratorBlockNode.DecoratorBlockNode","source":"@site/docs/api/classes/lexical_react_LexicalDecoratorBlockNode.DecoratorBlockNode.md","sourceDirName":"api/classes","slug":"/api/classes/lexical_react_LexicalDecoratorBlockNode.DecoratorBlockNode","permalink":"/docs/api/classes/lexical_react_LexicalDecoratorBlockNode.DecoratorBlockNode","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","frontMatter":{"id":"lexical_react_LexicalDecoratorBlockNode.DecoratorBlockNode","title":"Class: DecoratorBlockNode","custom_edit_url":null},"sidebar":"api","previous":{"title":"MenuOption","permalink":"/docs/api/classes/lexical_react_LexicalContextMenuPlugin.MenuOption"},"next":{"title":"HorizontalRuleNode","permalink":"/docs/api/classes/lexical_react_LexicalHorizontalRuleNode.HorizontalRuleNode"}}'),n=l(52322),s=l(22840);let d={id:"lexical_react_LexicalDecoratorBlockNode.DecoratorBlockNode",title:"Class: DecoratorBlockNode",custom_edit_url:null},t=void 0,c={},a=[{value:"Hierarchy",id:"hierarchy",level:2},{value:"Constructors",id:"constructors",level:2},{value:"constructor",id:"constructor",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Overrides",id:"overrides",level:4},{value:"Defined in",id:"defined-in",level:4},{value:"Properties",id:"properties",level:2},{value:"__format",id:"__format",level:3},{value:"Defined in",id:"defined-in-1",level:4},{value:"constructor",id:"constructor-1",level:3},{value:"Inherited from",id:"inherited-from",level:4},{value:"Defined in",id:"defined-in-2",level:4},{value:"importDOM",id:"importdom",level:3},{value:"Type declaration",id:"type-declaration",level:4},{value:"Returns",id:"returns-1",level:5},{value:"Inherited from",id:"inherited-from-1",level:4},{value:"Defined in",id:"defined-in-3",level:4},{value:"Methods",id:"methods",level:2},{value:"$config",id:"config",level:3},{value:"Returns",id:"returns-2",level:4},{value:"Inherited from",id:"inherited-from-2",level:4},{value:"Defined in",id:"defined-in-4",level:4},{value:"afterCloneFrom",id:"afterclonefrom",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-3",level:4},{value:"Inherited from",id:"inherited-from-3",level:4},{value:"Defined in",id:"defined-in-5",level:4},{value:"canIndent",id:"canindent",level:3},{value:"Returns",id:"returns-4",level:4},{value:"Defined in",id:"defined-in-6",level:4},{value:"config",id:"config-1",level:3},{value:"Type parameters",id:"type-parameters",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-5",level:4},{value:"Inherited from",id:"inherited-from-4",level:4},{value:"Defined in",id:"defined-in-7",level:4},{value:"createDOM",id:"createdom",level:3},{value:"Returns",id:"returns-6",level:4},{value:"Overrides",id:"overrides-1",level:4},{value:"Defined in",id:"defined-in-8",level:4},{value:"createParentElementNode",id:"createparentelementnode",level:3},{value:"Returns",id:"returns-7",level:4},{value:"Inherited from",id:"inherited-from-5",level:4},{value:"Defined in",id:"defined-in-9",level:4},{value:"decorate",id:"decorate",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-8",level:4},{value:"Inherited from",id:"inherited-from-6",level:4},{value:"Defined in",id:"defined-in-10",level:4},{value:"exportDOM",id:"exportdom",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-9",level:4},{value:"Inherited from",id:"inherited-from-7",level:4},{value:"Defined in",id:"defined-in-11",level:4},{value:"exportJSON",id:"exportjson",level:3},{value:"Returns",id:"returns-10",level:4},{value:"Overrides",id:"overrides-2",level:4},{value:"Defined in",id:"defined-in-12",level:4},{value:"getCommonAncestor",id:"getcommonancestor",level:3},{value:"Type parameters",id:"type-parameters-1",level:4},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-11",level:4},{value:"Inherited from",id:"inherited-from-8",level:4},{value:"Defined in",id:"defined-in-13",level:4},{value:"getIndexWithinParent",id:"getindexwithinparent",level:3},{value:"Returns",id:"returns-12",level:4},{value:"Inherited from",id:"inherited-from-9",level:4},{value:"Defined in",id:"defined-in-14",level:4},{value:"getKey",id:"getkey",level:3},{value:"Returns",id:"returns-13",level:4},{value:"Inherited from",id:"inherited-from-10",level:4},{value:"Defined in",id:"defined-in-15",level:4},{value:"getLatest",id:"getlatest",level:3},{value:"Returns",id:"returns-14",level:4},{value:"Inherited from",id:"inherited-from-11",level:4},{value:"Defined in",id:"defined-in-16",level:4},{value:"getNextSibling",id:"getnextsibling",level:3},{value:"Type parameters",id:"type-parameters-2",level:4},{value:"Returns",id:"returns-15",level:4},{value:"Inherited from",id:"inherited-from-12",level:4},{value:"Defined in",id:"defined-in-17",level:4},{value:"getNextSiblings",id:"getnextsiblings",level:3},{value:"Type parameters",id:"type-parameters-3",level:4},{value:"Returns",id:"returns-16",level:4},{value:"Inherited from",id:"inherited-from-13",level:4},{value:"Defined in",id:"defined-in-18",level:4},{value:"getNodesBetween",id:"getnodesbetween",level:3},{value:"Parameters",id:"parameters-6",level:4},{value:"Returns",id:"returns-17",level:4},{value:"Inherited from",id:"inherited-from-14",level:4},{value:"Defined in",id:"defined-in-19",level:4},{value:"getParent",id:"getparent",level:3},{value:"Type parameters",id:"type-parameters-4",level:4},{value:"Returns",id:"returns-18",level:4},{value:"Inherited from",id:"inherited-from-15",level:4},{value:"Defined in",id:"defined-in-20",level:4},{value:"getParentKeys",id:"getparentkeys",level:3},{value:"Returns",id:"returns-19",level:4},{value:"Inherited from",id:"inherited-from-16",level:4},{value:"Defined in",id:"defined-in-21",level:4},{value:"getParentOrThrow",id:"getparentorthrow",level:3},{value:"Type parameters",id:"type-parameters-5",level:4},{value:"Returns",id:"returns-20",level:4},{value:"Inherited from",id:"inherited-from-17",level:4},{value:"Defined in",id:"defined-in-22",level:4},{value:"getParents",id:"getparents",level:3},{value:"Returns",id:"returns-21",level:4},{value:"Inherited from",id:"inherited-from-18",level:4},{value:"Defined in",id:"defined-in-23",level:4},{value:"getPreviousSibling",id:"getprevioussibling",level:3},{value:"Type parameters",id:"type-parameters-6",level:4},{value:"Returns",id:"returns-22",level:4},{value:"Inherited from",id:"inherited-from-19",level:4},{value:"Defined in",id:"defined-in-24",level:4},{value:"getPreviousSiblings",id:"getprevioussiblings",level:3},{value:"Type parameters",id:"type-parameters-7",level:4},{value:"Returns",id:"returns-23",level:4},{value:"Inherited from",id:"inherited-from-20",level:4},{value:"Defined in",id:"defined-in-25",level:4},{value:"getTextContent",id:"gettextcontent",level:3},{value:"Returns",id:"returns-24",level:4},{value:"Inherited from",id:"inherited-from-21",level:4},{value:"Defined in",id:"defined-in-26",level:4},{value:"getTextContentSize",id:"gettextcontentsize",level:3},{value:"Returns",id:"returns-25",level:4},{value:"Inherited from",id:"inherited-from-22",level:4},{value:"Defined in",id:"defined-in-27",level:4},{value:"getTopLevelElement",id:"gettoplevelelement",level:3},{value:"Returns",id:"returns-26",level:4},{value:"Inherited from",id:"inherited-from-23",level:4},{value:"Defined in",id:"defined-in-28",level:4},{value:"getTopLevelElementOrThrow",id:"gettoplevelelementorthrow",level:3},{value:"Returns",id:"returns-27",level:4},{value:"Inherited from",id:"inherited-from-24",level:4},{value:"Defined in",id:"defined-in-29",level:4},{value:"getType",id:"gettype",level:3},{value:"Returns",id:"returns-28",level:4},{value:"Inherited from",id:"inherited-from-25",level:4},{value:"Defined in",id:"defined-in-30",level:4},{value:"getWritable",id:"getwritable",level:3},{value:"Returns",id:"returns-29",level:4},{value:"Inherited from",id:"inherited-from-26",level:4},{value:"Defined in",id:"defined-in-31",level:4},{value:"insertAfter",id:"insertafter",level:3},{value:"Parameters",id:"parameters-7",level:4},{value:"Returns",id:"returns-30",level:4},{value:"Inherited from",id:"inherited-from-27",level:4},{value:"Defined in",id:"defined-in-32",level:4},{value:"insertBefore",id:"insertbefore",level:3},{value:"Parameters",id:"parameters-8",level:4},{value:"Returns",id:"returns-31",level:4},{value:"Inherited from",id:"inherited-from-28",level:4},{value:"Defined in",id:"defined-in-33",level:4},{value:"is",id:"is",level:3},{value:"Parameters",id:"parameters-9",level:4},{value:"Returns",id:"returns-32",level:4},{value:"Inherited from",id:"inherited-from-29",level:4},{value:"Defined in",id:"defined-in-34",level:4},{value:"isAttached",id:"isattached",level:3},{value:"Returns",id:"returns-33",level:4},{value:"Inherited from",id:"inherited-from-30",level:4},{value:"Defined in",id:"defined-in-35",level:4},{value:"isBefore",id:"isbefore",level:3},{value:"Parameters",id:"parameters-10",level:4},{value:"Returns",id:"returns-34",level:4},{value:"Inherited from",id:"inherited-from-31",level:4},{value:"Defined in",id:"defined-in-36",level:4},{value:"isDirty",id:"isdirty",level:3},{value:"Returns",id:"returns-35",level:4},{value:"Inherited from",id:"inherited-from-32",level:4},{value:"Defined in",id:"defined-in-37",level:4},{value:"isInline",id:"isinline",level:3},{value:"Returns",id:"returns-36",level:4},{value:"Overrides",id:"overrides-3",level:4},{value:"Defined in",id:"defined-in-38",level:4},{value:"isIsolated",id:"isisolated",level:3},{value:"Returns",id:"returns-37",level:4},{value:"Inherited from",id:"inherited-from-33",level:4},{value:"Defined in",id:"defined-in-39",level:4},{value:"isKeyboardSelectable",id:"iskeyboardselectable",level:3},{value:"Returns",id:"returns-38",level:4},{value:"Inherited from",id:"inherited-from-34",level:4},{value:"Defined in",id:"defined-in-40",level:4},{value:"isParentOf",id:"isparentof",level:3},{value:"Parameters",id:"parameters-11",level:4},{value:"Returns",id:"returns-39",level:4},{value:"Inherited from",id:"inherited-from-35",level:4},{value:"Defined in",id:"defined-in-41",level:4},{value:"isParentRequired",id:"isparentrequired",level:3},{value:"Returns",id:"returns-40",level:4},{value:"Inherited from",id:"inherited-from-36",level:4},{value:"Defined in",id:"defined-in-42",level:4},{value:"isSelected",id:"isselected",level:3},{value:"Parameters",id:"parameters-12",level:4},{value:"Returns",id:"returns-41",level:4},{value:"Inherited from",id:"inherited-from-37",level:4},{value:"Defined in",id:"defined-in-43",level:4},{value:"markDirty",id:"markdirty",level:3},{value:"Returns",id:"returns-42",level:4},{value:"Inherited from",id:"inherited-from-38",level:4},{value:"Defined in",id:"defined-in-44",level:4},{value:"remove",id:"remove",level:3},{value:"Parameters",id:"parameters-13",level:4},{value:"Returns",id:"returns-43",level:4},{value:"Inherited from",id:"inherited-from-39",level:4},{value:"Defined in",id:"defined-in-45",level:4},{value:"replace",id:"replace",level:3},{value:"Type parameters",id:"type-parameters-8",level:4},{value:"Parameters",id:"parameters-14",level:4},{value:"Returns",id:"returns-44",level:4},{value:"Inherited from",id:"inherited-from-40",level:4},{value:"Defined in",id:"defined-in-46",level:4},{value:"selectEnd",id:"selectend",level:3},{value:"Returns",id:"returns-45",level:4},{value:"Inherited from",id:"inherited-from-41",level:4},{value:"Defined in",id:"defined-in-47",level:4},{value:"selectNext",id:"selectnext",level:3},{value:"Parameters",id:"parameters-15",level:4},{value:"Returns",id:"returns-46",level:4},{value:"Inherited from",id:"inherited-from-42",level:4},{value:"Defined in",id:"defined-in-48",level:4},{value:"selectPrevious",id:"selectprevious",level:3},{value:"Parameters",id:"parameters-16",level:4},{value:"Returns",id:"returns-47",level:4},{value:"Inherited from",id:"inherited-from-43",level:4},{value:"Defined in",id:"defined-in-49",level:4},{value:"selectStart",id:"selectstart",level:3},{value:"Returns",id:"returns-48",level:4},{value:"Inherited from",id:"inherited-from-44",level:4},{value:"Defined in",id:"defined-in-50",level:4},{value:"setFormat",id:"setformat",level:3},{value:"Parameters",id:"parameters-17",level:4},{value:"Returns",id:"returns-49",level:4},{value:"Defined in",id:"defined-in-51",level:4},{value:"updateDOM",id:"updatedom",level:3},{value:"Returns",id:"returns-50",level:4},{value:"Overrides",id:"overrides-4",level:4},{value:"Defined in",id:"defined-in-52",level:4},{value:"updateFromJSON",id:"updatefromjson",level:3},{value:"Parameters",id:"parameters-18",level:4},{value:"Returns",id:"returns-51",level:4},{value:"Overrides",id:"overrides-5",level:4},{value:"Defined in",id:"defined-in-53",level:4},{value:"clone",id:"clone",level:3},{value:"Parameters",id:"parameters-19",level:4},{value:"Returns",id:"returns-52",level:4},{value:"Inherited from",id:"inherited-from-45",level:4},{value:"Defined in",id:"defined-in-54",level:4},{value:"getType",id:"gettype-1",level:3},{value:"Returns",id:"returns-53",level:4},{value:"Inherited from",id:"inherited-from-46",level:4},{value:"Defined in",id:"defined-in-55",level:4},{value:"importJSON",id:"importjson",level:3},{value:"Parameters",id:"parameters-20",level:4},{value:"Returns",id:"returns-54",level:4},{value:"Inherited from",id:"inherited-from-47",level:4},{value:"Defined in",id:"defined-in-56",level:4},{value:"transform",id:"transform",level:3},{value:"Returns",id:"returns-55",level:4},{value:"Inherited from",id:"inherited-from-48",level:4},{value:"Defined in",id:"defined-in-57",level:4}];function o(e){let i={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",h5:"h5",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/docs/api/modules/lexical_react_LexicalDecoratorBlockNode",children:"@lexical/react/LexicalDecoratorBlockNode"}),".DecoratorBlockNode"]}),"\n",(0,n.jsx)(i.h2,{id:"hierarchy",children:"Hierarchy"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:["\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode",children:(0,n.jsx)(i.code,{children:"DecoratorNode"})}),"<",(0,n.jsx)(i.code,{children:"JSX.Element"}),">"]}),"\n",(0,n.jsxs)(i.p,{children:["\u21B3 ",(0,n.jsx)(i.strong,{children:(0,n.jsx)(i.code,{children:"DecoratorBlockNode"})})]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(i.h2,{id:"constructors",children:"Constructors"}),"\n",(0,n.jsx)(i.h3,{id:"constructor",children:"constructor"}),"\n",(0,n.jsxs)(i.p,{children:["\u2022 ",(0,n.jsx)(i.strong,{children:"new DecoratorBlockNode"}),"(",(0,n.jsx)(i.code,{children:"format?"}),", ",(0,n.jsx)(i.code,{children:"key?"}),"): ",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical_react_LexicalDecoratorBlockNode.DecoratorBlockNode",children:(0,n.jsx)(i.code,{children:"DecoratorBlockNode"})})]}),"\n",(0,n.jsx)(i.h4,{id:"parameters",children:"Parameters"}),"\n",(0,n.jsxs)(i.table,{children:[(0,n.jsx)(i.thead,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsxs)(i.tbody,{children:[(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"format?"})}),(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.a,{href:"/docs/api/modules/lexical#elementformattype",children:(0,n.jsx)(i.code,{children:"ElementFormatType"})})})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"key?"})}),(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"string"})})]})]})]}),"\n",(0,n.jsx)(i.h4,{id:"returns",children:"Returns"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical_react_LexicalDecoratorBlockNode.DecoratorBlockNode",children:(0,n.jsx)(i.code,{children:"DecoratorBlockNode"})})}),"\n",(0,n.jsx)(i.h4,{id:"overrides",children:"Overrides"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode",children:"DecoratorNode"}),".",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode#constructor",children:"constructor"})]}),"\n",(0,n.jsx)(i.h4,{id:"defined-in",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-react/src/LexicalDecoratorBlockNode.ts#L31",children:"packages/lexical-react/src/LexicalDecoratorBlockNode.ts:31"})}),"\n",(0,n.jsx)(i.h2,{id:"properties",children:"Properties"}),"\n",(0,n.jsx)(i.h3,{id:"__format",children:"__format"}),"\n",(0,n.jsxs)(i.p,{children:["\u2022 ",(0,n.jsx)(i.strong,{children:"__format"}),": ",(0,n.jsx)(i.a,{href:"/docs/api/modules/lexical#elementformattype",children:(0,n.jsx)(i.code,{children:"ElementFormatType"})})]}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-1",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-react/src/LexicalDecoratorBlockNode.ts#L29",children:"packages/lexical-react/src/LexicalDecoratorBlockNode.ts:29"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"constructor-1",children:"constructor"}),"\n",(0,n.jsxs)(i.p,{children:["\u2022 ",(0,n.jsx)(i.strong,{children:"constructor"}),": ",(0,n.jsx)(i.a,{href:"/docs/api/modules/lexical#klassconstructor",children:(0,n.jsx)(i.code,{children:"KlassConstructor"})}),"<(",(0,n.jsx)(i.code,{children:"key?"}),": ",(0,n.jsx)(i.code,{children:"string"}),") => ",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode",children:(0,n.jsx)(i.code,{children:"DecoratorNode"})}),"<",(0,n.jsx)(i.code,{children:"Element"}),">>"]}),"\n",(0,n.jsx)(i.h4,{id:"inherited-from",children:"Inherited from"}),"\n",(0,n.jsx)(i.p,{children:"DecoratorNode.constructor"}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-2",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/nodes/LexicalDecoratorNode.ts#L26",children:"packages/lexical/src/nodes/LexicalDecoratorNode.ts:26"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"importdom",children:"importDOM"}),"\n",(0,n.jsxs)(i.p,{children:["\u25AA ",(0,n.jsx)(i.code,{children:"Static"})," ",(0,n.jsx)(i.code,{children:"Optional"})," ",(0,n.jsx)(i.strong,{children:"importDOM"}),": () => ",(0,n.jsx)(i.code,{children:"null"})," | ",(0,n.jsx)(i.a,{href:"/docs/api/modules/lexical#domconversionmap",children:(0,n.jsx)(i.code,{children:"DOMConversionMap"})}),"<",(0,n.jsx)(i.code,{children:"any"}),">"]}),"\n",(0,n.jsx)(i.h4,{id:"type-declaration",children:"Type declaration"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 (): ",(0,n.jsx)(i.code,{children:"null"})," | ",(0,n.jsx)(i.a,{href:"/docs/api/modules/lexical#domconversionmap",children:(0,n.jsx)(i.code,{children:"DOMConversionMap"})}),"<",(0,n.jsx)(i.code,{children:"any"}),">"]}),"\n",(0,n.jsx)(i.h5,{id:"returns-1",children:"Returns"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.code,{children:"null"})," | ",(0,n.jsx)(i.a,{href:"/docs/api/modules/lexical#domconversionmap",children:(0,n.jsx)(i.code,{children:"DOMConversionMap"})}),"<",(0,n.jsx)(i.code,{children:"any"}),">"]}),"\n",(0,n.jsx)(i.h4,{id:"inherited-from-1",children:"Inherited from"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode",children:"DecoratorNode"}),".",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode#importdom",children:"importDOM"})]}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-3",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L530",children:"packages/lexical/src/LexicalNode.ts:530"})}),"\n",(0,n.jsx)(i.h2,{id:"methods",children:"Methods"}),"\n",(0,n.jsx)(i.h3,{id:"config",children:"$config"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"$config"}),"(): ",(0,n.jsx)(i.a,{href:"/docs/api/modules/lexical#basestaticnodeconfig",children:(0,n.jsx)(i.code,{children:"BaseStaticNodeConfig"})})]}),"\n",(0,n.jsx)(i.p,{children:"Override this to implement the new static node configuration protocol,\nthis method is called directly on the prototype and must not depend\non anything initialized in the constructor. Generally it should be\na trivial implementation."}),"\n",(0,n.jsx)(i.h4,{id:"returns-2",children:"Returns"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"/docs/api/modules/lexical#basestaticnodeconfig",children:(0,n.jsx)(i.code,{children:"BaseStaticNodeConfig"})})}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.strong,{children:(0,n.jsx)(i.code,{children:"Example"})})}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-ts",children:"class MyNode extends TextNode {\n  $config() {\n    return this.config('my-node', {extends: TextNode});\n  }\n}\n"})}),"\n",(0,n.jsx)(i.h4,{id:"inherited-from-2",children:"Inherited from"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode",children:"DecoratorNode"}),".",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode#config",children:"$config"})]}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-4",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L449",children:"packages/lexical/src/LexicalNode.ts:449"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"afterclonefrom",children:"afterCloneFrom"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"afterCloneFrom"}),"(",(0,n.jsx)(i.code,{children:"prevNode"}),"): ",(0,n.jsx)(i.code,{children:"void"})]}),"\n",(0,n.jsxs)(i.p,{children:["Perform any state updates on the clone of prevNode that are not already\nhandled by the constructor call in the static clone method. If you have\nstate to update in your clone that is not handled directly by the\nconstructor, it is advisable to override this method but it is required\nto include a call to ",(0,n.jsx)(i.code,{children:"super.afterCloneFrom(prevNode)"})," in your\nimplementation. This is only intended to be called by\n",(0,n.jsx)(i.a,{href:"/docs/api/modules/lexical#clonewithproperties",children:"$cloneWithProperties"})," function or via a super call."]}),"\n",(0,n.jsx)(i.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,n.jsxs)(i.table,{children:[(0,n.jsx)(i.thead,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(i.tbody,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"prevNode"})}),(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"this"})})]})})]}),"\n",(0,n.jsx)(i.h4,{id:"returns-3",children:"Returns"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.code,{children:"void"})}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.strong,{children:(0,n.jsx)(i.code,{children:"Example"})})}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-ts",children:"class ClassesTextNode extends TextNode {\n  // Not shown: static getType, static importJSON, exportJSON, createDOM, updateDOM\n  __classes = new Set<string>();\n  static clone(node: ClassesTextNode): ClassesTextNode {\n    // The inherited TextNode constructor is used here, so\n    // classes is not set by this method.\n    return new ClassesTextNode(node.__text, node.__key);\n  }\n  afterCloneFrom(node: this): void {\n    // This calls TextNode.afterCloneFrom and LexicalNode.afterCloneFrom\n    // for necessary state updates\n    super.afterCloneFrom(node);\n    this.__addClasses(node.__classes);\n  }\n  // This method is a private implementation detail, it is not\n  // suitable for the public API because it does not call getWritable\n  __addClasses(classNames: Iterable<string>): this {\n    for (const className of classNames) {\n      this.__classes.add(className);\n    }\n    return this;\n  }\n  addClass(...classNames: string[]): this {\n    return this.getWritable().__addClasses(classNames);\n  }\n  removeClass(...classNames: string[]): this {\n    const node = this.getWritable();\n    for (const className of classNames) {\n      this.__classes.delete(className);\n    }\n    return this;\n  }\n  getClasses(): Set<string> {\n    return this.getLatest().__classes;\n  }\n}\n"})}),"\n",(0,n.jsx)(i.h4,{id:"inherited-from-3",children:"Inherited from"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode",children:"DecoratorNode"}),".",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode#afterclonefrom",children:"afterCloneFrom"})]}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-5",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L518",children:"packages/lexical/src/LexicalNode.ts:518"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"canindent",children:"canIndent"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"canIndent"}),"(): ",(0,n.jsx)(i.code,{children:"false"})]}),"\n",(0,n.jsx)(i.h4,{id:"returns-4",children:"Returns"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.code,{children:"false"})}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-6",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-react/src/LexicalDecoratorBlockNode.ts#L51",children:"packages/lexical-react/src/LexicalDecoratorBlockNode.ts:51"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"config-1",children:"config"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"config"}),"<",(0,n.jsx)(i.code,{children:"Type"}),", ",(0,n.jsx)(i.code,{children:"Config"}),">(",(0,n.jsx)(i.code,{children:"type"}),", ",(0,n.jsx)(i.code,{children:"config"}),"): ",(0,n.jsx)(i.code,{children:"StaticNodeConfigRecord"}),"<",(0,n.jsx)(i.code,{children:"Type"}),", ",(0,n.jsx)(i.code,{children:"Config"}),">"]}),"\n",(0,n.jsxs)(i.p,{children:["This is a convenience method for $config that\naids in type inference. See ",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode#config",children:"LexicalNode.$config"}),"\nfor example usage."]}),"\n",(0,n.jsx)(i.h4,{id:"type-parameters",children:"Type parameters"}),"\n",(0,n.jsxs)(i.table,{children:[(0,n.jsx)(i.thead,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsxs)(i.tbody,{children:[(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"Type"})}),(0,n.jsxs)(i.td,{style:{textAlign:"left"},children:["extends ",(0,n.jsx)(i.code,{children:"string"})]})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"Config"})}),(0,n.jsxs)(i.td,{style:{textAlign:"left"},children:["extends ",(0,n.jsx)(i.a,{href:"/docs/api/interfaces/lexical.StaticNodeConfigValue",children:(0,n.jsx)(i.code,{children:"StaticNodeConfigValue"})}),"<",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical_react_LexicalDecoratorBlockNode.DecoratorBlockNode",children:(0,n.jsx)(i.code,{children:"DecoratorBlockNode"})}),", ",(0,n.jsx)(i.code,{children:"Type"}),">"]})]})]})]}),"\n",(0,n.jsx)(i.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,n.jsxs)(i.table,{children:[(0,n.jsx)(i.thead,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsxs)(i.tbody,{children:[(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"type"})}),(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"Type"})})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"config"})}),(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"Config"})})]})]})]}),"\n",(0,n.jsx)(i.h4,{id:"returns-5",children:"Returns"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.code,{children:"StaticNodeConfigRecord"}),"<",(0,n.jsx)(i.code,{children:"Type"}),", ",(0,n.jsx)(i.code,{children:"Config"}),">"]}),"\n",(0,n.jsx)(i.h4,{id:"inherited-from-4",children:"Inherited from"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode",children:"DecoratorNode"}),".",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode#config",children:"config"})]}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-7",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L458",children:"packages/lexical/src/LexicalNode.ts:458"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"createdom",children:"createDOM"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"createDOM"}),"(): ",(0,n.jsx)(i.code,{children:"HTMLElement"})]}),"\n",(0,n.jsx)(i.p,{children:"Called during the reconciliation process to determine which nodes\nto insert into the DOM for this Lexical Node."}),"\n",(0,n.jsx)(i.p,{children:"This method must return exactly one HTMLElement. Nested elements are not supported."}),"\n",(0,n.jsx)(i.p,{children:"Do not attempt to update the Lexical EditorState during this phase of the update lifecycle."}),"\n",(0,n.jsx)(i.h4,{id:"returns-6",children:"Returns"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.code,{children:"HTMLElement"})}),"\n",(0,n.jsx)(i.h4,{id:"overrides-1",children:"Overrides"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode",children:"DecoratorNode"}),".",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode#createdom",children:"createDOM"})]}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-8",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-react/src/LexicalDecoratorBlockNode.ts#L55",children:"packages/lexical-react/src/LexicalDecoratorBlockNode.ts:55"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"createparentelementnode",children:"createParentElementNode"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"createParentElementNode"}),"(): ",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode",children:(0,n.jsx)(i.code,{children:"ElementNode"})})]}),"\n",(0,n.jsxs)(i.p,{children:["The creation logic for any required parent. Should be implemented if ",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode#isparentrequired",children:"isParentRequired"})," returns true."]}),"\n",(0,n.jsx)(i.h4,{id:"returns-7",children:"Returns"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode",children:(0,n.jsx)(i.code,{children:"ElementNode"})})}),"\n",(0,n.jsx)(i.h4,{id:"inherited-from-5",children:"Inherited from"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode",children:"DecoratorNode"}),".",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode#createparentelementnode",children:"createParentElementNode"})]}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-9",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L1372",children:"packages/lexical/src/LexicalNode.ts:1372"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"decorate",children:"decorate"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"decorate"}),"(",(0,n.jsx)(i.code,{children:"editor"}),", ",(0,n.jsx)(i.code,{children:"config"}),"): ",(0,n.jsx)(i.code,{children:"Element"})]}),"\n",(0,n.jsx)(i.p,{children:"The returned value is added to the LexicalEditor._decorators"}),"\n",(0,n.jsx)(i.h4,{id:"parameters-3",children:"Parameters"}),"\n",(0,n.jsxs)(i.table,{children:[(0,n.jsx)(i.thead,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsxs)(i.tbody,{children:[(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"editor"})}),(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalEditor",children:(0,n.jsx)(i.code,{children:"LexicalEditor"})})})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"config"})}),(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.a,{href:"/docs/api/modules/lexical#editorconfig",children:(0,n.jsx)(i.code,{children:"EditorConfig"})})})]})]})]}),"\n",(0,n.jsx)(i.h4,{id:"returns-8",children:"Returns"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.code,{children:"Element"})}),"\n",(0,n.jsx)(i.h4,{id:"inherited-from-6",children:"Inherited from"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode",children:"DecoratorNode"}),".",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode#decorate",children:"decorate"})]}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-10",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/nodes/LexicalDecoratorNode.ts#L31",children:"packages/lexical/src/nodes/LexicalDecoratorNode.ts:31"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"exportdom",children:"exportDOM"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"exportDOM"}),"(",(0,n.jsx)(i.code,{children:"editor"}),"): ",(0,n.jsx)(i.a,{href:"/docs/api/modules/lexical#domexportoutput",children:(0,n.jsx)(i.code,{children:"DOMExportOutput"})})]}),"\n",(0,n.jsxs)(i.p,{children:["Controls how the this node is serialized to HTML. This is important for\ncopy and paste between Lexical and non-Lexical editors, or Lexical editors with different namespaces,\nin which case the primary transfer format is HTML. It's also important if you're serializing\nto HTML for any other reason via ",(0,n.jsx)(i.a,{href:"/docs/api/modules/lexical_html#generatehtmlfromnodes",children:"$generateHtmlFromNodes"}),". You could\nalso use this method to build your own HTML renderer."]}),"\n",(0,n.jsx)(i.h4,{id:"parameters-4",children:"Parameters"}),"\n",(0,n.jsxs)(i.table,{children:[(0,n.jsx)(i.thead,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(i.tbody,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"editor"})}),(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalEditor",children:(0,n.jsx)(i.code,{children:"LexicalEditor"})})})]})})]}),"\n",(0,n.jsx)(i.h4,{id:"returns-9",children:"Returns"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"/docs/api/modules/lexical#domexportoutput",children:(0,n.jsx)(i.code,{children:"DOMExportOutput"})})}),"\n",(0,n.jsx)(i.h4,{id:"inherited-from-7",children:"Inherited from"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode",children:"DecoratorNode"}),".",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode#exportdom",children:"exportDOM"})]}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-11",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L1082",children:"packages/lexical/src/LexicalNode.ts:1082"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"exportjson",children:"exportJSON"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"exportJSON"}),"(): ",(0,n.jsx)(i.a,{href:"/docs/api/modules/lexical_react_LexicalDecoratorBlockNode#serializeddecoratorblocknode",children:(0,n.jsx)(i.code,{children:"SerializedDecoratorBlockNode"})})]}),"\n",(0,n.jsxs)(i.p,{children:["Controls how the this node is serialized to JSON. This is important for\ncopy and paste between Lexical editors sharing the same namespace. It's also important\nif you're serializing to JSON for persistent storage somewhere.\nSee ",(0,n.jsx)(i.a,{href:"https://lexical.dev/docs/concepts/serialization#lexical---html",children:"Serialization & Deserialization"}),"."]}),"\n",(0,n.jsx)(i.h4,{id:"returns-10",children:"Returns"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"/docs/api/modules/lexical_react_LexicalDecoratorBlockNode#serializeddecoratorblocknode",children:(0,n.jsx)(i.code,{children:"SerializedDecoratorBlockNode"})})}),"\n",(0,n.jsx)(i.h4,{id:"overrides-2",children:"Overrides"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode",children:"DecoratorNode"}),".",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode#exportjson",children:"exportJSON"})]}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-12",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-react/src/LexicalDecoratorBlockNode.ts#L36",children:"packages/lexical-react/src/LexicalDecoratorBlockNode.ts:36"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"getcommonancestor",children:"getCommonAncestor"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"getCommonAncestor"}),"<",(0,n.jsx)(i.code,{children:"T"}),">(",(0,n.jsx)(i.code,{children:"node"}),"): ",(0,n.jsx)(i.code,{children:"null"})," | ",(0,n.jsx)(i.code,{children:"T"})]}),"\n",(0,n.jsx)(i.h4,{id:"type-parameters-1",children:"Type parameters"}),"\n",(0,n.jsxs)(i.table,{children:[(0,n.jsx)(i.thead,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(i.tbody,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"T"})}),(0,n.jsxs)(i.td,{style:{textAlign:"left"},children:["extends ",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode",children:(0,n.jsx)(i.code,{children:"ElementNode"})})," = ",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode",children:(0,n.jsx)(i.code,{children:"ElementNode"})})]})]})})]}),"\n",(0,n.jsx)(i.h4,{id:"parameters-5",children:"Parameters"}),"\n",(0,n.jsxs)(i.table,{children:[(0,n.jsx)(i.thead,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Type"}),(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,n.jsx)(i.tbody,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"node"})}),(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(i.code,{children:"LexicalNode"})})}),(0,n.jsx)(i.td,{style:{textAlign:"left"},children:"the other node to find the common ancestor of."})]})})]}),"\n",(0,n.jsx)(i.h4,{id:"returns-11",children:"Returns"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.code,{children:"null"})," | ",(0,n.jsx)(i.code,{children:"T"})]}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.strong,{children:(0,n.jsx)(i.code,{children:"Deprecated"})})}),"\n",(0,n.jsxs)(i.p,{children:["use ",(0,n.jsx)(i.a,{href:"/docs/api/modules/lexical#getcommonancestor",children:"$getCommonAncestor"})]}),"\n",(0,n.jsx)(i.p,{children:"Returns the closest common ancestor of this node and the provided one or null\nif one cannot be found."}),"\n",(0,n.jsx)(i.h4,{id:"inherited-from-8",children:"Inherited from"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode",children:"DecoratorNode"}),".",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode#getcommonancestor",children:"getCommonAncestor"})]}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-13",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L825",children:"packages/lexical/src/LexicalNode.ts:825"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"getindexwithinparent",children:"getIndexWithinParent"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"getIndexWithinParent"}),"(): ",(0,n.jsx)(i.code,{children:"number"})]}),"\n",(0,n.jsx)(i.p,{children:"Returns the zero-based index of this node within the parent."}),"\n",(0,n.jsx)(i.h4,{id:"returns-12",children:"Returns"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.code,{children:"number"})}),"\n",(0,n.jsx)(i.h4,{id:"inherited-from-9",children:"Inherited from"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode",children:"DecoratorNode"}),".",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode#getindexwithinparent",children:"getIndexWithinParent"})]}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-14",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L651",children:"packages/lexical/src/LexicalNode.ts:651"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"getkey",children:"getKey"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"getKey"}),"(): ",(0,n.jsx)(i.code,{children:"string"})]}),"\n",(0,n.jsx)(i.p,{children:"Returns this nodes key."}),"\n",(0,n.jsx)(i.h4,{id:"returns-13",children:"Returns"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.code,{children:"string"})}),"\n",(0,n.jsx)(i.h4,{id:"inherited-from-10",children:"Inherited from"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode",children:"DecoratorNode"}),".",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode#getkey",children:"getKey"})]}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-15",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L643",children:"packages/lexical/src/LexicalNode.ts:643"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"getlatest",children:"getLatest"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"getLatest"}),"(): ",(0,n.jsx)(i.code,{children:"this"})]}),"\n",(0,n.jsx)(i.p,{children:"Returns the latest version of the node from the active EditorState.\nThis is used to avoid getting values from stale node references."}),"\n",(0,n.jsx)(i.h4,{id:"returns-14",children:"Returns"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.code,{children:"this"})}),"\n",(0,n.jsx)(i.h4,{id:"inherited-from-11",children:"Inherited from"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode",children:"DecoratorNode"}),".",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode#getlatest",children:"getLatest"})]}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-16",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L976",children:"packages/lexical/src/LexicalNode.ts:976"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"getnextsibling",children:"getNextSibling"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"getNextSibling"}),"<",(0,n.jsx)(i.code,{children:"T"}),">(): ",(0,n.jsx)(i.code,{children:"null"})," | ",(0,n.jsx)(i.code,{children:"T"})]}),"\n",(0,n.jsx)(i.p,{children:'Returns the "next" siblings - that is, the node that comes\nafter this one in the same parent'}),"\n",(0,n.jsx)(i.h4,{id:"type-parameters-2",children:"Type parameters"}),"\n",(0,n.jsxs)(i.table,{children:[(0,n.jsx)(i.thead,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(i.tbody,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"T"})}),(0,n.jsxs)(i.td,{style:{textAlign:"left"},children:["extends ",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(i.code,{children:"LexicalNode"})})]})]})})]}),"\n",(0,n.jsx)(i.h4,{id:"returns-15",children:"Returns"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.code,{children:"null"})," | ",(0,n.jsx)(i.code,{children:"T"})]}),"\n",(0,n.jsx)(i.h4,{id:"inherited-from-12",children:"Inherited from"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode",children:"DecoratorNode"}),".",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode#getnextsibling",children:"getNextSibling"})]}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-17",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L796",children:"packages/lexical/src/LexicalNode.ts:796"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"getnextsiblings",children:"getNextSiblings"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"getNextSiblings"}),"<",(0,n.jsx)(i.code,{children:"T"}),">(): ",(0,n.jsx)(i.code,{children:"T"}),"[]"]}),"\n",(0,n.jsx)(i.p,{children:'Returns all "next" siblings - that is, the nodes that come between this\none and the last child of it\'s parent, inclusive.'}),"\n",(0,n.jsx)(i.h4,{id:"type-parameters-3",children:"Type parameters"}),"\n",(0,n.jsxs)(i.table,{children:[(0,n.jsx)(i.thead,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(i.tbody,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"T"})}),(0,n.jsxs)(i.td,{style:{textAlign:"left"},children:["extends ",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(i.code,{children:"LexicalNode"})})]})]})})]}),"\n",(0,n.jsx)(i.h4,{id:"returns-16",children:"Returns"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.code,{children:"T"}),"[]"]}),"\n",(0,n.jsx)(i.h4,{id:"inherited-from-13",children:"Inherited from"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode",children:"DecoratorNode"}),".",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode#getnextsiblings",children:"getNextSiblings"})]}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-18",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L807",children:"packages/lexical/src/LexicalNode.ts:807"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"getnodesbetween",children:"getNodesBetween"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"getNodesBetween"}),"(",(0,n.jsx)(i.code,{children:"targetNode"}),"): ",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(i.code,{children:"LexicalNode"})}),"[]"]}),"\n",(0,n.jsx)(i.p,{children:"Returns a list of nodes that are between this node and\nthe target node in the EditorState."}),"\n",(0,n.jsx)(i.h4,{id:"parameters-6",children:"Parameters"}),"\n",(0,n.jsxs)(i.table,{children:[(0,n.jsx)(i.thead,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Type"}),(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,n.jsx)(i.tbody,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"targetNode"})}),(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(i.code,{children:"LexicalNode"})})}),(0,n.jsx)(i.td,{style:{textAlign:"left"},children:"the node that marks the other end of the range of nodes to be returned."})]})})]}),"\n",(0,n.jsx)(i.h4,{id:"returns-17",children:"Returns"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(i.code,{children:"LexicalNode"})}),"[]"]}),"\n",(0,n.jsx)(i.h4,{id:"inherited-from-14",children:"Inherited from"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode",children:"DecoratorNode"}),".",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode#getnodesbetween",children:"getNodesBetween"})]}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-19",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L895",children:"packages/lexical/src/LexicalNode.ts:895"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"getparent",children:"getParent"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"getParent"}),"<",(0,n.jsx)(i.code,{children:"T"}),">(): ",(0,n.jsx)(i.code,{children:"null"})," | ",(0,n.jsx)(i.code,{children:"T"})]}),"\n",(0,n.jsx)(i.p,{children:"Returns the parent of this node, or null if none is found."}),"\n",(0,n.jsx)(i.h4,{id:"type-parameters-4",children:"Type parameters"}),"\n",(0,n.jsxs)(i.table,{children:[(0,n.jsx)(i.thead,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(i.tbody,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"T"})}),(0,n.jsxs)(i.td,{style:{textAlign:"left"},children:["extends ",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode",children:(0,n.jsx)(i.code,{children:"ElementNode"})})]})]})})]}),"\n",(0,n.jsx)(i.h4,{id:"returns-18",children:"Returns"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.code,{children:"null"})," | ",(0,n.jsx)(i.code,{children:"T"})]}),"\n",(0,n.jsx)(i.h4,{id:"inherited-from-15",children:"Inherited from"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode",children:"DecoratorNode"}),".",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode#getparent",children:"getParent"})]}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-20",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L671",children:"packages/lexical/src/LexicalNode.ts:671"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"getparentkeys",children:"getParentKeys"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"getParentKeys"}),"(): ",(0,n.jsx)(i.code,{children:"string"}),"[]"]}),"\n",(0,n.jsx)(i.p,{children:"Returns a list of the keys of every ancestor of this node,\nall the way up to the RootNode."}),"\n",(0,n.jsx)(i.h4,{id:"returns-19",children:"Returns"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.code,{children:"string"}),"[]"]}),"\n",(0,n.jsx)(i.h4,{id:"inherited-from-16",children:"Inherited from"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode",children:"DecoratorNode"}),".",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode#getparentkeys",children:"getParentKeys"})]}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-21",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L748",children:"packages/lexical/src/LexicalNode.ts:748"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"getparentorthrow",children:"getParentOrThrow"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"getParentOrThrow"}),"<",(0,n.jsx)(i.code,{children:"T"}),">(): ",(0,n.jsx)(i.code,{children:"T"})]}),"\n",(0,n.jsx)(i.p,{children:"Returns the parent of this node, or throws if none is found."}),"\n",(0,n.jsx)(i.h4,{id:"type-parameters-5",children:"Type parameters"}),"\n",(0,n.jsxs)(i.table,{children:[(0,n.jsx)(i.thead,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(i.tbody,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"T"})}),(0,n.jsxs)(i.td,{style:{textAlign:"left"},children:["extends ",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode",children:(0,n.jsx)(i.code,{children:"ElementNode"})})]})]})})]}),"\n",(0,n.jsx)(i.h4,{id:"returns-20",children:"Returns"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.code,{children:"T"})}),"\n",(0,n.jsx)(i.h4,{id:"inherited-from-17",children:"Inherited from"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode",children:"DecoratorNode"}),".",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode#getparentorthrow",children:"getParentOrThrow"})]}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-22",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L682",children:"packages/lexical/src/LexicalNode.ts:682"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"getparents",children:"getParents"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"getParents"}),"(): ",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode",children:(0,n.jsx)(i.code,{children:"ElementNode"})}),"[]"]}),"\n",(0,n.jsx)(i.p,{children:"Returns a list of the every ancestor of this node,\nall the way up to the RootNode."}),"\n",(0,n.jsx)(i.h4,{id:"returns-21",children:"Returns"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode",children:(0,n.jsx)(i.code,{children:"ElementNode"})}),"[]"]}),"\n",(0,n.jsx)(i.h4,{id:"inherited-from-18",children:"Inherited from"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode",children:"DecoratorNode"}),".",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode#getparents",children:"getParents"})]}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-23",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L733",children:"packages/lexical/src/LexicalNode.ts:733"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"getprevioussibling",children:"getPreviousSibling"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"getPreviousSibling"}),"<",(0,n.jsx)(i.code,{children:"T"}),">(): ",(0,n.jsx)(i.code,{children:"null"})," | ",(0,n.jsx)(i.code,{children:"T"})]}),"\n",(0,n.jsx)(i.p,{children:'Returns the "previous" siblings - that is, the node that comes\nbefore this one in the same parent.'}),"\n",(0,n.jsx)(i.h4,{id:"type-parameters-6",children:"Type parameters"}),"\n",(0,n.jsxs)(i.table,{children:[(0,n.jsx)(i.thead,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(i.tbody,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"T"})}),(0,n.jsxs)(i.td,{style:{textAlign:"left"},children:["extends ",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(i.code,{children:"LexicalNode"})})]})]})})]}),"\n",(0,n.jsx)(i.h4,{id:"returns-22",children:"Returns"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.code,{children:"null"})," | ",(0,n.jsx)(i.code,{children:"T"})]}),"\n",(0,n.jsx)(i.h4,{id:"inherited-from-19",children:"Inherited from"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode",children:"DecoratorNode"}),".",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode#getprevioussibling",children:"getPreviousSibling"})]}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-24",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L763",children:"packages/lexical/src/LexicalNode.ts:763"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"getprevioussiblings",children:"getPreviousSiblings"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"getPreviousSiblings"}),"<",(0,n.jsx)(i.code,{children:"T"}),">(): ",(0,n.jsx)(i.code,{children:"T"}),"[]"]}),"\n",(0,n.jsx)(i.p,{children:'Returns the "previous" siblings - that is, the nodes that come between\nthis one and the first child of it\'s parent, inclusive.'}),"\n",(0,n.jsx)(i.h4,{id:"type-parameters-7",children:"Type parameters"}),"\n",(0,n.jsxs)(i.table,{children:[(0,n.jsx)(i.thead,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(i.tbody,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"T"})}),(0,n.jsxs)(i.td,{style:{textAlign:"left"},children:["extends ",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(i.code,{children:"LexicalNode"})})]})]})})]}),"\n",(0,n.jsx)(i.h4,{id:"returns-23",children:"Returns"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.code,{children:"T"}),"[]"]}),"\n",(0,n.jsx)(i.h4,{id:"inherited-from-20",children:"Inherited from"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode",children:"DecoratorNode"}),".",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode#getprevioussiblings",children:"getPreviousSiblings"})]}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-25",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L774",children:"packages/lexical/src/LexicalNode.ts:774"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"gettextcontent",children:"getTextContent"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"getTextContent"}),"(): ",(0,n.jsx)(i.code,{children:"string"})]}),"\n",(0,n.jsx)(i.p,{children:"Returns the text content of the node. Override this for\ncustom nodes that should have a representation in plain text\nformat (for copy + paste, for example)"}),"\n",(0,n.jsx)(i.h4,{id:"returns-24",children:"Returns"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.code,{children:"string"})}),"\n",(0,n.jsx)(i.h4,{id:"inherited-from-21",children:"Inherited from"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode",children:"DecoratorNode"}),".",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode#gettextcontent",children:"getTextContent"})]}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-26",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L1026",children:"packages/lexical/src/LexicalNode.ts:1026"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"gettextcontentsize",children:"getTextContentSize"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"getTextContentSize"}),"(): ",(0,n.jsx)(i.code,{children:"number"})]}),"\n",(0,n.jsx)(i.p,{children:"Returns the length of the string produced by calling getTextContent on this node."}),"\n",(0,n.jsx)(i.h4,{id:"returns-25",children:"Returns"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.code,{children:"number"})}),"\n",(0,n.jsx)(i.h4,{id:"inherited-from-22",children:"Inherited from"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode",children:"DecoratorNode"}),".",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode#gettextcontentsize",children:"getTextContentSize"})]}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-27",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L1034",children:"packages/lexical/src/LexicalNode.ts:1034"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"gettoplevelelement",children:"getTopLevelElement"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"getTopLevelElement"}),"(): ",(0,n.jsx)(i.code,{children:"null"})," | ",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode",children:(0,n.jsx)(i.code,{children:"ElementNode"})})," | ",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical_react_LexicalDecoratorBlockNode.DecoratorBlockNode",children:(0,n.jsx)(i.code,{children:"DecoratorBlockNode"})})]}),"\n",(0,n.jsxs)(i.p,{children:["Returns the highest (in the EditorState tree)\nnon-root ancestor of this node, or null if none is found. See ",(0,n.jsx)(i.a,{href:"/docs/api/modules/lexical#isrootorshadowroot",children:"$isRootOrShadowRoot"}),'\nfor more information on which Elements comprise "roots".']}),"\n",(0,n.jsx)(i.h4,{id:"returns-26",children:"Returns"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.code,{children:"null"})," | ",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode",children:(0,n.jsx)(i.code,{children:"ElementNode"})})," | ",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical_react_LexicalDecoratorBlockNode.DecoratorBlockNode",children:(0,n.jsx)(i.code,{children:"DecoratorBlockNode"})})]}),"\n",(0,n.jsx)(i.h4,{id:"inherited-from-23",children:"Inherited from"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode",children:"DecoratorNode"}),".",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode#gettoplevelelement",children:"getTopLevelElement"})]}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-28",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/nodes/LexicalDecoratorNode.ts#L19",children:"packages/lexical/src/nodes/LexicalDecoratorNode.ts:19"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"gettoplevelelementorthrow",children:"getTopLevelElementOrThrow"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"getTopLevelElementOrThrow"}),"(): ",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode",children:(0,n.jsx)(i.code,{children:"ElementNode"})})," | ",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical_react_LexicalDecoratorBlockNode.DecoratorBlockNode",children:(0,n.jsx)(i.code,{children:"DecoratorBlockNode"})})]}),"\n",(0,n.jsxs)(i.p,{children:["Returns the highest (in the EditorState tree)\nnon-root ancestor of this node, or throws if none is found. See ",(0,n.jsx)(i.a,{href:"/docs/api/modules/lexical#isrootorshadowroot",children:"$isRootOrShadowRoot"}),'\nfor more information on which Elements comprise "roots".']}),"\n",(0,n.jsx)(i.h4,{id:"returns-27",children:"Returns"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode",children:(0,n.jsx)(i.code,{children:"ElementNode"})})," | ",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical_react_LexicalDecoratorBlockNode.DecoratorBlockNode",children:(0,n.jsx)(i.code,{children:"DecoratorBlockNode"})})]}),"\n",(0,n.jsx)(i.h4,{id:"inherited-from-24",children:"Inherited from"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode",children:"DecoratorNode"}),".",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode#gettoplevelelementorthrow",children:"getTopLevelElementOrThrow"})]}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-29",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/nodes/LexicalDecoratorNode.ts#L20",children:"packages/lexical/src/nodes/LexicalDecoratorNode.ts:20"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"gettype",children:"getType"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"getType"}),"(): ",(0,n.jsx)(i.code,{children:"string"})]}),"\n",(0,n.jsx)(i.p,{children:"Returns the string type of this node."}),"\n",(0,n.jsx)(i.h4,{id:"returns-28",children:"Returns"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.code,{children:"string"})}),"\n",(0,n.jsx)(i.h4,{id:"inherited-from-25",children:"Inherited from"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode",children:"DecoratorNode"}),".",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode#gettype",children:"getType"})]}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-30",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L557",children:"packages/lexical/src/LexicalNode.ts:557"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"getwritable",children:"getWritable"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"getWritable"}),"(): ",(0,n.jsx)(i.code,{children:"this"})]}),"\n",(0,n.jsxs)(i.p,{children:["Returns a mutable version of the node using ",(0,n.jsx)(i.a,{href:"/docs/api/modules/lexical#clonewithproperties",children:"$cloneWithProperties"}),"\nif necessary. Will throw an error if called outside of a Lexical Editor\n",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalEditor#update",children:"LexicalEditor.update"})," callback."]}),"\n",(0,n.jsx)(i.h4,{id:"returns-29",children:"Returns"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.code,{children:"this"})}),"\n",(0,n.jsx)(i.h4,{id:"inherited-from-26",children:"Inherited from"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode",children:"DecoratorNode"}),".",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode#getwritable",children:"getWritable"})]}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-31",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L993",children:"packages/lexical/src/LexicalNode.ts:993"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"insertafter",children:"insertAfter"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"insertAfter"}),"(",(0,n.jsx)(i.code,{children:"nodeToInsert"}),", ",(0,n.jsx)(i.code,{children:"restoreSelection?"}),"): ",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(i.code,{children:"LexicalNode"})})]}),"\n",(0,n.jsx)(i.p,{children:"Inserts a node after this LexicalNode (as the next sibling)."}),"\n",(0,n.jsx)(i.h4,{id:"parameters-7",children:"Parameters"}),"\n",(0,n.jsxs)(i.table,{children:[(0,n.jsx)(i.thead,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Type"}),(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Default value"}),(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,n.jsxs)(i.tbody,{children:[(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"nodeToInsert"})}),(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(i.code,{children:"LexicalNode"})})}),(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"undefined"})}),(0,n.jsx)(i.td,{style:{textAlign:"left"},children:"The node to insert after this one."})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"restoreSelection"})}),(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"boolean"})}),(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"true"})}),(0,n.jsx)(i.td,{style:{textAlign:"left"},children:"Whether or not to attempt to resolve the selection to the appropriate place after the operation is complete."})]})]})]}),"\n",(0,n.jsx)(i.h4,{id:"returns-30",children:"Returns"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(i.code,{children:"LexicalNode"})})}),"\n",(0,n.jsx)(i.h4,{id:"inherited-from-27",children:"Inherited from"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode",children:"DecoratorNode"}),".",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode#insertafter",children:"insertAfter"})]}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-32",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L1257",children:"packages/lexical/src/LexicalNode.ts:1257"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"insertbefore",children:"insertBefore"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"insertBefore"}),"(",(0,n.jsx)(i.code,{children:"nodeToInsert"}),", ",(0,n.jsx)(i.code,{children:"restoreSelection?"}),"): ",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(i.code,{children:"LexicalNode"})})]}),"\n",(0,n.jsx)(i.p,{children:"Inserts a node before this LexicalNode (as the previous sibling)."}),"\n",(0,n.jsx)(i.h4,{id:"parameters-8",children:"Parameters"}),"\n",(0,n.jsxs)(i.table,{children:[(0,n.jsx)(i.thead,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Type"}),(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Default value"}),(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,n.jsxs)(i.tbody,{children:[(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"nodeToInsert"})}),(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(i.code,{children:"LexicalNode"})})}),(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"undefined"})}),(0,n.jsx)(i.td,{style:{textAlign:"left"},children:"The node to insert before this one."})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"restoreSelection"})}),(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"boolean"})}),(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"true"})}),(0,n.jsx)(i.td,{style:{textAlign:"left"},children:"Whether or not to attempt to resolve the selection to the appropriate place after the operation is complete."})]})]})]}),"\n",(0,n.jsx)(i.h4,{id:"returns-31",children:"Returns"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(i.code,{children:"LexicalNode"})})}),"\n",(0,n.jsx)(i.h4,{id:"inherited-from-28",children:"Inherited from"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode",children:"DecoratorNode"}),".",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode#insertbefore",children:"insertBefore"})]}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-33",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L1324",children:"packages/lexical/src/LexicalNode.ts:1324"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"is",children:"is"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"is"}),"(",(0,n.jsx)(i.code,{children:"object"}),"): ",(0,n.jsx)(i.code,{children:"boolean"})]}),"\n",(0,n.jsx)(i.p,{children:"Returns true if the provided node is the exact same one as this node, from Lexical's perspective.\nAlways use this instead of referential equality."}),"\n",(0,n.jsx)(i.h4,{id:"parameters-9",children:"Parameters"}),"\n",(0,n.jsxs)(i.table,{children:[(0,n.jsx)(i.thead,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Type"}),(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,n.jsx)(i.tbody,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"object"})}),(0,n.jsxs)(i.td,{style:{textAlign:"left"},children:[(0,n.jsx)(i.code,{children:"undefined"})," | ",(0,n.jsx)(i.code,{children:"null"})," | ",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(i.code,{children:"LexicalNode"})})]}),(0,n.jsx)(i.td,{style:{textAlign:"left"},children:"the node to perform the equality comparison on."})]})})]}),"\n",(0,n.jsx)(i.h4,{id:"returns-32",children:"Returns"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.code,{children:"boolean"})}),"\n",(0,n.jsx)(i.h4,{id:"inherited-from-29",children:"Inherited from"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode",children:"DecoratorNode"}),".",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode#is",children:"is"})]}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-34",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L842",children:"packages/lexical/src/LexicalNode.ts:842"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"isattached",children:"isAttached"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"isAttached"}),"(): ",(0,n.jsx)(i.code,{children:"boolean"})]}),"\n",(0,n.jsx)(i.p,{children:'Returns true if there is a path between this node and the RootNode, false otherwise.\nThis is a way of determining if the node is "attached" EditorState. Unattached nodes\nwon\'t be reconciled and will ultimately be cleaned up by the Lexical GC.'}),"\n",(0,n.jsx)(i.h4,{id:"returns-33",children:"Returns"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.code,{children:"boolean"})}),"\n",(0,n.jsx)(i.h4,{id:"inherited-from-30",children:"Inherited from"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode",children:"DecoratorNode"}),".",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode#isattached",children:"isAttached"})]}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-35",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L574",children:"packages/lexical/src/LexicalNode.ts:574"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"isbefore",children:"isBefore"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"isBefore"}),"(",(0,n.jsx)(i.code,{children:"targetNode"}),"): ",(0,n.jsx)(i.code,{children:"boolean"})]}),"\n",(0,n.jsx)(i.p,{children:"Returns true if this node logically precedes the target node in the\neditor state, false otherwise (including if there is no common ancestor)."}),"\n",(0,n.jsxs)(i.p,{children:["Note that this notion of isBefore is based on post-order; a descendant\nnode is always before its ancestors. See also\n",(0,n.jsx)(i.a,{href:"/docs/api/modules/lexical#getcommonancestor",children:"$getCommonAncestor"})," and $comparePointCaretNext for\nmore flexible ways to determine the relative positions of nodes."]}),"\n",(0,n.jsx)(i.h4,{id:"parameters-10",children:"Parameters"}),"\n",(0,n.jsxs)(i.table,{children:[(0,n.jsx)(i.thead,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Type"}),(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,n.jsx)(i.tbody,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"targetNode"})}),(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(i.code,{children:"LexicalNode"})})}),(0,n.jsx)(i.td,{style:{textAlign:"left"},children:"the node we're testing to see if it's after this one."})]})})]}),"\n",(0,n.jsx)(i.h4,{id:"returns-34",children:"Returns"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.code,{children:"boolean"})}),"\n",(0,n.jsx)(i.h4,{id:"inherited-from-31",children:"Inherited from"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode",children:"DecoratorNode"}),".",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode#isbefore",children:"isBefore"})]}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-36",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L860",children:"packages/lexical/src/LexicalNode.ts:860"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"isdirty",children:"isDirty"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"isDirty"}),"(): ",(0,n.jsx)(i.code,{children:"boolean"})]}),"\n",(0,n.jsx)(i.p,{children:"Returns true if this node has been marked dirty during this update cycle."}),"\n",(0,n.jsx)(i.h4,{id:"returns-35",children:"Returns"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.code,{children:"boolean"})}),"\n",(0,n.jsx)(i.h4,{id:"inherited-from-32",children:"Inherited from"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode",children:"DecoratorNode"}),".",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode#isdirty",children:"isDirty"})]}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-37",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L965",children:"packages/lexical/src/LexicalNode.ts:965"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"isinline",children:"isInline"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"isInline"}),"(): ",(0,n.jsx)(i.code,{children:"false"})]}),"\n",(0,n.jsx)(i.h4,{id:"returns-36",children:"Returns"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.code,{children:"false"})}),"\n",(0,n.jsx)(i.h4,{id:"overrides-3",children:"Overrides"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode",children:"DecoratorNode"}),".",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode#isinline",children:"isInline"})]}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-38",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-react/src/LexicalDecoratorBlockNode.ts#L69",children:"packages/lexical-react/src/LexicalDecoratorBlockNode.ts:69"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"isisolated",children:"isIsolated"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"isIsolated"}),"(): ",(0,n.jsx)(i.code,{children:"boolean"})]}),"\n",(0,n.jsx)(i.h4,{id:"returns-37",children:"Returns"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.code,{children:"boolean"})}),"\n",(0,n.jsx)(i.h4,{id:"inherited-from-33",children:"Inherited from"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode",children:"DecoratorNode"}),".",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode#isisolated",children:"isIsolated"})]}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-39",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/nodes/LexicalDecoratorNode.ts#L35",children:"packages/lexical/src/nodes/LexicalDecoratorNode.ts:35"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"iskeyboardselectable",children:"isKeyboardSelectable"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"isKeyboardSelectable"}),"(): ",(0,n.jsx)(i.code,{children:"boolean"})]}),"\n",(0,n.jsx)(i.h4,{id:"returns-38",children:"Returns"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.code,{children:"boolean"})}),"\n",(0,n.jsx)(i.h4,{id:"inherited-from-34",children:"Inherited from"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode",children:"DecoratorNode"}),".",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode#iskeyboardselectable",children:"isKeyboardSelectable"})]}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-40",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/nodes/LexicalDecoratorNode.ts#L43",children:"packages/lexical/src/nodes/LexicalDecoratorNode.ts:43"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"isparentof",children:"isParentOf"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"isParentOf"}),"(",(0,n.jsx)(i.code,{children:"targetNode"}),"): ",(0,n.jsx)(i.code,{children:"boolean"})]}),"\n",(0,n.jsx)(i.p,{children:"Returns true if this node is an ancestor of and distinct from the target node, false otherwise."}),"\n",(0,n.jsx)(i.h4,{id:"parameters-11",children:"Parameters"}),"\n",(0,n.jsxs)(i.table,{children:[(0,n.jsx)(i.thead,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Type"}),(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,n.jsx)(i.tbody,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"targetNode"})}),(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(i.code,{children:"LexicalNode"})})}),(0,n.jsx)(i.td,{style:{textAlign:"left"},children:"the would-be child node."})]})})]}),"\n",(0,n.jsx)(i.h4,{id:"returns-39",children:"Returns"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.code,{children:"boolean"})}),"\n",(0,n.jsx)(i.h4,{id:"inherited-from-35",children:"Inherited from"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode",children:"DecoratorNode"}),".",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode#isparentof",children:"isParentOf"})]}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-41",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L883",children:"packages/lexical/src/LexicalNode.ts:883"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"isparentrequired",children:"isParentRequired"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"isParentRequired"}),"(): ",(0,n.jsx)(i.code,{children:"boolean"})]}),"\n",(0,n.jsx)(i.p,{children:"Whether or not this node has a required parent. Used during copy + paste operations\nto normalize nodes that would otherwise be orphaned. For example, ListItemNodes without\na ListNode parent or TextNodes with a ParagraphNode parent."}),"\n",(0,n.jsx)(i.h4,{id:"returns-40",children:"Returns"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.code,{children:"boolean"})}),"\n",(0,n.jsx)(i.h4,{id:"inherited-from-36",children:"Inherited from"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode",children:"DecoratorNode"}),".",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode#isparentrequired",children:"isParentRequired"})]}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-42",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L1364",children:"packages/lexical/src/LexicalNode.ts:1364"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"isselected",children:"isSelected"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"isSelected"}),"(",(0,n.jsx)(i.code,{children:"selection?"}),"): ",(0,n.jsx)(i.code,{children:"boolean"})]}),"\n",(0,n.jsxs)(i.p,{children:["Returns true if this node is contained within the provided Selection., false otherwise.\nRelies on the algorithms implemented in ",(0,n.jsx)(i.a,{href:"/docs/api/interfaces/lexical.BaseSelection#getnodes",children:"BaseSelection.getNodes"})," to determine\nwhat's included."]}),"\n",(0,n.jsx)(i.h4,{id:"parameters-12",children:"Parameters"}),"\n",(0,n.jsxs)(i.table,{children:[(0,n.jsx)(i.thead,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Type"}),(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,n.jsx)(i.tbody,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"selection?"})}),(0,n.jsxs)(i.td,{style:{textAlign:"left"},children:[(0,n.jsx)(i.code,{children:"null"})," | ",(0,n.jsx)(i.a,{href:"/docs/api/interfaces/lexical.BaseSelection",children:(0,n.jsx)(i.code,{children:"BaseSelection"})})]}),(0,n.jsx)(i.td,{style:{textAlign:"left"},children:"The selection that we want to determine if the node is in."})]})})]}),"\n",(0,n.jsx)(i.h4,{id:"returns-41",children:"Returns"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.code,{children:"boolean"})}),"\n",(0,n.jsx)(i.h4,{id:"inherited-from-37",children:"Inherited from"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode",children:"DecoratorNode"}),".",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode#isselected",children:"isSelected"})]}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-43",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L598",children:"packages/lexical/src/LexicalNode.ts:598"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"markdirty",children:"markDirty"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"markDirty"}),"(): ",(0,n.jsx)(i.code,{children:"void"})]}),"\n",(0,n.jsx)(i.p,{children:"Marks a node dirty, triggering transforms and\nforcing it to be reconciled during the update cycle."}),"\n",(0,n.jsx)(i.h4,{id:"returns-42",children:"Returns"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.code,{children:"void"})}),"\n",(0,n.jsx)(i.h4,{id:"inherited-from-38",children:"Inherited from"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode",children:"DecoratorNode"}),".",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode#markdirty",children:"markDirty"})]}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-44",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L1433",children:"packages/lexical/src/LexicalNode.ts:1433"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"remove",children:"remove"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"remove"}),"(",(0,n.jsx)(i.code,{children:"preserveEmptyParent?"}),"): ",(0,n.jsx)(i.code,{children:"void"})]}),"\n",(0,n.jsx)(i.p,{children:"Removes this LexicalNode from the EditorState. If the node isn't re-inserted\nsomewhere, the Lexical garbage collector will eventually clean it up."}),"\n",(0,n.jsx)(i.h4,{id:"parameters-13",children:"Parameters"}),"\n",(0,n.jsxs)(i.table,{children:[(0,n.jsx)(i.thead,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Type"}),(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,n.jsx)(i.tbody,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"preserveEmptyParent?"})}),(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"boolean"})}),(0,n.jsxs)(i.td,{style:{textAlign:"left"},children:["If falsy, the node's parent will be removed if it's empty after the removal operation. This is the default behavior, subject to other node heuristics such as ",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode#canbeempty",children:"ElementNode#canBeEmpty"})]})]})})]}),"\n",(0,n.jsx)(i.h4,{id:"returns-43",children:"Returns"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.code,{children:"void"})}),"\n",(0,n.jsx)(i.h4,{id:"inherited-from-39",children:"Inherited from"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode",children:"DecoratorNode"}),".",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode#remove",children:"remove"})]}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-45",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L1176",children:"packages/lexical/src/LexicalNode.ts:1176"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"replace",children:"replace"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"replace"}),"<",(0,n.jsx)(i.code,{children:"N"}),">(",(0,n.jsx)(i.code,{children:"replaceWith"}),", ",(0,n.jsx)(i.code,{children:"includeChildren?"}),"): ",(0,n.jsx)(i.code,{children:"N"})]}),"\n",(0,n.jsx)(i.p,{children:"Replaces this LexicalNode with the provided node, optionally transferring the children\nof the replaced node to the replacing node."}),"\n",(0,n.jsx)(i.h4,{id:"type-parameters-8",children:"Type parameters"}),"\n",(0,n.jsxs)(i.table,{children:[(0,n.jsx)(i.thead,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(i.tbody,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"N"})}),(0,n.jsxs)(i.td,{style:{textAlign:"left"},children:["extends ",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(i.code,{children:"LexicalNode"})})]})]})})]}),"\n",(0,n.jsx)(i.h4,{id:"parameters-14",children:"Parameters"}),"\n",(0,n.jsxs)(i.table,{children:[(0,n.jsx)(i.thead,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Type"}),(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,n.jsxs)(i.tbody,{children:[(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"replaceWith"})}),(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"N"})}),(0,n.jsx)(i.td,{style:{textAlign:"left"},children:"The node to replace this one with."})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"includeChildren?"})}),(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"boolean"})}),(0,n.jsx)(i.td,{style:{textAlign:"left"},children:"Whether or not to transfer the children of this node to the replacing node."})]})]})]}),"\n",(0,n.jsx)(i.h4,{id:"returns-44",children:"Returns"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.code,{children:"N"})}),"\n",(0,n.jsx)(i.h4,{id:"inherited-from-40",children:"Inherited from"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode",children:"DecoratorNode"}),".",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode#replace",children:"replace"})]}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-46",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L1187",children:"packages/lexical/src/LexicalNode.ts:1187"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"selectend",children:"selectEnd"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"selectEnd"}),"(): ",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.RangeSelection",children:(0,n.jsx)(i.code,{children:"RangeSelection"})})]}),"\n",(0,n.jsx)(i.h4,{id:"returns-45",children:"Returns"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.RangeSelection",children:(0,n.jsx)(i.code,{children:"RangeSelection"})})}),"\n",(0,n.jsx)(i.h4,{id:"inherited-from-41",children:"Inherited from"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode",children:"DecoratorNode"}),".",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode#selectend",children:"selectEnd"})]}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-47",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L1380",children:"packages/lexical/src/LexicalNode.ts:1380"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"selectnext",children:"selectNext"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"selectNext"}),"(",(0,n.jsx)(i.code,{children:"anchorOffset?"}),", ",(0,n.jsx)(i.code,{children:"focusOffset?"}),"): ",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.RangeSelection",children:(0,n.jsx)(i.code,{children:"RangeSelection"})})]}),"\n",(0,n.jsx)(i.p,{children:"Moves selection to the next sibling of this node, at the specified offsets."}),"\n",(0,n.jsx)(i.h4,{id:"parameters-15",children:"Parameters"}),"\n",(0,n.jsxs)(i.table,{children:[(0,n.jsx)(i.thead,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Type"}),(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,n.jsxs)(i.tbody,{children:[(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"anchorOffset?"})}),(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"number"})}),(0,n.jsx)(i.td,{style:{textAlign:"left"},children:"The anchor offset for selection."})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"focusOffset?"})}),(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"number"})}),(0,n.jsx)(i.td,{style:{textAlign:"left"},children:"The focus offset for selection"})]})]})]}),"\n",(0,n.jsx)(i.h4,{id:"returns-46",children:"Returns"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.RangeSelection",children:(0,n.jsx)(i.code,{children:"RangeSelection"})})}),"\n",(0,n.jsx)(i.h4,{id:"inherited-from-42",children:"Inherited from"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode",children:"DecoratorNode"}),".",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode#selectnext",children:"selectNext"})]}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-48",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L1412",children:"packages/lexical/src/LexicalNode.ts:1412"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"selectprevious",children:"selectPrevious"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"selectPrevious"}),"(",(0,n.jsx)(i.code,{children:"anchorOffset?"}),", ",(0,n.jsx)(i.code,{children:"focusOffset?"}),"): ",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.RangeSelection",children:(0,n.jsx)(i.code,{children:"RangeSelection"})})]}),"\n",(0,n.jsx)(i.p,{children:"Moves selection to the previous sibling of this node, at the specified offsets."}),"\n",(0,n.jsx)(i.h4,{id:"parameters-16",children:"Parameters"}),"\n",(0,n.jsxs)(i.table,{children:[(0,n.jsx)(i.thead,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Type"}),(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,n.jsxs)(i.tbody,{children:[(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"anchorOffset?"})}),(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"number"})}),(0,n.jsx)(i.td,{style:{textAlign:"left"},children:"The anchor offset for selection."})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"focusOffset?"})}),(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"number"})}),(0,n.jsx)(i.td,{style:{textAlign:"left"},children:"The focus offset for selection"})]})]})]}),"\n",(0,n.jsx)(i.h4,{id:"returns-47",children:"Returns"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.RangeSelection",children:(0,n.jsx)(i.code,{children:"RangeSelection"})})}),"\n",(0,n.jsx)(i.h4,{id:"inherited-from-43",children:"Inherited from"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode",children:"DecoratorNode"}),".",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode#selectprevious",children:"selectPrevious"})]}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-49",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L1390",children:"packages/lexical/src/LexicalNode.ts:1390"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"selectstart",children:"selectStart"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"selectStart"}),"(): ",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.RangeSelection",children:(0,n.jsx)(i.code,{children:"RangeSelection"})})]}),"\n",(0,n.jsx)(i.h4,{id:"returns-48",children:"Returns"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.RangeSelection",children:(0,n.jsx)(i.code,{children:"RangeSelection"})})}),"\n",(0,n.jsx)(i.h4,{id:"inherited-from-44",children:"Inherited from"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode",children:"DecoratorNode"}),".",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode#selectstart",children:"selectStart"})]}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-50",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L1376",children:"packages/lexical/src/LexicalNode.ts:1376"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"setformat",children:"setFormat"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"setFormat"}),"(",(0,n.jsx)(i.code,{children:"format"}),"): ",(0,n.jsx)(i.code,{children:"this"})]}),"\n",(0,n.jsx)(i.h4,{id:"parameters-17",children:"Parameters"}),"\n",(0,n.jsxs)(i.table,{children:[(0,n.jsx)(i.thead,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(i.tbody,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"format"})}),(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.a,{href:"/docs/api/modules/lexical#elementformattype",children:(0,n.jsx)(i.code,{children:"ElementFormatType"})})})]})})]}),"\n",(0,n.jsx)(i.h4,{id:"returns-49",children:"Returns"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.code,{children:"this"})}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-51",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-react/src/LexicalDecoratorBlockNode.ts#L63",children:"packages/lexical-react/src/LexicalDecoratorBlockNode.ts:63"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"updatedom",children:"updateDOM"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"updateDOM"}),"(): ",(0,n.jsx)(i.code,{children:"false"})]}),"\n",(0,n.jsx)(i.p,{children:"Called when a node changes and should update the DOM\nin whatever way is necessary to make it align with any changes that might\nhave happened during the update."}),"\n",(0,n.jsx)(i.p,{children:'Returning "true" here will cause lexical to unmount and recreate the DOM node\n(by calling createDOM). You would need to do this if the element tag changes,\nfor instance.'}),"\n",(0,n.jsx)(i.h4,{id:"returns-50",children:"Returns"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.code,{children:"false"})}),"\n",(0,n.jsx)(i.h4,{id:"overrides-4",children:"Overrides"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode",children:"DecoratorNode"}),".",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode#updatedom",children:"updateDOM"})]}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-52",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-react/src/LexicalDecoratorBlockNode.ts#L59",children:"packages/lexical-react/src/LexicalDecoratorBlockNode.ts:59"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"updatefromjson",children:"updateFromJSON"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"updateFromJSON"}),"(",(0,n.jsx)(i.code,{children:"serializedNode"}),"): ",(0,n.jsx)(i.code,{children:"this"})]}),"\n",(0,n.jsx)(i.p,{children:"Update this LexicalNode instance from serialized JSON. It's recommended\nto implement as much logic as possible in this method instead of the\nstatic importJSON method, so that the functionality can be inherited in subclasses."}),"\n",(0,n.jsx)(i.p,{children:"The LexicalUpdateJSON utility type should be used to ignore any type, version,\nor children properties in the JSON so that the extended JSON from subclasses\nare acceptable parameters for the super call."}),"\n",(0,n.jsx)(i.p,{children:"If overridden, this method must call super."}),"\n",(0,n.jsx)(i.h4,{id:"parameters-18",children:"Parameters"}),"\n",(0,n.jsxs)(i.table,{children:[(0,n.jsx)(i.thead,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(i.tbody,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"serializedNode"})}),(0,n.jsxs)(i.td,{style:{textAlign:"left"},children:[(0,n.jsx)(i.a,{href:"/docs/api/modules/lexical#lexicalupdatejson",children:(0,n.jsx)(i.code,{children:"LexicalUpdateJSON"})}),"<",(0,n.jsx)(i.a,{href:"/docs/api/modules/lexical_react_LexicalDecoratorBlockNode#serializeddecoratorblocknode",children:(0,n.jsx)(i.code,{children:"SerializedDecoratorBlockNode"})}),">"]})]})})]}),"\n",(0,n.jsx)(i.h4,{id:"returns-51",children:"Returns"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.code,{children:"this"})}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.strong,{children:(0,n.jsx)(i.code,{children:"Example"})})}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-ts",children:"class MyTextNode extends TextNode {\n  // ...\n  static importJSON(serializedNode: SerializedMyTextNode): MyTextNode {\n    return $createMyTextNode()\n      .updateFromJSON(serializedNode);\n  }\n  updateFromJSON(\n    serializedNode: LexicalUpdateJSON<SerializedMyTextNode>,\n  ): this {\n    return super.updateFromJSON(serializedNode)\n      .setMyProperty(serializedNode.myProperty);\n  }\n}\n"})}),"\n",(0,n.jsx)(i.h4,{id:"overrides-5",children:"Overrides"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode",children:"DecoratorNode"}),".",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode#updatefromjson",children:"updateFromJSON"})]}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-53",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-react/src/LexicalDecoratorBlockNode.ts#L43",children:"packages/lexical-react/src/LexicalDecoratorBlockNode.ts:43"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"clone",children:"clone"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"clone"}),"(",(0,n.jsx)(i.code,{children:"_data"}),"): ",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(i.code,{children:"LexicalNode"})})]}),"\n",(0,n.jsx)(i.p,{children:"Clones this node, creating a new node with a different key\nand adding it to the EditorState (but not attaching it anywhere!). All nodes must\nimplement this method."}),"\n",(0,n.jsx)(i.h4,{id:"parameters-19",children:"Parameters"}),"\n",(0,n.jsxs)(i.table,{children:[(0,n.jsx)(i.thead,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(i.tbody,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"_data"})}),(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"unknown"})})]})})]}),"\n",(0,n.jsx)(i.h4,{id:"returns-52",children:"Returns"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(i.code,{children:"LexicalNode"})})}),"\n",(0,n.jsx)(i.h4,{id:"inherited-from-45",children:"Inherited from"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode",children:"DecoratorNode"}),".",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode#clone",children:"clone"})]}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-54",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L426",children:"packages/lexical/src/LexicalNode.ts:426"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"gettype-1",children:"getType"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"getType"}),"(): ",(0,n.jsx)(i.code,{children:"string"})]}),"\n",(0,n.jsx)(i.p,{children:"Returns the string type of this node. Every node must\nimplement this and it MUST BE UNIQUE amongst nodes registered\non the editor."}),"\n",(0,n.jsx)(i.h4,{id:"returns-53",children:"Returns"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.code,{children:"string"})}),"\n",(0,n.jsx)(i.h4,{id:"inherited-from-46",children:"Inherited from"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode",children:"DecoratorNode"}),".",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode#gettype-1",children:"getType"})]}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-55",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L410",children:"packages/lexical/src/LexicalNode.ts:410"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"importjson",children:"importJSON"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"importJSON"}),"(",(0,n.jsx)(i.code,{children:"_serializedNode"}),"): ",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(i.code,{children:"LexicalNode"})})]}),"\n",(0,n.jsxs)(i.p,{children:["Controls how the this node is deserialized from JSON. This is usually boilerplate,\nbut provides an abstraction between the node implementation and serialized interface that can\nbe important if you ever make breaking changes to a node schema (by adding or removing properties).\nSee ",(0,n.jsx)(i.a,{href:"https://lexical.dev/docs/concepts/serialization#lexical---html",children:"Serialization & Deserialization"}),"."]}),"\n",(0,n.jsx)(i.h4,{id:"parameters-20",children:"Parameters"}),"\n",(0,n.jsxs)(i.table,{children:[(0,n.jsx)(i.thead,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(i.tbody,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"_serializedNode"})}),(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.a,{href:"/docs/api/modules/lexical#serializedlexicalnode",children:(0,n.jsx)(i.code,{children:"SerializedLexicalNode"})})})]})})]}),"\n",(0,n.jsx)(i.h4,{id:"returns-54",children:"Returns"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(i.code,{children:"LexicalNode"})})}),"\n",(0,n.jsx)(i.h4,{id:"inherited-from-47",children:"Inherited from"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode",children:"DecoratorNode"}),".",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode#importjson",children:"importJSON"})]}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-56",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L1111",children:"packages/lexical/src/LexicalNode.ts:1111"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"transform",children:"transform"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"transform"}),"(): ",(0,n.jsx)(i.code,{children:"null"})," | (",(0,n.jsx)(i.code,{children:"node"}),": ",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(i.code,{children:"LexicalNode"})}),") => ",(0,n.jsx)(i.code,{children:"void"})]}),"\n",(0,n.jsxs)(i.p,{children:["Registers the returned function as a transform on the node during\nEditor initialization. Most such use cases should be addressed via\nthe ",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalEditor#registernodetransform",children:"LexicalEditor.registerNodeTransform"})," API."]}),"\n",(0,n.jsx)(i.p,{children:"Experimental - use at your own risk."}),"\n",(0,n.jsx)(i.h4,{id:"returns-55",children:"Returns"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.code,{children:"null"})," | (",(0,n.jsx)(i.code,{children:"node"}),": ",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(i.code,{children:"LexicalNode"})}),") => ",(0,n.jsx)(i.code,{children:"void"})]}),"\n",(0,n.jsx)(i.h4,{id:"inherited-from-48",children:"Inherited from"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode",children:"DecoratorNode"}),".",(0,n.jsx)(i.a,{href:"/docs/api/classes/lexical.DecoratorNode#transform",children:"transform"})]}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-57",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/LexicalNode.ts#L1162",children:"packages/lexical/src/LexicalNode.ts:1162"})})]})}function h(e={}){let{wrapper:i}={...(0,s.a)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(o,{...e})}):o(e)}},22840:function(e,i,l){l.d(i,{Z:()=>t,a:()=>d});var r=l(2784);let n={},s=r.createContext(n);function d(e){let i=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function t(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:d(e.components),r.createElement(s.Provider,{value:i},e.children)}}}]);