"use strict";(self.webpackChunk_lexical_website=self.webpackChunk_lexical_website||[]).push([["1113"],{1998:function(e,l,i){i.r(l),i.d(l,{frontMatter:()=>d,default:()=>x,contentTitle:()=>r,assets:()=>c,toc:()=>a,metadata:()=>n});var n=JSON.parse('{"id":"api/modules/lexical_utils","title":"Module: @lexical/utils","description":"Interfaces","source":"@site/docs/api/modules/lexical_utils.md","sourceDirName":"api/modules","slug":"/api/modules/lexical_utils","permalink":"/lexical/docs/api/modules/lexical_utils","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","frontMatter":{"id":"lexical_utils","title":"Module: @lexical/utils","custom_edit_url":null},"sidebar":"api","previous":{"title":"@lexical/text","permalink":"/lexical/docs/api/modules/lexical_text"},"next":{"title":"@lexical/yjs","permalink":"/lexical/docs/api/modules/lexical_yjs"}}'),s=i(52322),t=i(22840);let d={id:"lexical_utils",title:"Module: @lexical/utils",custom_edit_url:null},r=void 0,c={},a=[{value:"Interfaces",id:"interfaces",level:2},{value:"References",id:"references",level:2},{value:"$splitNode",id:"splitnode",level:3},{value:"isBlockDomNode",id:"isblockdomnode",level:3},{value:"isHTMLAnchorElement",id:"ishtmlanchorelement",level:3},{value:"isHTMLElement",id:"ishtmlelement",level:3},{value:"isInlineDomNode",id:"isinlinedomnode",level:3},{value:"Type Aliases",id:"type-aliases",level:2},{value:"DOMNodeToLexicalConversion",id:"domnodetolexicalconversion",level:3},{value:"Type declaration",id:"type-declaration",level:4},{value:"Parameters",id:"parameters",level:5},{value:"Returns",id:"returns",level:5},{value:"Defined in",id:"defined-in",level:4},{value:"DOMNodeToLexicalConversionMap",id:"domnodetolexicalconversionmap",level:3},{value:"Defined in",id:"defined-in-1",level:4},{value:"ObjectKlass",id:"objectklass",level:3},{value:"Type parameters",id:"type-parameters",level:4},{value:"Type declaration",id:"type-declaration-1",level:4},{value:"Parameters",id:"parameters-1",level:5},{value:"Returns",id:"returns-1",level:5},{value:"Defined in",id:"defined-in-2",level:4},{value:"Variables",id:"variables",level:2},{value:"CAN_USE_BEFORE_INPUT",id:"can_use_before_input",level:3},{value:"Defined in",id:"defined-in-3",level:4},{value:"CAN_USE_DOM",id:"can_use_dom",level:3},{value:"Defined in",id:"defined-in-4",level:4},{value:"IS_ANDROID",id:"is_android",level:3},{value:"Defined in",id:"defined-in-5",level:4},{value:"IS_ANDROID_CHROME",id:"is_android_chrome",level:3},{value:"Defined in",id:"defined-in-6",level:4},{value:"IS_APPLE",id:"is_apple",level:3},{value:"Defined in",id:"defined-in-7",level:4},{value:"IS_APPLE_WEBKIT",id:"is_apple_webkit",level:3},{value:"Defined in",id:"defined-in-8",level:4},{value:"IS_CHROME",id:"is_chrome",level:3},{value:"Defined in",id:"defined-in-9",level:4},{value:"IS_FIREFOX",id:"is_firefox",level:3},{value:"Defined in",id:"defined-in-10",level:4},{value:"IS_IOS",id:"is_ios",level:3},{value:"Defined in",id:"defined-in-11",level:4},{value:"IS_SAFARI",id:"is_safari",level:3},{value:"Defined in",id:"defined-in-12",level:4},{value:"Functions",id:"functions",level:2},{value:"$descendantsMatching",id:"descendantsmatching",level:3},{value:"Type parameters",id:"type-parameters-1",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-2",level:4},{value:"Defined in",id:"defined-in-13",level:4},{value:"$dfs",id:"dfs",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-3",level:4},{value:"Defined in",id:"defined-in-14",level:4},{value:"$dfsIterator",id:"dfsiterator",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-4",level:4},{value:"Defined in",id:"defined-in-15",level:4},{value:"$filter",id:"filter",level:3},{value:"Type parameters",id:"type-parameters-2",level:4},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-5",level:4},{value:"Defined in",id:"defined-in-16",level:4},{value:"$findMatchingParent",id:"findmatchingparent",level:3},{value:"Type parameters",id:"type-parameters-3",level:4},{value:"Parameters",id:"parameters-6",level:4},{value:"Returns",id:"returns-6",level:4},{value:"Defined in",id:"defined-in-17",level:4},{value:"Parameters",id:"parameters-7",level:4},{value:"Returns",id:"returns-7",level:4},{value:"Defined in",id:"defined-in-18",level:4},{value:"$firstToLastIterator",id:"firsttolastiterator",level:3},{value:"Parameters",id:"parameters-8",level:4},{value:"Returns",id:"returns-8",level:4},{value:"Defined in",id:"defined-in-19",level:4},{value:"$getAdjacentCaret",id:"getadjacentcaret",level:3},{value:"Type parameters",id:"type-parameters-4",level:4},{value:"Parameters",id:"parameters-9",level:4},{value:"Returns",id:"returns-9",level:4},{value:"Defined in",id:"defined-in-20",level:4},{value:"$getAdjacentSiblingOrParentSiblingCaret",id:"getadjacentsiblingorparentsiblingcaret",level:3},{value:"Type parameters",id:"type-parameters-5",level:4},{value:"Parameters",id:"parameters-10",level:4},{value:"Returns",id:"returns-10",level:4},{value:"Defined in",id:"defined-in-21",level:4},{value:"$getDepth",id:"getdepth",level:3},{value:"Parameters",id:"parameters-11",level:4},{value:"Returns",id:"returns-11",level:4},{value:"Defined in",id:"defined-in-22",level:4},{value:"$getNearestBlockElementAncestorOrThrow",id:"getnearestblockelementancestororthrow",level:3},{value:"Parameters",id:"parameters-12",level:4},{value:"Returns",id:"returns-12",level:4},{value:"Defined in",id:"defined-in-23",level:4},{value:"$getNearestNodeOfType",id:"getnearestnodeoftype",level:3},{value:"Type parameters",id:"type-parameters-6",level:4},{value:"Parameters",id:"parameters-13",level:4},{value:"Returns",id:"returns-13",level:4},{value:"Defined in",id:"defined-in-24",level:4},{value:"$getNextRightPreorderNode",id:"getnextrightpreordernode",level:3},{value:"Parameters",id:"parameters-14",level:4},{value:"Returns",id:"returns-14",level:4},{value:"Defined in",id:"defined-in-25",level:4},{value:"$getNextSiblingOrParentSibling",id:"getnextsiblingorparentsibling",level:3},{value:"Parameters",id:"parameters-15",level:4},{value:"Returns",id:"returns-15",level:4},{value:"Defined in",id:"defined-in-26",level:4},{value:"$insertFirst",id:"insertfirst",level:3},{value:"Parameters",id:"parameters-16",level:4},{value:"Returns",id:"returns-16",level:4},{value:"Defined in",id:"defined-in-27",level:4},{value:"$insertNodeToNearestRoot",id:"insertnodetonearestroot",level:3},{value:"Type parameters",id:"type-parameters-7",level:4},{value:"Parameters",id:"parameters-17",level:4},{value:"Returns",id:"returns-17",level:4},{value:"Defined in",id:"defined-in-28",level:4},{value:"$insertNodeToNearestRootAtCaret",id:"insertnodetonearestrootatcaret",level:3},{value:"Type parameters",id:"type-parameters-8",level:4},{value:"Parameters",id:"parameters-18",level:4},{value:"Returns",id:"returns-18",level:4},{value:"Defined in",id:"defined-in-29",level:4},{value:"$isEditorIsNestedEditor",id:"iseditorisnestededitor",level:3},{value:"Parameters",id:"parameters-19",level:4},{value:"Returns",id:"returns-19",level:4},{value:"Defined in",id:"defined-in-30",level:4},{value:"$lastToFirstIterator",id:"lasttofirstiterator",level:3},{value:"Parameters",id:"parameters-20",level:4},{value:"Returns",id:"returns-20",level:4},{value:"Defined in",id:"defined-in-31",level:4},{value:"$restoreEditorState",id:"restoreeditorstate",level:3},{value:"Parameters",id:"parameters-21",level:4},{value:"Returns",id:"returns-21",level:4},{value:"Defined in",id:"defined-in-32",level:4},{value:"$reverseDfs",id:"reversedfs",level:3},{value:"Parameters",id:"parameters-22",level:4},{value:"Returns",id:"returns-22",level:4},{value:"Defined in",id:"defined-in-33",level:4},{value:"$reverseDfsIterator",id:"reversedfsiterator",level:3},{value:"Parameters",id:"parameters-23",level:4},{value:"Returns",id:"returns-23",level:4},{value:"Defined in",id:"defined-in-34",level:4},{value:"$unwrapAndFilterDescendants",id:"unwrapandfilterdescendants",level:3},{value:"Parameters",id:"parameters-24",level:4},{value:"Returns",id:"returns-24",level:4},{value:"Defined in",id:"defined-in-35",level:4},{value:"$unwrapNode",id:"unwrapnode",level:3},{value:"Parameters",id:"parameters-25",level:4},{value:"Returns",id:"returns-25",level:4},{value:"Defined in",id:"defined-in-36",level:4},{value:"$wrapNodeInElement",id:"wrapnodeinelement",level:3},{value:"Parameters",id:"parameters-26",level:4},{value:"Returns",id:"returns-26",level:4},{value:"Defined in",id:"defined-in-37",level:4},{value:"addClassNamesToElement",id:"addclassnamestoelement",level:3},{value:"Parameters",id:"parameters-27",level:4},{value:"Returns",id:"returns-27",level:4},{value:"Defined in",id:"defined-in-38",level:4},{value:"calculateZoomLevel",id:"calculatezoomlevel",level:3},{value:"Parameters",id:"parameters-28",level:4},{value:"Returns",id:"returns-28",level:4},{value:"Defined in",id:"defined-in-39",level:4},{value:"isMimeType",id:"ismimetype",level:3},{value:"Parameters",id:"parameters-29",level:4},{value:"Returns",id:"returns-29",level:4},{value:"Defined in",id:"defined-in-40",level:4},{value:"makeStateWrapper",id:"makestatewrapper",level:3},{value:"Type parameters",id:"type-parameters-9",level:4},{value:"Parameters",id:"parameters-30",level:4},{value:"Returns",id:"returns-30",level:4},{value:"Defined in",id:"defined-in-41",level:4},{value:"markSelection",id:"markselection",level:3},{value:"Parameters",id:"parameters-31",level:4},{value:"Returns",id:"returns-31",level:4},{value:"Returns",id:"returns-32",level:5},{value:"Defined in",id:"defined-in-42",level:4},{value:"mediaFileReader",id:"mediafilereader",level:3},{value:"Parameters",id:"parameters-32",level:4},{value:"Returns",id:"returns-33",level:4},{value:"Defined in",id:"defined-in-43",level:4},{value:"mergeRegister",id:"mergeregister",level:3},{value:"Parameters",id:"parameters-33",level:4},{value:"Returns",id:"returns-34",level:4},{value:"Returns",id:"returns-35",level:5},{value:"Defined in",id:"defined-in-44",level:4},{value:"objectKlassEquals",id:"objectklassequals",level:3},{value:"Type parameters",id:"type-parameters-10",level:4},{value:"Parameters",id:"parameters-34",level:4},{value:"Returns",id:"returns-36",level:4},{value:"Defined in",id:"defined-in-45",level:4},{value:"positionNodeOnRange",id:"positionnodeonrange",level:3},{value:"Parameters",id:"parameters-35",level:4},{value:"Returns",id:"returns-37",level:4},{value:"Returns",id:"returns-38",level:5},{value:"Defined in",id:"defined-in-46",level:4},{value:"registerNestedElementResolver",id:"registernestedelementresolver",level:3},{value:"Type parameters",id:"type-parameters-11",level:4},{value:"Parameters",id:"parameters-36",level:4},{value:"Returns",id:"returns-39",level:4},{value:"Returns",id:"returns-40",level:5},{value:"Defined in",id:"defined-in-47",level:4},{value:"removeClassNamesFromElement",id:"removeclassnamesfromelement",level:3},{value:"Parameters",id:"parameters-37",level:4},{value:"Returns",id:"returns-41",level:4},{value:"Defined in",id:"defined-in-48",level:4},{value:"selectionAlwaysOnDisplay",id:"selectionalwaysondisplay",level:3},{value:"Parameters",id:"parameters-38",level:4},{value:"Returns",id:"returns-42",level:4},{value:"Returns",id:"returns-43",level:5},{value:"Defined in",id:"defined-in-49",level:4}];function h(e){let l={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",h5:"h5",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(l.h2,{id:"interfaces",children:"Interfaces"}),"\n",(0,s.jsxs)(l.ul,{children:["\n",(0,s.jsx)(l.li,{children:(0,s.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical_utils.DFSNode",children:"DFSNode"})}),"\n",(0,s.jsx)(l.li,{children:(0,s.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical_utils.StateConfigWrapper",children:"StateConfigWrapper"})}),"\n"]}),"\n",(0,s.jsx)(l.h2,{id:"references",children:"References"}),"\n",(0,s.jsx)(l.h3,{id:"splitnode",children:"$splitNode"}),"\n",(0,s.jsxs)(l.p,{children:["Re-exports ",(0,s.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#splitnode",children:"$splitNode"})]}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"isblockdomnode",children:"isBlockDomNode"}),"\n",(0,s.jsxs)(l.p,{children:["Re-exports ",(0,s.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#isblockdomnode",children:"isBlockDomNode"})]}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"ishtmlanchorelement",children:"isHTMLAnchorElement"}),"\n",(0,s.jsxs)(l.p,{children:["Re-exports ",(0,s.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#ishtmlanchorelement",children:"isHTMLAnchorElement"})]}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"ishtmlelement",children:"isHTMLElement"}),"\n",(0,s.jsxs)(l.p,{children:["Re-exports ",(0,s.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#ishtmlelement",children:"isHTMLElement"})]}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"isinlinedomnode",children:"isInlineDomNode"}),"\n",(0,s.jsxs)(l.p,{children:["Re-exports ",(0,s.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#isinlinedomnode",children:"isInlineDomNode"})]}),"\n",(0,s.jsx)(l.h2,{id:"type-aliases",children:"Type Aliases"}),"\n",(0,s.jsx)(l.h3,{id:"domnodetolexicalconversion",children:"DOMNodeToLexicalConversion"}),"\n",(0,s.jsxs)(l.p,{children:["\u01AC ",(0,s.jsx)(l.strong,{children:"DOMNodeToLexicalConversion"}),": (",(0,s.jsx)(l.code,{children:"element"}),": ",(0,s.jsx)(l.code,{children:"Node"}),") => ",(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,s.jsx)(l.code,{children:"LexicalNode"})})]}),"\n",(0,s.jsx)(l.h4,{id:"type-declaration",children:"Type declaration"}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 (",(0,s.jsx)(l.code,{children:"element"}),"): ",(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,s.jsx)(l.code,{children:"LexicalNode"})})]}),"\n",(0,s.jsx)(l.h5,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,s.jsx)(l.tbody,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"element"})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"Node"})})]})})]}),"\n",(0,s.jsx)(l.h5,{id:"returns",children:"Returns"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,s.jsx)(l.code,{children:"LexicalNode"})})}),"\n",(0,s.jsx)(l.h4,{id:"defined-in",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-utils/src/index.ts#L402",children:"packages/lexical-utils/src/index.ts:402"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"domnodetolexicalconversionmap",children:"DOMNodeToLexicalConversionMap"}),"\n",(0,s.jsxs)(l.p,{children:["\u01AC ",(0,s.jsx)(l.strong,{children:"DOMNodeToLexicalConversionMap"}),": ",(0,s.jsx)(l.code,{children:"Record"}),"<",(0,s.jsx)(l.code,{children:"string"}),", ",(0,s.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical_utils#domnodetolexicalconversion",children:(0,s.jsx)(l.code,{children:"DOMNodeToLexicalConversion"})}),">"]}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-1",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-utils/src/index.ts#L404",children:"packages/lexical-utils/src/index.ts:404"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"objectklass",children:"ObjectKlass"}),"\n",(0,s.jsxs)(l.p,{children:["\u01AC ",(0,s.jsx)(l.strong,{children:"ObjectKlass"}),"<",(0,s.jsx)(l.code,{children:"T"}),">: (...",(0,s.jsx)(l.code,{children:"args"}),": ",(0,s.jsx)(l.code,{children:"any"}),"[]) => ",(0,s.jsx)(l.code,{children:"T"})]}),"\n",(0,s.jsx)(l.h4,{id:"type-parameters",children:"Type parameters"}),"\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsx)(l.tr,{children:(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Name"})})}),(0,s.jsx)(l.tbody,{children:(0,s.jsx)(l.tr,{children:(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"T"})})})})]}),"\n",(0,s.jsx)(l.h4,{id:"type-declaration-1",children:"Type declaration"}),"\n",(0,s.jsxs)(l.p,{children:["\u2022 (",(0,s.jsx)(l.code,{children:"...args"}),"): ",(0,s.jsx)(l.code,{children:"T"})]}),"\n",(0,s.jsx)(l.h5,{id:"parameters-1",children:"Parameters"}),"\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,s.jsx)(l.tbody,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"...args"})}),(0,s.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,s.jsx)(l.code,{children:"any"}),"[]"]})]})})]}),"\n",(0,s.jsx)(l.h5,{id:"returns-1",children:"Returns"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.code,{children:"T"})}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-2",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-utils/src/index.ts#L644",children:"packages/lexical-utils/src/index.ts:644"})}),"\n",(0,s.jsx)(l.h2,{id:"variables",children:"Variables"}),"\n",(0,s.jsx)(l.h3,{id:"can_use_before_input",children:"CAN_USE_BEFORE_INPUT"}),"\n",(0,s.jsxs)(l.p,{children:["\u2022 ",(0,s.jsx)(l.code,{children:"Const"})," ",(0,s.jsx)(l.strong,{children:"CAN_USE_BEFORE_INPUT"}),": ",(0,s.jsx)(l.code,{children:"boolean"})," = ",(0,s.jsx)(l.code,{children:"CAN_USE_BEFORE_INPUT_"})]}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-3",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-utils/src/index.ts#L79",children:"packages/lexical-utils/src/index.ts:79"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"can_use_dom",children:"CAN_USE_DOM"}),"\n",(0,s.jsxs)(l.p,{children:["\u2022 ",(0,s.jsx)(l.code,{children:"Const"})," ",(0,s.jsx)(l.strong,{children:"CAN_USE_DOM"}),": ",(0,s.jsx)(l.code,{children:"boolean"})," = ",(0,s.jsx)(l.code,{children:"CAN_USE_DOM_"})]}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-4",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-utils/src/index.ts#L80",children:"packages/lexical-utils/src/index.ts:80"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"is_android",children:"IS_ANDROID"}),"\n",(0,s.jsxs)(l.p,{children:["\u2022 ",(0,s.jsx)(l.code,{children:"Const"})," ",(0,s.jsx)(l.strong,{children:"IS_ANDROID"}),": ",(0,s.jsx)(l.code,{children:"boolean"})," = ",(0,s.jsx)(l.code,{children:"IS_ANDROID_"})]}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-5",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-utils/src/index.ts#L81",children:"packages/lexical-utils/src/index.ts:81"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"is_android_chrome",children:"IS_ANDROID_CHROME"}),"\n",(0,s.jsxs)(l.p,{children:["\u2022 ",(0,s.jsx)(l.code,{children:"Const"})," ",(0,s.jsx)(l.strong,{children:"IS_ANDROID_CHROME"}),": ",(0,s.jsx)(l.code,{children:"boolean"})," = ",(0,s.jsx)(l.code,{children:"IS_ANDROID_CHROME_"})]}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-6",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-utils/src/index.ts#L82",children:"packages/lexical-utils/src/index.ts:82"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"is_apple",children:"IS_APPLE"}),"\n",(0,s.jsxs)(l.p,{children:["\u2022 ",(0,s.jsx)(l.code,{children:"Const"})," ",(0,s.jsx)(l.strong,{children:"IS_APPLE"}),": ",(0,s.jsx)(l.code,{children:"boolean"})," = ",(0,s.jsx)(l.code,{children:"IS_APPLE_"})]}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-7",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-utils/src/index.ts#L83",children:"packages/lexical-utils/src/index.ts:83"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"is_apple_webkit",children:"IS_APPLE_WEBKIT"}),"\n",(0,s.jsxs)(l.p,{children:["\u2022 ",(0,s.jsx)(l.code,{children:"Const"})," ",(0,s.jsx)(l.strong,{children:"IS_APPLE_WEBKIT"}),": ",(0,s.jsx)(l.code,{children:"boolean"})," = ",(0,s.jsx)(l.code,{children:"IS_APPLE_WEBKIT_"})]}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-8",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-utils/src/index.ts#L84",children:"packages/lexical-utils/src/index.ts:84"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"is_chrome",children:"IS_CHROME"}),"\n",(0,s.jsxs)(l.p,{children:["\u2022 ",(0,s.jsx)(l.code,{children:"Const"})," ",(0,s.jsx)(l.strong,{children:"IS_CHROME"}),": ",(0,s.jsx)(l.code,{children:"boolean"})," = ",(0,s.jsx)(l.code,{children:"IS_CHROME_"})]}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-9",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-utils/src/index.ts#L85",children:"packages/lexical-utils/src/index.ts:85"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"is_firefox",children:"IS_FIREFOX"}),"\n",(0,s.jsxs)(l.p,{children:["\u2022 ",(0,s.jsx)(l.code,{children:"Const"})," ",(0,s.jsx)(l.strong,{children:"IS_FIREFOX"}),": ",(0,s.jsx)(l.code,{children:"boolean"})," = ",(0,s.jsx)(l.code,{children:"IS_FIREFOX_"})]}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-10",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-utils/src/index.ts#L86",children:"packages/lexical-utils/src/index.ts:86"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"is_ios",children:"IS_IOS"}),"\n",(0,s.jsxs)(l.p,{children:["\u2022 ",(0,s.jsx)(l.code,{children:"Const"})," ",(0,s.jsx)(l.strong,{children:"IS_IOS"}),": ",(0,s.jsx)(l.code,{children:"boolean"})," = ",(0,s.jsx)(l.code,{children:"IS_IOS_"})]}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-11",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-utils/src/index.ts#L87",children:"packages/lexical-utils/src/index.ts:87"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"is_safari",children:"IS_SAFARI"}),"\n",(0,s.jsxs)(l.p,{children:["\u2022 ",(0,s.jsx)(l.code,{children:"Const"})," ",(0,s.jsx)(l.strong,{children:"IS_SAFARI"}),": ",(0,s.jsx)(l.code,{children:"boolean"})," = ",(0,s.jsx)(l.code,{children:"IS_SAFARI_"})]}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-12",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-utils/src/index.ts#L88",children:"packages/lexical-utils/src/index.ts:88"})}),"\n",(0,s.jsx)(l.h2,{id:"functions",children:"Functions"}),"\n",(0,s.jsx)(l.h3,{id:"descendantsmatching",children:"$descendantsMatching"}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 ",(0,s.jsx)(l.strong,{children:"$descendantsMatching"}),"<",(0,s.jsx)(l.code,{children:"T"}),">(",(0,s.jsx)(l.code,{children:"children"}),", ",(0,s.jsx)(l.code,{children:"$predicate"}),"): ",(0,s.jsx)(l.code,{children:"T"}),"[]"]}),"\n",(0,s.jsxs)(l.p,{children:["A depth first traversal of the children array that stops at and collects\neach node that ",(0,s.jsx)(l.code,{children:"$predicate"})," matches. This is typically used to discard\ninvalid or unsupported wrapping nodes on a children array in the ",(0,s.jsx)(l.code,{children:"after"}),"\nof an ",(0,s.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#domconversionoutput",children:"DOMConversionOutput"}),". For example, a TableNode must only have\nTableRowNode as children, but an importer might add invalid nodes based on\ncaption, tbody, thead, etc. and this will unwrap and discard those."]}),"\n",(0,s.jsxs)(l.p,{children:["This function is read-only and performs no mutation operations, which makes\nit suitable for import and export purposes but likely not for any in-place\nmutation. You should use ",(0,s.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical_utils#unwrapandfilterdescendants",children:"$unwrapAndFilterDescendants"})," for in-place\nmutations such as node transforms."]}),"\n",(0,s.jsx)(l.h4,{id:"type-parameters-1",children:"Type parameters"}),"\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,s.jsx)(l.tbody,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"T"})}),(0,s.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,s.jsx)(l.code,{children:"LexicalNode"})})]})]})})]}),"\n",(0,s.jsx)(l.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,s.jsxs)(l.tbody,{children:[(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"children"})}),(0,s.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,s.jsx)(l.code,{children:"LexicalNode"})}),"[]"]}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:"The children to traverse"})]}),(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"$predicate"})}),(0,s.jsxs)(l.td,{style:{textAlign:"left"},children:["(",(0,s.jsx)(l.code,{children:"node"}),": ",(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,s.jsx)(l.code,{children:"LexicalNode"})}),") => node is T"]}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:"Should return true for nodes that are permitted to be children of root"})]})]})]}),"\n",(0,s.jsx)(l.h4,{id:"returns-2",children:"Returns"}),"\n",(0,s.jsxs)(l.p,{children:[(0,s.jsx)(l.code,{children:"T"}),"[]"]}),"\n",(0,s.jsx)(l.p,{children:"The children or their descendants that match $predicate"}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-13",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-utils/src/index.ts#L793",children:"packages/lexical-utils/src/index.ts:793"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"dfs",children:"$dfs"}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 ",(0,s.jsx)(l.strong,{children:"$dfs"}),"(",(0,s.jsx)(l.code,{children:"startNode?"}),", ",(0,s.jsx)(l.code,{children:"endNode?"}),"): ",(0,s.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical_utils.DFSNode",children:(0,s.jsx)(l.code,{children:"DFSNode"})}),"[]"]}),"\n",(0,s.jsx)(l.p,{children:'"Depth-First Search" starts at the root/top node of a tree and goes as far as it can down a branch end\nbefore backtracking and finding a new path. Consider solving a maze by hugging either wall, moving down a\nbranch until you hit a dead-end (leaf) and backtracking to find the nearest branching path and repeat.\nIt will then return all the nodes found in the search in an array of objects.'}),"\n",(0,s.jsx)(l.h4,{id:"parameters-3",children:"Parameters"}),"\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,s.jsxs)(l.tbody,{children:[(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"startNode?"})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,s.jsx)(l.code,{children:"LexicalNode"})})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:"The node to start the search, if omitted, it will start at the root node."})]}),(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"endNode?"})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,s.jsx)(l.code,{children:"LexicalNode"})})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:"The node to end the search, if omitted, it will find all descendants of the startingNode."})]})]})]}),"\n",(0,s.jsx)(l.h4,{id:"returns-3",children:"Returns"}),"\n",(0,s.jsxs)(l.p,{children:[(0,s.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical_utils.DFSNode",children:(0,s.jsx)(l.code,{children:"DFSNode"})}),"[]"]}),"\n",(0,s.jsx)(l.p,{children:"An array of objects of all the nodes found by the search, including their depth into the tree.\n{depth: number, node: LexicalNode} It will always return at least 1 node (the start node)."}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-14",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-utils/src/index.ts#L203",children:"packages/lexical-utils/src/index.ts:203"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"dfsiterator",children:"$dfsIterator"}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 ",(0,s.jsx)(l.strong,{children:"$dfsIterator"}),"(",(0,s.jsx)(l.code,{children:"startNode?"}),", ",(0,s.jsx)(l.code,{children:"endNode?"}),"): ",(0,s.jsx)(l.code,{children:"IterableIterator"}),"<",(0,s.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical_utils.DFSNode",children:(0,s.jsx)(l.code,{children:"DFSNode"})}),">"]}),"\n",(0,s.jsx)(l.p,{children:"$dfs iterator (left to right). Tree traversal is done on the fly as new values are requested with O(1) memory."}),"\n",(0,s.jsx)(l.h4,{id:"parameters-4",children:"Parameters"}),"\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,s.jsxs)(l.tbody,{children:[(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"startNode?"})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,s.jsx)(l.code,{children:"LexicalNode"})})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:"The node to start the search, if omitted, it will start at the root node."})]}),(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"endNode?"})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,s.jsx)(l.code,{children:"LexicalNode"})})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:"The node to end the search, if omitted, it will find all descendants of the startingNode."})]})]})]}),"\n",(0,s.jsx)(l.h4,{id:"returns-4",children:"Returns"}),"\n",(0,s.jsxs)(l.p,{children:[(0,s.jsx)(l.code,{children:"IterableIterator"}),"<",(0,s.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical_utils.DFSNode",children:(0,s.jsx)(l.code,{children:"DFSNode"})}),">"]}),"\n",(0,s.jsx)(l.p,{children:"An iterator, each yielded value is a DFSNode. It will always return at least 1 node (the start node)."}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-15",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-utils/src/index.ts#L241",children:"packages/lexical-utils/src/index.ts:241"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"filter",children:"$filter"}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 ",(0,s.jsx)(l.strong,{children:"$filter"}),"<",(0,s.jsx)(l.code,{children:"T"}),">(",(0,s.jsx)(l.code,{children:"nodes"}),", ",(0,s.jsx)(l.code,{children:"filterFn"}),"): ",(0,s.jsx)(l.code,{children:"T"}),"[]"]}),"\n",(0,s.jsx)(l.p,{children:"Filter the nodes"}),"\n",(0,s.jsx)(l.h4,{id:"type-parameters-2",children:"Type parameters"}),"\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsx)(l.tr,{children:(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Name"})})}),(0,s.jsx)(l.tbody,{children:(0,s.jsx)(l.tr,{children:(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"T"})})})})]}),"\n",(0,s.jsx)(l.h4,{id:"parameters-5",children:"Parameters"}),"\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,s.jsxs)(l.tbody,{children:[(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"nodes"})}),(0,s.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,s.jsx)(l.code,{children:"LexicalNode"})}),"[]"]}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:"Array of nodes that needs to be filtered"})]}),(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"filterFn"})}),(0,s.jsxs)(l.td,{style:{textAlign:"left"},children:["(",(0,s.jsx)(l.code,{children:"node"}),": ",(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,s.jsx)(l.code,{children:"LexicalNode"})}),") => ",(0,s.jsx)(l.code,{children:"null"})," | ",(0,s.jsx)(l.code,{children:"T"})]}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:"A filter function that returns node if the current node satisfies the condition otherwise null"})]})]})]}),"\n",(0,s.jsx)(l.h4,{id:"returns-5",children:"Returns"}),"\n",(0,s.jsxs)(l.p,{children:[(0,s.jsx)(l.code,{children:"T"}),"[]"]}),"\n",(0,s.jsx)(l.p,{children:"Array of filtered nodes"}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-16",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-utils/src/index.ts#L667",children:"packages/lexical-utils/src/index.ts:667"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"findmatchingparent",children:"$findMatchingParent"}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 ",(0,s.jsx)(l.strong,{children:"$findMatchingParent"}),"<",(0,s.jsx)(l.code,{children:"T"}),">(",(0,s.jsx)(l.code,{children:"startingNode"}),", ",(0,s.jsx)(l.code,{children:"findFn"}),"): ",(0,s.jsx)(l.code,{children:"null"})," | ",(0,s.jsx)(l.code,{children:"T"})]}),"\n",(0,s.jsx)(l.p,{children:"Starts with a node and moves up the tree (toward the root node) to find a matching node based on\nthe search parameters of the findFn. (Consider JavaScripts' .find() function where a testing function must be\npassed as an argument. eg. if( (node) => node.__type === 'div') ) return true; otherwise return false"}),"\n",(0,s.jsx)(l.h4,{id:"type-parameters-3",children:"Type parameters"}),"\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,s.jsx)(l.tbody,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"T"})}),(0,s.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,s.jsx)(l.code,{children:"LexicalNode"})})]})]})})]}),"\n",(0,s.jsx)(l.h4,{id:"parameters-6",children:"Parameters"}),"\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,s.jsxs)(l.tbody,{children:[(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"startingNode"})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,s.jsx)(l.code,{children:"LexicalNode"})})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:"The node where the search starts."})]}),(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"findFn"})}),(0,s.jsxs)(l.td,{style:{textAlign:"left"},children:["(",(0,s.jsx)(l.code,{children:"node"}),": ",(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,s.jsx)(l.code,{children:"LexicalNode"})}),") => node is T"]}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:"A testing function that returns true if the current node satisfies the testing parameters."})]})]})]}),"\n",(0,s.jsx)(l.h4,{id:"returns-6",children:"Returns"}),"\n",(0,s.jsxs)(l.p,{children:[(0,s.jsx)(l.code,{children:"null"})," | ",(0,s.jsx)(l.code,{children:"T"})]}),"\n",(0,s.jsx)(l.p,{children:"A parent node that matches the findFn parameters, or null if one wasn't found."}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-17",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-utils/src/index.ts#L418",children:"packages/lexical-utils/src/index.ts:418"})}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 ",(0,s.jsx)(l.strong,{children:"$findMatchingParent"}),"(",(0,s.jsx)(l.code,{children:"startingNode"}),", ",(0,s.jsx)(l.code,{children:"findFn"}),"): ",(0,s.jsx)(l.code,{children:"null"})," | ",(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,s.jsx)(l.code,{children:"LexicalNode"})})]}),"\n",(0,s.jsx)(l.p,{children:"Starts with a node and moves up the tree (toward the root node) to find a matching node based on\nthe search parameters of the findFn. (Consider JavaScripts' .find() function where a testing function must be\npassed as an argument. eg. if( (node) => node.__type === 'div') ) return true; otherwise return false"}),"\n",(0,s.jsx)(l.h4,{id:"parameters-7",children:"Parameters"}),"\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,s.jsxs)(l.tbody,{children:[(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"startingNode"})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,s.jsx)(l.code,{children:"LexicalNode"})})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:"The node where the search starts."})]}),(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"findFn"})}),(0,s.jsxs)(l.td,{style:{textAlign:"left"},children:["(",(0,s.jsx)(l.code,{children:"node"}),": ",(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,s.jsx)(l.code,{children:"LexicalNode"})}),") => ",(0,s.jsx)(l.code,{children:"boolean"})]}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:"A testing function that returns true if the current node satisfies the testing parameters."})]})]})]}),"\n",(0,s.jsx)(l.h4,{id:"returns-7",children:"Returns"}),"\n",(0,s.jsxs)(l.p,{children:[(0,s.jsx)(l.code,{children:"null"})," | ",(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,s.jsx)(l.code,{children:"LexicalNode"})})]}),"\n",(0,s.jsx)(l.p,{children:"A parent node that matches the findFn parameters, or null if one wasn't found."}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-18",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-utils/src/index.ts#L422",children:"packages/lexical-utils/src/index.ts:422"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"firsttolastiterator",children:"$firstToLastIterator"}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 ",(0,s.jsx)(l.strong,{children:"$firstToLastIterator"}),"(",(0,s.jsx)(l.code,{children:"node"}),"): ",(0,s.jsx)(l.code,{children:"Iterable"}),"<",(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,s.jsx)(l.code,{children:"LexicalNode"})}),">"]}),"\n",(0,s.jsx)(l.p,{children:"Return an iterator that yields each child of node from first to last, taking\ncare to preserve the next sibling before yielding the value in case the caller\nremoves the yielded node."}),"\n",(0,s.jsx)(l.h4,{id:"parameters-8",children:"Parameters"}),"\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,s.jsx)(l.tbody,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"node"})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:(0,s.jsx)(l.code,{children:"ElementNode"})})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:"The node whose children to iterate"})]})})]}),"\n",(0,s.jsx)(l.h4,{id:"returns-8",children:"Returns"}),"\n",(0,s.jsxs)(l.p,{children:[(0,s.jsx)(l.code,{children:"Iterable"}),"<",(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,s.jsx)(l.code,{children:"LexicalNode"})}),">"]}),"\n",(0,s.jsx)(l.p,{children:"An iterator of the node's children"}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-19",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-utils/src/index.ts#L823",children:"packages/lexical-utils/src/index.ts:823"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"getadjacentcaret",children:"$getAdjacentCaret"}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 ",(0,s.jsx)(l.strong,{children:"$getAdjacentCaret"}),"<",(0,s.jsx)(l.code,{children:"D"}),">(",(0,s.jsx)(l.code,{children:"caret"}),"): ",(0,s.jsx)(l.code,{children:"null"})," | ",(0,s.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.SiblingCaret",children:(0,s.jsx)(l.code,{children:"SiblingCaret"})}),"<",(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,s.jsx)(l.code,{children:"LexicalNode"})}),", ",(0,s.jsx)(l.code,{children:"D"}),">"]}),"\n",(0,s.jsx)(l.p,{children:"Get the adjacent caret in the same direction"}),"\n",(0,s.jsx)(l.h4,{id:"type-parameters-4",children:"Type parameters"}),"\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,s.jsx)(l.tbody,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"D"})}),(0,s.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,s.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#caretdirection",children:(0,s.jsx)(l.code,{children:"CaretDirection"})})]})]})})]}),"\n",(0,s.jsx)(l.h4,{id:"parameters-9",children:"Parameters"}),"\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,s.jsx)(l.tbody,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"caret"})}),(0,s.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,s.jsx)(l.code,{children:"null"})," | ",(0,s.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#nodecaret",children:(0,s.jsx)(l.code,{children:"NodeCaret"})}),"<",(0,s.jsx)(l.code,{children:"D"}),">"]}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:"A caret or null"})]})})]}),"\n",(0,s.jsx)(l.h4,{id:"returns-9",children:"Returns"}),"\n",(0,s.jsxs)(l.p,{children:[(0,s.jsx)(l.code,{children:"null"})," | ",(0,s.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.SiblingCaret",children:(0,s.jsx)(l.code,{children:"SiblingCaret"})}),"<",(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,s.jsx)(l.code,{children:"LexicalNode"})}),", ",(0,s.jsx)(l.code,{children:"D"}),">"]}),"\n",(0,s.jsxs)(l.p,{children:[(0,s.jsx)(l.code,{children:"caret.getAdjacentCaret()"})," or ",(0,s.jsx)(l.code,{children:"null"})]}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-20",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-utils/src/index.ts#L216",children:"packages/lexical-utils/src/index.ts:216"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"getadjacentsiblingorparentsiblingcaret",children:"$getAdjacentSiblingOrParentSiblingCaret"}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 ",(0,s.jsx)(l.strong,{children:"$getAdjacentSiblingOrParentSiblingCaret"}),"<",(0,s.jsx)(l.code,{children:"D"}),">(",(0,s.jsx)(l.code,{children:"startCaret"}),", ",(0,s.jsx)(l.code,{children:"rootMode?"}),"): ",(0,s.jsx)(l.code,{children:"null"})," | [",(0,s.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#nodecaret",children:(0,s.jsx)(l.code,{children:"NodeCaret"})}),"<",(0,s.jsx)(l.code,{children:"D"}),">, ",(0,s.jsx)(l.code,{children:"number"}),"]"]}),"\n",(0,s.jsxs)(l.p,{children:["Returns the Node sibling when this exists, otherwise the closest parent sibling. For example\nR -> P ->"," ",(0,s.jsx)(l.a,{href:"https://internalfb.com/T1",children:"T1"}),","," ",(0,s.jsx)(l.a,{href:"https://internalfb.com/T2",children:"T2"}),"\n->"," ",(0,s.jsx)(l.a,{href:"https://internalfb.com/P2",children:"P2"}),"\nreturns"," ",(0,s.jsx)(l.a,{href:"https://internalfb.com/T2",children:"T2"})," ","for node"," ",(0,s.jsx)(l.a,{href:"https://internalfb.com/T1",children:"T1"}),","," ",(0,s.jsx)(l.a,{href:"https://internalfb.com/P2",children:"P2"})," ","for node"," ",(0,s.jsx)(l.a,{href:"https://internalfb.com/T2",children:"T2"}),","," and null for node"," ",(0,s.jsx)(l.a,{href:"https://internalfb.com/P2",children:"P2"}),"."]}),"\n",(0,s.jsx)(l.h4,{id:"type-parameters-5",children:"Type parameters"}),"\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,s.jsx)(l.tbody,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"D"})}),(0,s.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,s.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#caretdirection",children:(0,s.jsx)(l.code,{children:"CaretDirection"})})]})]})})]}),"\n",(0,s.jsx)(l.h4,{id:"parameters-10",children:"Parameters"}),"\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Default value"})]})}),(0,s.jsxs)(l.tbody,{children:[(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"startCaret"})}),(0,s.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,s.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#nodecaret",children:(0,s.jsx)(l.code,{children:"NodeCaret"})}),"<",(0,s.jsx)(l.code,{children:"D"}),">"]}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"undefined"})})]}),(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"rootMode"})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#rootmode",children:(0,s.jsx)(l.code,{children:"RootMode"})})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"'root'"})})]})]})]}),"\n",(0,s.jsx)(l.h4,{id:"returns-10",children:"Returns"}),"\n",(0,s.jsxs)(l.p,{children:[(0,s.jsx)(l.code,{children:"null"})," | [",(0,s.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#nodecaret",children:(0,s.jsx)(l.code,{children:"NodeCaret"})}),"<",(0,s.jsx)(l.code,{children:"D"}),">, ",(0,s.jsx)(l.code,{children:"number"}),"]"]}),"\n",(0,s.jsx)(l.p,{children:"An array (tuple) containing the found Lexical node and the depth difference, or null, if this node doesn't exist."}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-21",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-utils/src/index.ts#L883",children:"packages/lexical-utils/src/index.ts:883"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"getdepth",children:"$getDepth"}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 ",(0,s.jsx)(l.strong,{children:"$getDepth"}),"(",(0,s.jsx)(l.code,{children:"node"}),"): ",(0,s.jsx)(l.code,{children:"number"})]}),"\n",(0,s.jsx)(l.h4,{id:"parameters-11",children:"Parameters"}),"\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,s.jsx)(l.tbody,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"node"})}),(0,s.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,s.jsx)(l.code,{children:"null"})," | ",(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,s.jsx)(l.code,{children:"LexicalNode"})})]})]})})]}),"\n",(0,s.jsx)(l.h4,{id:"returns-11",children:"Returns"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.code,{children:"number"})}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-22",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-utils/src/index.ts#L313",children:"packages/lexical-utils/src/index.ts:313"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"getnearestblockelementancestororthrow",children:"$getNearestBlockElementAncestorOrThrow"}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 ",(0,s.jsx)(l.strong,{children:"$getNearestBlockElementAncestorOrThrow"}),"(",(0,s.jsx)(l.code,{children:"startNode"}),"): ",(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:(0,s.jsx)(l.code,{children:"ElementNode"})})]}),"\n",(0,s.jsx)(l.p,{children:"Returns the element node of the nearest ancestor, otherwise throws an error."}),"\n",(0,s.jsx)(l.h4,{id:"parameters-12",children:"Parameters"}),"\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,s.jsx)(l.tbody,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"startNode"})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,s.jsx)(l.code,{children:"LexicalNode"})})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:"The starting node of the search"})]})})]}),"\n",(0,s.jsx)(l.h4,{id:"returns-12",children:"Returns"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:(0,s.jsx)(l.code,{children:"ElementNode"})})}),"\n",(0,s.jsx)(l.p,{children:"The ancestor node found"}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-23",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-utils/src/index.ts#L385",children:"packages/lexical-utils/src/index.ts:385"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"getnearestnodeoftype",children:"$getNearestNodeOfType"}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 ",(0,s.jsx)(l.strong,{children:"$getNearestNodeOfType"}),"<",(0,s.jsx)(l.code,{children:"T"}),">(",(0,s.jsx)(l.code,{children:"node"}),", ",(0,s.jsx)(l.code,{children:"klass"}),"): ",(0,s.jsx)(l.code,{children:"T"})," | ",(0,s.jsx)(l.code,{children:"null"})]}),"\n",(0,s.jsx)(l.p,{children:"Takes a node and traverses up its ancestors (toward the root node)\nin order to find a specific type of node."}),"\n",(0,s.jsx)(l.h4,{id:"type-parameters-6",children:"Type parameters"}),"\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,s.jsx)(l.tbody,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"T"})}),(0,s.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:(0,s.jsx)(l.code,{children:"ElementNode"})})]})]})})]}),"\n",(0,s.jsx)(l.h4,{id:"parameters-13",children:"Parameters"}),"\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,s.jsxs)(l.tbody,{children:[(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"node"})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,s.jsx)(l.code,{children:"LexicalNode"})})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:"the node to begin searching."})]}),(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"klass"})}),(0,s.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,s.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#klass",children:(0,s.jsx)(l.code,{children:"Klass"})}),"<",(0,s.jsx)(l.code,{children:"T"}),">"]}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:"an instance of the type of node to look for."})]})]})]}),"\n",(0,s.jsx)(l.h4,{id:"returns-13",children:"Returns"}),"\n",(0,s.jsxs)(l.p,{children:[(0,s.jsx)(l.code,{children:"T"})," | ",(0,s.jsx)(l.code,{children:"null"})]}),"\n",(0,s.jsx)(l.p,{children:"the node of type klass that was passed, or null if none exist."}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-24",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-utils/src/index.ts#L363",children:"packages/lexical-utils/src/index.ts:363"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"getnextrightpreordernode",children:"$getNextRightPreorderNode"}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 ",(0,s.jsx)(l.strong,{children:"$getNextRightPreorderNode"}),"(",(0,s.jsx)(l.code,{children:"startingNode"}),"): ",(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,s.jsx)(l.code,{children:"LexicalNode"})})," | ",(0,s.jsx)(l.code,{children:"null"})]}),"\n",(0,s.jsx)(l.p,{children:"Performs a right-to-left preorder tree traversal.\nFrom the starting node it goes to the rightmost child, than backtracks to parent and finds new rightmost path.\nIt will return the next node in traversal sequence after the startingNode.\nThe traversal is similar to $dfs functions above, but the nodes are visited right-to-left, not left-to-right."}),"\n",(0,s.jsx)(l.h4,{id:"parameters-14",children:"Parameters"}),"\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,s.jsx)(l.tbody,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"startingNode"})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,s.jsx)(l.code,{children:"LexicalNode"})})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:"The node to start the search."})]})})]}),"\n",(0,s.jsx)(l.h4,{id:"returns-14",children:"Returns"}),"\n",(0,s.jsxs)(l.p,{children:[(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,s.jsx)(l.code,{children:"LexicalNode"})})," | ",(0,s.jsx)(l.code,{children:"null"})]}),"\n",(0,s.jsxs)(l.p,{children:["The next node in pre-order right to left traversal sequence or ",(0,s.jsx)(l.code,{children:"null"}),", if the node does not exist"]}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-25",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-utils/src/index.ts#L333",children:"packages/lexical-utils/src/index.ts:333"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"getnextsiblingorparentsibling",children:"$getNextSiblingOrParentSibling"}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 ",(0,s.jsx)(l.strong,{children:"$getNextSiblingOrParentSibling"}),"(",(0,s.jsx)(l.code,{children:"node"}),"): ",(0,s.jsx)(l.code,{children:"null"})," | [",(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,s.jsx)(l.code,{children:"LexicalNode"})}),", ",(0,s.jsx)(l.code,{children:"number"}),"]"]}),"\n",(0,s.jsxs)(l.p,{children:["Returns the Node sibling when this exists, otherwise the closest parent sibling. For example\nR -> P ->"," ",(0,s.jsx)(l.a,{href:"https://internalfb.com/T1",children:"T1"}),","," ",(0,s.jsx)(l.a,{href:"https://internalfb.com/T2",children:"T2"}),"\n->"," ",(0,s.jsx)(l.a,{href:"https://internalfb.com/P2",children:"P2"}),"\nreturns"," ",(0,s.jsx)(l.a,{href:"https://internalfb.com/T2",children:"T2"})," ","for node"," ",(0,s.jsx)(l.a,{href:"https://internalfb.com/T1",children:"T1"}),","," ",(0,s.jsx)(l.a,{href:"https://internalfb.com/P2",children:"P2"})," ","for node"," ",(0,s.jsx)(l.a,{href:"https://internalfb.com/T2",children:"T2"}),","," and null for node"," ",(0,s.jsx)(l.a,{href:"https://internalfb.com/P2",children:"P2"}),"."]}),"\n",(0,s.jsx)(l.h4,{id:"parameters-15",children:"Parameters"}),"\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,s.jsx)(l.tbody,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"node"})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,s.jsx)(l.code,{children:"LexicalNode"})})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:"LexicalNode."})]})})]}),"\n",(0,s.jsx)(l.h4,{id:"returns-15",children:"Returns"}),"\n",(0,s.jsxs)(l.p,{children:[(0,s.jsx)(l.code,{children:"null"})," | [",(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,s.jsx)(l.code,{children:"LexicalNode"})}),", ",(0,s.jsx)(l.code,{children:"number"}),"]"]}),"\n",(0,s.jsx)(l.p,{children:"An array (tuple) containing the found Lexical node and the depth difference, or null, if this node doesn't exist."}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-26",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-utils/src/index.ts#L304",children:"packages/lexical-utils/src/index.ts:304"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"insertfirst",children:"$insertFirst"}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 ",(0,s.jsx)(l.strong,{children:"$insertFirst"}),"(",(0,s.jsx)(l.code,{children:"parent"}),", ",(0,s.jsx)(l.code,{children:"node"}),"): ",(0,s.jsx)(l.code,{children:"void"})]}),"\n",(0,s.jsx)(l.p,{children:"Appends the node before the first child of the parent node"}),"\n",(0,s.jsx)(l.h4,{id:"parameters-16",children:"Parameters"}),"\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,s.jsxs)(l.tbody,{children:[(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"parent"})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:(0,s.jsx)(l.code,{children:"ElementNode"})})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:"A parent node"})]}),(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"node"})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,s.jsx)(l.code,{children:"LexicalNode"})})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:"Node that needs to be appended"})]})]})]}),"\n",(0,s.jsx)(l.h4,{id:"returns-16",children:"Returns"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.code,{children:"void"})}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-27",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-utils/src/index.ts#L685",children:"packages/lexical-utils/src/index.ts:685"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"insertnodetonearestroot",children:"$insertNodeToNearestRoot"}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 ",(0,s.jsx)(l.strong,{children:"$insertNodeToNearestRoot"}),"<",(0,s.jsx)(l.code,{children:"T"}),">(",(0,s.jsx)(l.code,{children:"node"}),"): ",(0,s.jsx)(l.code,{children:"T"})]}),"\n",(0,s.jsxs)(l.p,{children:["If the selected insertion area is the root/shadow root node (see ",(0,s.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#isrootorshadowroot",children:"$isRootOrShadowRoot"}),"),\nthe node will be appended there, otherwise, it will be inserted before the insertion area.\nIf there is no selection where the node is to be inserted, it will be appended after any current nodes\nwithin the tree, as a child of the root node. A paragraph will then be added after the inserted node and selected."]}),"\n",(0,s.jsx)(l.h4,{id:"type-parameters-7",children:"Type parameters"}),"\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,s.jsx)(l.tbody,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"T"})}),(0,s.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,s.jsx)(l.code,{children:"LexicalNode"})})]})]})})]}),"\n",(0,s.jsx)(l.h4,{id:"parameters-17",children:"Parameters"}),"\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,s.jsx)(l.tbody,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"node"})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"T"})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:"The node to be inserted"})]})})]}),"\n",(0,s.jsx)(l.h4,{id:"returns-17",children:"Returns"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.code,{children:"T"})}),"\n",(0,s.jsx)(l.p,{children:"The node after its insertion"}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-28",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-utils/src/index.ts#L562",children:"packages/lexical-utils/src/index.ts:562"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"insertnodetonearestrootatcaret",children:"$insertNodeToNearestRootAtCaret"}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 ",(0,s.jsx)(l.strong,{children:"$insertNodeToNearestRootAtCaret"}),"<",(0,s.jsx)(l.code,{children:"T"}),", ",(0,s.jsx)(l.code,{children:"D"}),">(",(0,s.jsx)(l.code,{children:"node"}),", ",(0,s.jsx)(l.code,{children:"caret"}),", ",(0,s.jsx)(l.code,{children:"options?"}),"): ",(0,s.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#nodecaret",children:(0,s.jsx)(l.code,{children:"NodeCaret"})}),"<",(0,s.jsx)(l.code,{children:"D"}),">"]}),"\n",(0,s.jsxs)(l.p,{children:["If the insertion caret is the root/shadow root node (see ",(0,s.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#isrootorshadowroot",children:"$isRootOrShadowRoot"}),"),\nthe node will be inserted there, otherwise the parent nodes will be split according to the\ngiven options."]}),"\n",(0,s.jsx)(l.h4,{id:"type-parameters-8",children:"Type parameters"}),"\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,s.jsxs)(l.tbody,{children:[(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"T"})}),(0,s.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,s.jsx)(l.code,{children:"LexicalNode"})})]})]}),(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"D"})}),(0,s.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,s.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#caretdirection",children:(0,s.jsx)(l.code,{children:"CaretDirection"})})]})]})]})]}),"\n",(0,s.jsx)(l.h4,{id:"parameters-18",children:"Parameters"}),"\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,s.jsxs)(l.tbody,{children:[(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"node"})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"T"})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:"The node to be inserted"})]}),(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"caret"})}),(0,s.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,s.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#pointcaret",children:(0,s.jsx)(l.code,{children:"PointCaret"})}),"<",(0,s.jsx)(l.code,{children:"D"}),">"]}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:"The location to insert or split from"})]}),(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"options?"})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.SplitAtPointCaretNextOptions",children:(0,s.jsx)(l.code,{children:"SplitAtPointCaretNextOptions"})})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:"-"})]})]})]}),"\n",(0,s.jsx)(l.h4,{id:"returns-18",children:"Returns"}),"\n",(0,s.jsxs)(l.p,{children:[(0,s.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#nodecaret",children:(0,s.jsx)(l.code,{children:"NodeCaret"})}),"<",(0,s.jsx)(l.code,{children:"D"}),">"]}),"\n",(0,s.jsx)(l.p,{children:"The node after its insertion"}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-29",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-utils/src/index.ts#L598",children:"packages/lexical-utils/src/index.ts:598"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"iseditorisnestededitor",children:"$isEditorIsNestedEditor"}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 ",(0,s.jsx)(l.strong,{children:"$isEditorIsNestedEditor"}),"(",(0,s.jsx)(l.code,{children:"editor"}),"): ",(0,s.jsx)(l.code,{children:"boolean"})]}),"\n",(0,s.jsx)(l.p,{children:"Checks if the editor is a nested editor created by LexicalNestedComposer"}),"\n",(0,s.jsx)(l.h4,{id:"parameters-19",children:"Parameters"}),"\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,s.jsx)(l.tbody,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"editor"})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalEditor",children:(0,s.jsx)(l.code,{children:"LexicalEditor"})})})]})})]}),"\n",(0,s.jsx)(l.h4,{id:"returns-19",children:"Returns"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.code,{children:"boolean"})}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-30",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-utils/src/index.ts#L728",children:"packages/lexical-utils/src/index.ts:728"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"lasttofirstiterator",children:"$lastToFirstIterator"}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 ",(0,s.jsx)(l.strong,{children:"$lastToFirstIterator"}),"(",(0,s.jsx)(l.code,{children:"node"}),"): ",(0,s.jsx)(l.code,{children:"Iterable"}),"<",(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,s.jsx)(l.code,{children:"LexicalNode"})}),">"]}),"\n",(0,s.jsx)(l.p,{children:"Return an iterator that yields each child of node from last to first, taking\ncare to preserve the previous sibling before yielding the value in case the caller\nremoves the yielded node."}),"\n",(0,s.jsx)(l.h4,{id:"parameters-20",children:"Parameters"}),"\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,s.jsx)(l.tbody,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"node"})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:(0,s.jsx)(l.code,{children:"ElementNode"})})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:"The node whose children to iterate"})]})})]}),"\n",(0,s.jsx)(l.h4,{id:"returns-20",children:"Returns"}),"\n",(0,s.jsxs)(l.p,{children:[(0,s.jsx)(l.code,{children:"Iterable"}),"<",(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,s.jsx)(l.code,{children:"LexicalNode"})}),">"]}),"\n",(0,s.jsx)(l.p,{children:"An iterator of the node's children"}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-31",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-utils/src/index.ts#L835",children:"packages/lexical-utils/src/index.ts:835"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"restoreeditorstate",children:"$restoreEditorState"}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 ",(0,s.jsx)(l.strong,{children:"$restoreEditorState"}),"(",(0,s.jsx)(l.code,{children:"editor"}),", ",(0,s.jsx)(l.code,{children:"editorState"}),"): ",(0,s.jsx)(l.code,{children:"void"})]}),"\n",(0,s.jsx)(l.p,{children:"Clones the editor and marks it as dirty to be reconciled. If there was a selection,\nit would be set back to its previous state, or null otherwise."}),"\n",(0,s.jsx)(l.h4,{id:"parameters-21",children:"Parameters"}),"\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,s.jsxs)(l.tbody,{children:[(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"editor"})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalEditor",children:(0,s.jsx)(l.code,{children:"LexicalEditor"})})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:"The lexical editor"})]}),(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"editorState"})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.EditorState",children:(0,s.jsx)(l.code,{children:"EditorState"})})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:"The editor's state"})]})]})]}),"\n",(0,s.jsx)(l.h4,{id:"returns-21",children:"Returns"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.code,{children:"void"})}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-32",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-utils/src/index.ts#L533",children:"packages/lexical-utils/src/index.ts:533"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"reversedfs",children:"$reverseDfs"}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 ",(0,s.jsx)(l.strong,{children:"$reverseDfs"}),"(",(0,s.jsx)(l.code,{children:"startNode?"}),", ",(0,s.jsx)(l.code,{children:"endNode?"}),"): ",(0,s.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical_utils.DFSNode",children:(0,s.jsx)(l.code,{children:"DFSNode"})}),"[]"]}),"\n",(0,s.jsx)(l.p,{children:"$dfs iterator (right to left). Tree traversal is done on the fly as new values are requested with O(1) memory."}),"\n",(0,s.jsx)(l.h4,{id:"parameters-22",children:"Parameters"}),"\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,s.jsxs)(l.tbody,{children:[(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"startNode?"})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,s.jsx)(l.code,{children:"LexicalNode"})})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:"The node to start the search, if omitted, it will start at the root node."})]}),(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"endNode?"})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,s.jsx)(l.code,{children:"LexicalNode"})})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:"The node to end the search, if omitted, it will find all descendants of the startingNode."})]})]})]}),"\n",(0,s.jsx)(l.h4,{id:"returns-22",children:"Returns"}),"\n",(0,s.jsxs)(l.p,{children:[(0,s.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical_utils.DFSNode",children:(0,s.jsx)(l.code,{children:"DFSNode"})}),"[]"]}),"\n",(0,s.jsx)(l.p,{children:"An iterator, each yielded value is a DFSNode. It will always return at least 1 node (the start node)."}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-33",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-utils/src/index.ts#L228",children:"packages/lexical-utils/src/index.ts:228"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"reversedfsiterator",children:"$reverseDfsIterator"}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 ",(0,s.jsx)(l.strong,{children:"$reverseDfsIterator"}),"(",(0,s.jsx)(l.code,{children:"startNode?"}),", ",(0,s.jsx)(l.code,{children:"endNode?"}),"): ",(0,s.jsx)(l.code,{children:"IterableIterator"}),"<",(0,s.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical_utils.DFSNode",children:(0,s.jsx)(l.code,{children:"DFSNode"})}),">"]}),"\n",(0,s.jsx)(l.p,{children:"$dfs iterator (right to left). Tree traversal is done on the fly as new values are requested with O(1) memory."}),"\n",(0,s.jsx)(l.h4,{id:"parameters-23",children:"Parameters"}),"\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,s.jsxs)(l.tbody,{children:[(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"startNode?"})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,s.jsx)(l.code,{children:"LexicalNode"})})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:"The node to start the search, if omitted, it will start at the root node."})]}),(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"endNode?"})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,s.jsx)(l.code,{children:"LexicalNode"})})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:"The node to end the search, if omitted, it will find all descendants of the startingNode."})]})]})]}),"\n",(0,s.jsx)(l.h4,{id:"returns-23",children:"Returns"}),"\n",(0,s.jsxs)(l.p,{children:[(0,s.jsx)(l.code,{children:"IterableIterator"}),"<",(0,s.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical_utils.DFSNode",children:(0,s.jsx)(l.code,{children:"DFSNode"})}),">"]}),"\n",(0,s.jsx)(l.p,{children:"An iterator, each yielded value is a DFSNode. It will always return at least 1 node (the start node)."}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-34",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-utils/src/index.ts#L349",children:"packages/lexical-utils/src/index.ts:349"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"unwrapandfilterdescendants",children:"$unwrapAndFilterDescendants"}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 ",(0,s.jsx)(l.strong,{children:"$unwrapAndFilterDescendants"}),"(",(0,s.jsx)(l.code,{children:"root"}),", ",(0,s.jsx)(l.code,{children:"$predicate"}),"): ",(0,s.jsx)(l.code,{children:"boolean"})]}),"\n",(0,s.jsx)(l.p,{children:"A depth first last-to-first traversal of root that stops at each node that matches\n$predicate and ensures that its parent is root. This is typically used to discard\ninvalid or unsupported wrapping nodes. For example, a TableNode must only have\nTableRowNode as children, but an importer might add invalid nodes based on\ncaption, tbody, thead, etc. and this will unwrap and discard those."}),"\n",(0,s.jsx)(l.h4,{id:"parameters-24",children:"Parameters"}),"\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,s.jsxs)(l.tbody,{children:[(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"root"})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:(0,s.jsx)(l.code,{children:"ElementNode"})})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:"The root to start the traversal"})]}),(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"$predicate"})}),(0,s.jsxs)(l.td,{style:{textAlign:"left"},children:["(",(0,s.jsx)(l.code,{children:"node"}),": ",(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,s.jsx)(l.code,{children:"LexicalNode"})}),") => ",(0,s.jsx)(l.code,{children:"boolean"})]}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:"Should return true for nodes that are permitted to be children of root"})]})]})]}),"\n",(0,s.jsx)(l.h4,{id:"returns-24",children:"Returns"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.code,{children:"boolean"})}),"\n",(0,s.jsx)(l.p,{children:"true if this unwrapped or removed any nodes"}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-35",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-utils/src/index.ts#L743",children:"packages/lexical-utils/src/index.ts:743"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"unwrapnode",children:"$unwrapNode"}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 ",(0,s.jsx)(l.strong,{children:"$unwrapNode"}),"(",(0,s.jsx)(l.code,{children:"node"}),"): ",(0,s.jsx)(l.code,{children:"void"})]}),"\n",(0,s.jsx)(l.p,{children:"Replace this node with its children"}),"\n",(0,s.jsx)(l.h4,{id:"parameters-25",children:"Parameters"}),"\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,s.jsx)(l.tbody,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"node"})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:(0,s.jsx)(l.code,{children:"ElementNode"})})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:"The ElementNode to unwrap and remove"})]})})]}),"\n",(0,s.jsx)(l.h4,{id:"returns-25",children:"Returns"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.code,{children:"void"})}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-36",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-utils/src/index.ts#L868",children:"packages/lexical-utils/src/index.ts:868"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"wrapnodeinelement",children:"$wrapNodeInElement"}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 ",(0,s.jsx)(l.strong,{children:"$wrapNodeInElement"}),"(",(0,s.jsx)(l.code,{children:"node"}),", ",(0,s.jsx)(l.code,{children:"createElementNode"}),"): ",(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:(0,s.jsx)(l.code,{children:"ElementNode"})})]}),"\n",(0,s.jsx)(l.p,{children:"Wraps the node into another node created from a createElementNode function, eg. $createParagraphNode"}),"\n",(0,s.jsx)(l.h4,{id:"parameters-26",children:"Parameters"}),"\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,s.jsxs)(l.tbody,{children:[(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"node"})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,s.jsx)(l.code,{children:"LexicalNode"})})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:"Node to be wrapped."})]}),(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"createElementNode"})}),(0,s.jsxs)(l.td,{style:{textAlign:"left"},children:["() => ",(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:(0,s.jsx)(l.code,{children:"ElementNode"})})]}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:"Creates a new lexical element to wrap the to-be-wrapped node and returns it."})]})]})]}),"\n",(0,s.jsx)(l.h4,{id:"returns-26",children:"Returns"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:(0,s.jsx)(l.code,{children:"ElementNode"})})}),"\n",(0,s.jsx)(l.p,{children:"A new lexical element with the previous node appended within (as a child, including its children)."}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-37",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-utils/src/index.ts#L633",children:"packages/lexical-utils/src/index.ts:633"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"addclassnamestoelement",children:"addClassNamesToElement"}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 ",(0,s.jsx)(l.strong,{children:"addClassNamesToElement"}),"(",(0,s.jsx)(l.code,{children:"element"}),", ",(0,s.jsx)(l.code,{children:"...classNames"}),"): ",(0,s.jsx)(l.code,{children:"void"})]}),"\n",(0,s.jsx)(l.p,{children:"Takes an HTML element and adds the classNames passed within an array,\nignoring any non-string types. A space can be used to add multiple classes\neg. addClassNamesToElement(element, ['element-inner active', true, null])\nwill add both 'element-inner' and 'active' as classes to that element."}),"\n",(0,s.jsx)(l.h4,{id:"parameters-27",children:"Parameters"}),"\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,s.jsxs)(l.tbody,{children:[(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"element"})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"HTMLElement"})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:"The element in which the classes are added"})]}),(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"...classNames"})}),(0,s.jsxs)(l.td,{style:{textAlign:"left"},children:["(",(0,s.jsx)(l.code,{children:"undefined"})," | ",(0,s.jsx)(l.code,{children:"null"})," | ",(0,s.jsx)(l.code,{children:"string"})," | ",(0,s.jsx)(l.code,{children:"boolean"}),")[]"]}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:"An array defining the class names to add to the element"})]})]})]}),"\n",(0,s.jsx)(l.h4,{id:"returns-27",children:"Returns"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.code,{children:"void"})}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-38",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-utils/src/index.ts#L98",children:"packages/lexical-utils/src/index.ts:98"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"calculatezoomlevel",children:"calculateZoomLevel"}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 ",(0,s.jsx)(l.strong,{children:"calculateZoomLevel"}),"(",(0,s.jsx)(l.code,{children:"element"}),"): ",(0,s.jsx)(l.code,{children:"number"})]}),"\n",(0,s.jsx)(l.p,{children:"Calculates the zoom level of an element as a result of using\ncss zoom property. For browsers that implement standardized CSS\nzoom (Firefox, Chrome >= 128), this will always return 1."}),"\n",(0,s.jsx)(l.h4,{id:"parameters-28",children:"Parameters"}),"\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,s.jsx)(l.tbody,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"element"})}),(0,s.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,s.jsx)(l.code,{children:"null"})," | ",(0,s.jsx)(l.code,{children:"Element"})]})]})})]}),"\n",(0,s.jsx)(l.h4,{id:"returns-28",children:"Returns"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.code,{children:"number"})}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-39",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-utils/src/index.ts#L714",children:"packages/lexical-utils/src/index.ts:714"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"ismimetype",children:"isMimeType"}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 ",(0,s.jsx)(l.strong,{children:"isMimeType"}),"(",(0,s.jsx)(l.code,{children:"file"}),", ",(0,s.jsx)(l.code,{children:"acceptableMimeTypes"}),"): ",(0,s.jsx)(l.code,{children:"boolean"})]}),"\n",(0,s.jsx)(l.p,{children:"Returns true if the file type matches the types passed within the acceptableMimeTypes array, false otherwise.\nThe types passed must be strings and are CASE-SENSITIVE.\neg. if file is of type 'text' and acceptableMimeTypes = ['TEXT', 'IMAGE'] the function will return false."}),"\n",(0,s.jsx)(l.h4,{id:"parameters-29",children:"Parameters"}),"\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,s.jsxs)(l.tbody,{children:[(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"file"})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"File"})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:"The file you want to type check."})]}),(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"acceptableMimeTypes"})}),(0,s.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,s.jsx)(l.code,{children:"string"}),"[]"]}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:"An array of strings of types which the file is checked against."})]})]})]}),"\n",(0,s.jsx)(l.h4,{id:"returns-29",children:"Returns"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.code,{children:"boolean"})}),"\n",(0,s.jsx)(l.p,{children:"true if the file is an acceptable mime type, false otherwise."}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-40",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-utils/src/index.ts#L134",children:"packages/lexical-utils/src/index.ts:134"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"makestatewrapper",children:"makeStateWrapper"}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 ",(0,s.jsx)(l.strong,{children:"makeStateWrapper"}),"<",(0,s.jsx)(l.code,{children:"K"}),", ",(0,s.jsx)(l.code,{children:"V"}),">(",(0,s.jsx)(l.code,{children:"stateConfig"}),"): ",(0,s.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical_utils.StateConfigWrapper",children:(0,s.jsx)(l.code,{children:"StateConfigWrapper"})}),"<",(0,s.jsx)(l.code,{children:"K"}),", ",(0,s.jsx)(l.code,{children:"V"}),">"]}),"\n",(0,s.jsx)(l.p,{children:"EXPERIMENTAL"}),"\n",(0,s.jsxs)(l.p,{children:["A convenience interface for working with ",(0,s.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#getstate",children:"$getState"})," and\n",(0,s.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#setstate",children:"$setState"}),"."]}),"\n",(0,s.jsx)(l.h4,{id:"type-parameters-9",children:"Type parameters"}),"\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,s.jsxs)(l.tbody,{children:[(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"K"})}),(0,s.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,s.jsx)(l.code,{children:"string"})]})]}),(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"V"})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"V"})})]})]})]}),"\n",(0,s.jsx)(l.h4,{id:"parameters-30",children:"Parameters"}),"\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,s.jsx)(l.tbody,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"stateConfig"})}),(0,s.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.StateConfig",children:(0,s.jsx)(l.code,{children:"StateConfig"})}),"<",(0,s.jsx)(l.code,{children:"K"}),", ",(0,s.jsx)(l.code,{children:"V"}),">"]}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:"The stateConfig to wrap with convenience functionality"})]})})]}),"\n",(0,s.jsx)(l.h4,{id:"returns-30",children:"Returns"}),"\n",(0,s.jsxs)(l.p,{children:[(0,s.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical_utils.StateConfigWrapper",children:(0,s.jsx)(l.code,{children:"StateConfigWrapper"})}),"<",(0,s.jsx)(l.code,{children:"K"}),", ",(0,s.jsx)(l.code,{children:"V"}),">"]}),"\n",(0,s.jsx)(l.p,{children:"a StateWrapper"}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-41",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-utils/src/index.ts#L964",children:"packages/lexical-utils/src/index.ts:964"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"markselection",children:"markSelection"}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 ",(0,s.jsx)(l.strong,{children:"markSelection"}),"(",(0,s.jsx)(l.code,{children:"editor"}),", ",(0,s.jsx)(l.code,{children:"onReposition?"}),"): () => ",(0,s.jsx)(l.code,{children:"void"})]}),"\n",(0,s.jsx)(l.p,{children:"Place one or multiple newly created Nodes at the current selection. Multiple\nnodes will only be created when the selection spans multiple lines (aka\nclient rects)."}),"\n",(0,s.jsx)(l.p,{children:"This function can come useful when you want to show the selection but the\neditor has been focused away."}),"\n",(0,s.jsx)(l.h4,{id:"parameters-31",children:"Parameters"}),"\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,s.jsxs)(l.tbody,{children:[(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"editor"})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalEditor",children:(0,s.jsx)(l.code,{children:"LexicalEditor"})})})]}),(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"onReposition?"})}),(0,s.jsxs)(l.td,{style:{textAlign:"left"},children:["(",(0,s.jsx)(l.code,{children:"node"}),": ",(0,s.jsx)(l.code,{children:"HTMLElement"}),"[]) => ",(0,s.jsx)(l.code,{children:"void"})]})]})]})]}),"\n",(0,s.jsx)(l.h4,{id:"returns-31",children:"Returns"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.code,{children:"fn"})}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 (): ",(0,s.jsx)(l.code,{children:"void"})]}),"\n",(0,s.jsx)(l.h5,{id:"returns-32",children:"Returns"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.code,{children:"void"})}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-42",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-utils/src/markSelection.ts#L67",children:"packages/lexical-utils/src/markSelection.ts:67"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"mediafilereader",children:"mediaFileReader"}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 ",(0,s.jsx)(l.strong,{children:"mediaFileReader"}),"(",(0,s.jsx)(l.code,{children:"files"}),", ",(0,s.jsx)(l.code,{children:"acceptableMimeTypes"}),"): ",(0,s.jsx)(l.code,{children:"Promise"}),"<{ ",(0,s.jsx)(l.code,{children:"file"}),": ",(0,s.jsx)(l.code,{children:"File"})," ; ",(0,s.jsx)(l.code,{children:"result"}),": ",(0,s.jsx)(l.code,{children:"string"}),"  }[]>"]}),"\n",(0,s.jsx)(l.p,{children:"Lexical File Reader with:"}),"\n",(0,s.jsxs)(l.ol,{children:["\n",(0,s.jsx)(l.li,{children:"MIME type support"}),"\n",(0,s.jsx)(l.li,{children:"batched results (HistoryPlugin compatibility)"}),"\n",(0,s.jsx)(l.li,{children:"Order aware (respects the order when multiple Files are passed)"}),"\n"]}),"\n",(0,s.jsx)(l.p,{children:"const filesResult = await mediaFileReader(files, ['image/']);\nfilesResult.forEach(file => editor.dispatchCommand('INSERT_IMAGE', {\nsrc: file.result,\n}));"}),"\n",(0,s.jsx)(l.h4,{id:"parameters-32",children:"Parameters"}),"\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,s.jsxs)(l.tbody,{children:[(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"files"})}),(0,s.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,s.jsx)(l.code,{children:"File"}),"[]"]})]}),(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"acceptableMimeTypes"})}),(0,s.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,s.jsx)(l.code,{children:"string"}),"[]"]})]})]})]}),"\n",(0,s.jsx)(l.h4,{id:"returns-33",children:"Returns"}),"\n",(0,s.jsxs)(l.p,{children:[(0,s.jsx)(l.code,{children:"Promise"}),"<{ ",(0,s.jsx)(l.code,{children:"file"}),": ",(0,s.jsx)(l.code,{children:"File"})," ; ",(0,s.jsx)(l.code,{children:"result"}),": ",(0,s.jsx)(l.code,{children:"string"}),"  }[]>"]}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-43",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-utils/src/index.ts#L157",children:"packages/lexical-utils/src/index.ts:157"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"mergeregister",children:"mergeRegister"}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 ",(0,s.jsx)(l.strong,{children:"mergeRegister"}),"(",(0,s.jsx)(l.code,{children:"...func"}),"): () => ",(0,s.jsx)(l.code,{children:"void"})]}),"\n",(0,s.jsx)(l.p,{children:"Returns a function that will execute all functions passed when called. It is generally used\nto register multiple lexical listeners and then tear them down with a single function call, such\nas React's useEffect hook."}),"\n",(0,s.jsx)(l.h4,{id:"parameters-33",children:"Parameters"}),"\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,s.jsx)(l.tbody,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"...func"})}),(0,s.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,s.jsx)(l.code,{children:"Func"}),"[]"]}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:"An array of cleanup functions meant to be executed by the returned function."})]})})]}),"\n",(0,s.jsx)(l.h4,{id:"returns-34",children:"Returns"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.code,{children:"fn"})}),"\n",(0,s.jsx)(l.p,{children:"the function which executes all the passed cleanup functions."}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 (): ",(0,s.jsx)(l.code,{children:"void"})]}),"\n",(0,s.jsx)(l.h5,{id:"returns-35",children:"Returns"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.code,{children:"void"})}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.strong,{children:(0,s.jsx)(l.code,{children:"Example"})})}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-ts",children:"useEffect(() => {\n  return mergeRegister(\n    editor.registerCommand(...registerCommand1 logic),\n    editor.registerCommand(...registerCommand2 logic),\n    editor.registerCommand(...registerCommand3 logic)\n  )\n}, [editor])\n"})}),"\n",(0,s.jsx)(l.p,{children:'In this case, useEffect is returning the function returned by mergeRegister as a cleanup\nfunction to be executed after either the useEffect runs again (due to one of its dependencies\nupdating) or the component it resides in unmounts.\nNote the functions don\'t necessarily need to be in an array as all arguments\nare considered to be the func argument and spread from there.\nThe order of cleanup is the reverse of the argument order. Generally it is\nexpected that the first "acquire" will be "released" last (LIFO order),\nbecause a later step may have some dependency on an earlier one.'}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-44",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-utils/src/mergeRegister.ts#L36",children:"packages/lexical-utils/src/mergeRegister.ts:36"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"objectklassequals",children:"objectKlassEquals"}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 ",(0,s.jsx)(l.strong,{children:"objectKlassEquals"}),"<",(0,s.jsx)(l.code,{children:"T"}),">(",(0,s.jsx)(l.code,{children:"object"}),", ",(0,s.jsx)(l.code,{children:"objectClass"}),"): object is T"]}),"\n",(0,s.jsx)(l.h4,{id:"type-parameters-10",children:"Type parameters"}),"\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsx)(l.tr,{children:(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Name"})})}),(0,s.jsx)(l.tbody,{children:(0,s.jsx)(l.tr,{children:(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"T"})})})})]}),"\n",(0,s.jsx)(l.h4,{id:"parameters-34",children:"Parameters"}),"\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,s.jsxs)(l.tbody,{children:[(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"object"})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"unknown"})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:"= The instance of the type"})]}),(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"objectClass"})}),(0,s.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,s.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical_utils#objectklass",children:(0,s.jsx)(l.code,{children:"ObjectKlass"})}),"<",(0,s.jsx)(l.code,{children:"T"}),">"]}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:"= The class of the type"})]})]})]}),"\n",(0,s.jsx)(l.h4,{id:"returns-36",children:"Returns"}),"\n",(0,s.jsx)(l.p,{children:"object is T"}),"\n",(0,s.jsx)(l.p,{children:"Whether the object is has the same Klass of the objectClass, ignoring the difference across window (e.g. different iframes)"}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-45",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-utils/src/index.ts#L651",children:"packages/lexical-utils/src/index.ts:651"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"positionnodeonrange",children:"positionNodeOnRange"}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 ",(0,s.jsx)(l.strong,{children:"positionNodeOnRange"}),"(",(0,s.jsx)(l.code,{children:"editor"}),", ",(0,s.jsx)(l.code,{children:"range"}),", ",(0,s.jsx)(l.code,{children:"onReposition"}),"): () => ",(0,s.jsx)(l.code,{children:"void"})]}),"\n",(0,s.jsx)(l.p,{children:"Place one or multiple newly created Nodes at the passed Range's position.\nMultiple nodes will only be created when the Range spans multiple lines (aka\nclient rects)."}),"\n",(0,s.jsx)(l.p,{children:"This function can come particularly useful to highlight particular parts of\nthe text without interfering with the EditorState, that will often replicate\nthe state across collab and clipboard."}),"\n",(0,s.jsx)(l.p,{children:"This function accounts for DOM updates which can modify the passed Range.\nHence, the function return to remove the listener."}),"\n",(0,s.jsx)(l.h4,{id:"parameters-35",children:"Parameters"}),"\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,s.jsxs)(l.tbody,{children:[(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"editor"})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalEditor",children:(0,s.jsx)(l.code,{children:"LexicalEditor"})})})]}),(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"range"})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"Range"})})]}),(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"onReposition"})}),(0,s.jsxs)(l.td,{style:{textAlign:"left"},children:["(",(0,s.jsx)(l.code,{children:"node"}),": ",(0,s.jsx)(l.code,{children:"HTMLElement"}),"[]) => ",(0,s.jsx)(l.code,{children:"void"})]})]})]})]}),"\n",(0,s.jsx)(l.h4,{id:"returns-37",children:"Returns"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.code,{children:"fn"})}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 (): ",(0,s.jsx)(l.code,{children:"void"})]}),"\n",(0,s.jsx)(l.h5,{id:"returns-38",children:"Returns"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.code,{children:"void"})}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-46",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-utils/src/positionNodeOnRange.ts#L38",children:"packages/lexical-utils/src/positionNodeOnRange.ts:38"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"registernestedelementresolver",children:"registerNestedElementResolver"}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 ",(0,s.jsx)(l.strong,{children:"registerNestedElementResolver"}),"<",(0,s.jsx)(l.code,{children:"N"}),">(",(0,s.jsx)(l.code,{children:"editor"}),", ",(0,s.jsx)(l.code,{children:"targetNode"}),", ",(0,s.jsx)(l.code,{children:"cloneNode"}),", ",(0,s.jsx)(l.code,{children:"handleOverlap"}),"): () => ",(0,s.jsx)(l.code,{children:"void"})]}),"\n",(0,s.jsx)(l.p,{children:"Attempts to resolve nested element nodes of the same type into a single node of that type.\nIt is generally used for marks/commenting"}),"\n",(0,s.jsx)(l.h4,{id:"type-parameters-11",children:"Type parameters"}),"\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,s.jsx)(l.tbody,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"N"})}),(0,s.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:(0,s.jsx)(l.code,{children:"ElementNode"})})]})]})})]}),"\n",(0,s.jsx)(l.h4,{id:"parameters-36",children:"Parameters"}),"\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,s.jsxs)(l.tbody,{children:[(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"editor"})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalEditor",children:(0,s.jsx)(l.code,{children:"LexicalEditor"})})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:"The lexical editor"})]}),(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"targetNode"})}),(0,s.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,s.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#klass",children:(0,s.jsx)(l.code,{children:"Klass"})}),"<",(0,s.jsx)(l.code,{children:"N"}),">"]}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:"The target for the nested element to be extracted from."})]}),(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"cloneNode"})}),(0,s.jsxs)(l.td,{style:{textAlign:"left"},children:["(",(0,s.jsx)(l.code,{children:"from"}),": ",(0,s.jsx)(l.code,{children:"N"}),") => ",(0,s.jsx)(l.code,{children:"N"})]}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:"See $createMarkNode"})]}),(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"handleOverlap"})}),(0,s.jsxs)(l.td,{style:{textAlign:"left"},children:["(",(0,s.jsx)(l.code,{children:"from"}),": ",(0,s.jsx)(l.code,{children:"N"}),", ",(0,s.jsx)(l.code,{children:"to"}),": ",(0,s.jsx)(l.code,{children:"N"}),") => ",(0,s.jsx)(l.code,{children:"void"})]}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:"Handles any overlap between the node to extract and the targetNode"})]})]})]}),"\n",(0,s.jsx)(l.h4,{id:"returns-39",children:"Returns"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.code,{children:"fn"})}),"\n",(0,s.jsx)(l.p,{children:"The lexical editor"}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 (): ",(0,s.jsx)(l.code,{children:"void"})]}),"\n",(0,s.jsx)(l.h5,{id:"returns-40",children:"Returns"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.code,{children:"void"})}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-47",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-utils/src/index.ts#L452",children:"packages/lexical-utils/src/index.ts:452"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"removeclassnamesfromelement",children:"removeClassNamesFromElement"}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 ",(0,s.jsx)(l.strong,{children:"removeClassNamesFromElement"}),"(",(0,s.jsx)(l.code,{children:"element"}),", ",(0,s.jsx)(l.code,{children:"...classNames"}),"): ",(0,s.jsx)(l.code,{children:"void"})]}),"\n",(0,s.jsx)(l.p,{children:"Takes an HTML element and removes the classNames passed within an array,\nignoring any non-string types. A space can be used to remove multiple classes\neg. removeClassNamesFromElement(element, ['active small', true, null])\nwill remove both the 'active' and 'small' classes from that element."}),"\n",(0,s.jsx)(l.h4,{id:"parameters-37",children:"Parameters"}),"\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,s.jsxs)(l.tbody,{children:[(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"element"})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"HTMLElement"})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:"The element in which the classes are removed"})]}),(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"...classNames"})}),(0,s.jsxs)(l.td,{style:{textAlign:"left"},children:["(",(0,s.jsx)(l.code,{children:"undefined"})," | ",(0,s.jsx)(l.code,{children:"null"})," | ",(0,s.jsx)(l.code,{children:"string"})," | ",(0,s.jsx)(l.code,{children:"boolean"}),")[]"]}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:"An array defining the class names to remove from the element"})]})]})]}),"\n",(0,s.jsx)(l.h4,{id:"returns-41",children:"Returns"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.code,{children:"void"})}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-48",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-utils/src/index.ts#L116",children:"packages/lexical-utils/src/index.ts:116"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"selectionalwaysondisplay",children:"selectionAlwaysOnDisplay"}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 ",(0,s.jsx)(l.strong,{children:"selectionAlwaysOnDisplay"}),"(",(0,s.jsx)(l.code,{children:"editor"}),"): () => ",(0,s.jsx)(l.code,{children:"void"})]}),"\n",(0,s.jsx)(l.h4,{id:"parameters-38",children:"Parameters"}),"\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,s.jsx)(l.tbody,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"editor"})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalEditor",children:(0,s.jsx)(l.code,{children:"LexicalEditor"})})})]})})]}),"\n",(0,s.jsx)(l.h4,{id:"returns-42",children:"Returns"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.code,{children:"fn"})}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 (): ",(0,s.jsx)(l.code,{children:"void"})]}),"\n",(0,s.jsx)(l.h5,{id:"returns-43",children:"Returns"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.code,{children:"void"})}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-49",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-utils/src/selectionAlwaysOnDisplay.ts#L13",children:"packages/lexical-utils/src/selectionAlwaysOnDisplay.ts:13"})})]})}function x(e={}){let{wrapper:l}={...(0,t.a)(),...e.components};return l?(0,s.jsx)(l,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},22840:function(e,l,i){i.d(l,{Z:()=>r,a:()=>d});var n=i(2784);let s={},t=n.createContext(s);function d(e){let l=n.useContext(t);return n.useMemo(function(){return"function"==typeof e?e(l):{...l,...e}},[l,e])}function r(e){let l;return l=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),n.createElement(t.Provider,{value:l},e.children)}}}]);