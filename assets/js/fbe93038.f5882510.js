"use strict";(self.webpackChunk_lexical_website=self.webpackChunk_lexical_website||[]).push([["4887"],{13301:function(e,t,n){n.r(t),n.d(t,{frontMatter:()=>l,default:()=>h,contentTitle:()=>a,assets:()=>o,toc:()=>c,metadata:()=>s});var s=JSON.parse('{"id":"testing","title":"Testing","description":"Lexical relies on tests to ensure that changes don\'t break anything, using a mix of unit and end-to-end tests.","source":"@site/docs/testing.md","sourceDirName":".","slug":"/testing","permalink":"/lexical/docs/testing","draft":false,"unlisted":false,"editUrl":"https://github.com/QubitPi/lexical/tree/main/packages/lexical-website/docs/testing.md","tags":[],"version":"current","frontMatter":{}}'),i=n(52322),r=n(22840);let l={},a="Testing",o={},c=[{value:"Unit tests",id:"unit-tests",level:2},{value:"End-to-end (E2E) tests",id:"end-to-end-e2e-tests",level:2},{value:"General guidelines",id:"general-guidelines",level:2}];function d(e){let t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"testing",children:"Testing"})}),"\n",(0,i.jsx)(t.p,{children:"Lexical relies on tests to ensure that changes don't break anything, using a mix of unit and end-to-end tests."}),"\n",(0,i.jsx)(t.h2,{id:"unit-tests",children:"Unit tests"}),"\n",(0,i.jsxs)(t.p,{children:["We use Jest to run unit tests in core (",(0,i.jsx)(t.code,{children:"lexical"})," package). The goal is to have a well tested API, enabling us to add or modify features without breaking it."]}),"\n",(0,i.jsx)(t.p,{children:"To run the tests use:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"npm run test-unit\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Unit tests can be found in ",(0,i.jsx)(t.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical/src/__tests__",children:"this directory"}),"."]}),"\n",(0,i.jsx)(t.h2,{id:"end-to-end-e2e-tests",children:"End-to-end (E2E) tests"}),"\n",(0,i.jsxs)(t.p,{children:["We use ",(0,i.jsx)(t.a,{href:"https://playwright.dev/",children:"Playwright"})," for running E2E tests in Chromium, Firefox and WebKit. Before running these tests, make sure to install the necessary browsers using the following command:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"npx playwright install\n"})}),"\n",(0,i.jsxs)(t.p,{children:["These tests run in the ",(0,i.jsx)(t.code,{children:"lexical-playground"})," package and are divided into proactive and reactive tests (",(0,i.jsx)(t.code,{children:"e2e"})," and ",(0,i.jsx)(t.code,{children:"regression"})," directories)."]}),"\n",(0,i.jsx)(t.p,{children:"The goal for this type of test is to validate the behavior of Lexical in a browser, without necessarily knowing how the internals work."}),"\n",(0,i.jsx)(t.p,{children:"To run E2E tests use:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"npm run start &\nnpm run test-e2e-chromium # or -firefox, -webkit\n"})}),"\n",(0,i.jsxs)(t.p,{children:["E2E tests can be found in ",(0,i.jsx)(t.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical-playground/__tests__",children:"this directory"})]}),"\n",(0,i.jsx)(t.h2,{id:"general-guidelines",children:"General guidelines"}),"\n",(0,i.jsx)(t.p,{children:"When writing tests, please follow these practices:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"New features must include tests."}),"\n",(0,i.jsx)(t.li,{children:"No test is too small or too big to be included. If it can break, add a test."}),"\n",(0,i.jsx)(t.li,{children:"Do not merge pull requests with failing tests, this can block other people and releases."}),"\n",(0,i.jsx)(t.li,{children:"Be mindful with your abstractions: sometimes it's convenient to create abstractions/utils to make test files smaller and less repetitive. Please make sure that they are simple and easy to follow."}),"\n"]})]})}function h(e={}){let{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},22840:function(e,t,n){n.d(t,{Z:()=>a,a:()=>l});var s=n(2784);let i={},r=s.createContext(i);function l(e){let t=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);