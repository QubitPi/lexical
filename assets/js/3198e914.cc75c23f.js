"use strict";(self.webpackChunk_lexical_website=self.webpackChunk_lexical_website||[]).push([["2399"],{22903:function(e,n,o){o.r(n),o.d(n,{frontMatter:()=>i,default:()=>h,contentTitle:()=>c,assets:()=>l,toc:()=>r,metadata:()=>s});var s=JSON.parse('{"id":"concepts/node-cloning","title":"Node Cloning","description":"Understanding how to properly clone and modify nodes is crucial for working with Lexical. This guide explains the different cloning mechanisms and when to use each one.","source":"@site/docs/concepts/node-cloning.md","sourceDirName":"concepts","slug":"/concepts/node-cloning","permalink":"/docs/concepts/node-cloning","draft":false,"unlisted":false,"editUrl":"https://github.com/QubitPi/lexical/tree/main/packages/lexical-website/docs/concepts/node-cloning.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Key Management","permalink":"/docs/concepts/key-management"},"next":{"title":"Listeners","permalink":"/docs/concepts/listeners"}}'),t=o(52322),d=o(22840);let i={},c="Node Cloning",l={},r=[{value:"Types of Node Cloning",id:"types-of-node-cloning",level:2},{value:"The <code>clone</code> Method",id:"the-clone-method",level:2},{value:"What is <code>clone</code>?",id:"what-is-clone",level:3},{value:"When is <code>clone</code> Used?",id:"when-is-clone-used",level:3},{value:"When NOT to Use <code>clone</code>?",id:"when-not-to-use-clone",level:3},{value:"Using <code>$copyNode</code>",id:"using-copynode",level:2},{value:"What is <code>$copyNode</code>?",id:"what-is-copynode",level:3},{value:"When to Use <code>$copyNode</code>?",id:"when-to-use-copynode",level:3},{value:"Using <code>getWritable</code>",id:"using-getwritable",level:2},{value:"What is <code>getWritable</code>?",id:"what-is-getwritable",level:3},{value:"Common Patterns",id:"common-patterns",level:2},{value:"Modifying Nodes",id:"modifying-nodes",level:3},{value:"Copying Nodes",id:"copying-nodes",level:3},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Testing",id:"testing",level:2},{value:"Related Concepts",id:"related-concepts",level:2},{value:"Common Questions",id:"common-questions",level:2}];function a(e){let n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,d.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"node-cloning",children:"Node Cloning"})}),"\n",(0,t.jsx)(n.p,{children:"Understanding how to properly clone and modify nodes is crucial for working with Lexical. This guide explains the different cloning mechanisms and when to use each one."}),"\n",(0,t.jsx)(n.h2,{id:"types-of-node-cloning",children:"Types of Node Cloning"}),"\n",(0,t.jsx)(n.p,{children:"Lexical provides several ways to clone nodes, each serving a different purpose:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"static clone()"})," - Internal API for state management"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"$copyNode()"})," - Public API for creating new nodes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"getWritable()"})," - Public API for node modifications"]}),"\n"]}),"\n",(0,t.jsxs)(n.h2,{id:"the-clone-method",children:["The ",(0,t.jsx)(n.code,{children:"clone"})," Method"]}),"\n",(0,t.jsxs)(n.h3,{id:"what-is-clone",children:["What is ",(0,t.jsx)(n.code,{children:"clone"}),"?"]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"clone"})," method is a static method required by all Lexical nodes that creates the next version of a node. However, it's important to understand that this is an ",(0,t.jsx)(n.strong,{children:"internal API"})," used by Lexical's state management system."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"class MyCustomNode extends ElementNode {\n  static clone(node: MyCustomNode): MyCustomNode {\n    // \u2705 Correct implementation\n    return new MyCustomNode(node.__someData, node.__key);\n  }\n}\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"when-is-clone-used",children:["When is ",(0,t.jsx)(n.code,{children:"clone"})," Used?"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Internal State Management"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Used by Lexical internally"}),"\n",(0,t.jsx)(n.li,{children:"Part of the editor's state update system"}),"\n",(0,t.jsxs)(n.li,{children:["Called by ",(0,t.jsx)(n.code,{children:"getWritable()"})]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Node Mutations"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'// Example of a node method implementation\nclass MyCustomNode extends ElementNode {\n  setData(data: string): this {\n    const self = this.getWritable();\n    self.__data = data;\n    return self;\n  }\n}\n\nnode.setSomeData("new data");\n'})}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.h3,{id:"when-not-to-use-clone",children:["When NOT to Use ",(0,t.jsx)(n.code,{children:"clone"}),"?"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// \u274C Never do this\nfunction $duplicateNode(node: MyCustomNode) {\n  return MyCustomNode.clone(node); // Don't call clone directly\n}\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"using-copynode",children:["Using ",(0,t.jsx)(n.code,{children:"$copyNode"})]}),"\n",(0,t.jsxs)(n.h3,{id:"what-is-copynode",children:["What is ",(0,t.jsx)(n.code,{children:"$copyNode"}),"?"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"$copyNode"})," is the public API for creating a copy of a node with a new key. Use this when you need to create a duplicate node."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// \u2705 Correct: Using $copyNode\nconst copy = $copyNode(existingNode);\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"when-to-use-copynode",children:["When to Use ",(0,t.jsx)(n.code,{children:"$copyNode"}),"?"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Creating Duplicates"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// \u2705 Correct: Duplicating a node\nconst duplicate = $copyNode(originalNode);\nsomeParent.append(duplicate);\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.h2,{id:"using-getwritable",children:["Using ",(0,t.jsx)(n.code,{children:"getWritable"})]}),"\n",(0,t.jsxs)(n.h3,{id:"what-is-getwritable",children:["What is ",(0,t.jsx)(n.code,{children:"getWritable"}),"?"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"getWritable"})," is an internal API used within node method implementations to get a mutable version of a node. Node consumers should use the node's public methods instead."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'// \u2705 Correct: Implementation of a node method\nclass MyCustomNode extends ElementNode {\n  setData(data: string): this {\n    const self = this.getWritable();\n    self.__data = data;\n    return self;\n  }\n}\n\n// \u2705 Correct: Using the node\nconst node = new MyCustomNode();\nnode.setData("new value");\n'})}),"\n",(0,t.jsx)(n.h2,{id:"common-patterns",children:"Common Patterns"}),"\n",(0,t.jsx)(n.h3,{id:"modifying-nodes",children:"Modifying Nodes"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// \u2705 Correct: Modifying a node\nfunction $updateNodeData(node: MyCustomNode, newData: string): MyCustomNode {\n  return node.setData(newData);\n}\n\n// \u274C Incorrect: Don't clone manually\nfunction $updateNodeDataWrong(node: MyCustomNode, newData: string): MyCustomNode {\n  const clone = MyCustomNode.clone(node);\n  clone.setData(newData);\n  return clone;\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"copying-nodes",children:"Copying Nodes"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// \u2705 Correct: Copying a node\nfunction $duplicateNode(node: MyCustomNode): MyCustomNode {\n  return $copyNode(node);\n}\n\n// \u274C Incorrect: Don't use clone\nfunction $duplicateNodeWrong(node: MyCustomNode): MyCustomNode {\n  return node.constructor.clone(node);\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Referential Integrity"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"getWritable()"})," ensures proper EditorState updates with new clones"]}),"\n",(0,t.jsx)(n.li,{children:'Prevents "orphaned" nodes that won\'t be rendered'}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"State Management"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"class MyCustomNode extends ElementNode {\n  setData(data: string): this {\n    const self = this.getWritable();\n    self.__data = data; // Properly tracked by editor\n    return self;\n  }\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'test(\'node modification\', async () => {\n  await editor.update(() => {\n    const node = new MyCustomNode("test");\n    \n    node.setData("new data");\n    \n    // \u2705 Correct: Use $copyNode for duplication\n    const copy = $copyNode(node);\n  });\n});\n'})}),"\n",(0,t.jsx)(n.h2,{id:"related-concepts",children:"Related Concepts"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/docs/concepts/editor-state",children:"Editor State"})," - How cloning affects editor state"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/docs/concepts/nodes",children:"Nodes"})," - Core concepts about Lexical nodes"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"common-questions",children:"Common Questions"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Q: How do I duplicate a node?"}),"\nA: Use ",(0,t.jsx)(n.code,{children:"$copyNode(node)"})," to create a new copy with a new key."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Q: When should I use clone?"}),"\nA: Never directly. Use ",(0,t.jsx)(n.code,{children:"$copyNode()"})," or ",(0,t.jsx)(n.code,{children:"getWritable()"})," instead."]})]})}function h(e={}){let{wrapper:n}={...(0,d.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},22840:function(e,n,o){o.d(n,{Z:()=>c,a:()=>i});var s=o(2784);let t={},d=s.createContext(t);function i(e){let n=s.useContext(d);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),s.createElement(d.Provider,{value:n},e.children)}}}]);