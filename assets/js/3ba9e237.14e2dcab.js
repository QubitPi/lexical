"use strict";(self.webpackChunk_lexical_website=self.webpackChunk_lexical_website||[]).push([["6929"],{49380:function(e,i,r){r.r(i),r.d(i,{frontMatter:()=>d,default:()=>x,contentTitle:()=>c,assets:()=>s,toc:()=>a,metadata:()=>n});var n=JSON.parse('{"id":"api/interfaces/lexical.TextPointCaret","title":"Interface: TextPointCaret<T, D>","description":"lexical.TextPointCaret","source":"@site/docs/api/interfaces/lexical.TextPointCaret.md","sourceDirName":"api/interfaces","slug":"/api/interfaces/lexical.TextPointCaret","permalink":"/docs/api/interfaces/lexical.TextPointCaret","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","frontMatter":{"id":"lexical.TextPointCaret","title":"Interface: TextPointCaret<T, D>","custom_edit_url":null},"sidebar":"api","previous":{"title":"StepwiseIteratorConfig","permalink":"/docs/api/interfaces/lexical.StepwiseIteratorConfig"},"next":{"title":"TextPointCaretSlice","permalink":"/docs/api/interfaces/lexical.TextPointCaretSlice"}}'),l=r(52322),t=r(22840);let d={id:"lexical.TextPointCaret",title:"Interface: TextPointCaret<T, D>",custom_edit_url:null},c=void 0,s={},a=[{value:"Type parameters",id:"type-parameters",level:2},{value:"Hierarchy",id:"hierarchy",level:2},{value:"Properties",id:"properties",level:2},{value:"direction",id:"direction",level:3},{value:"Inherited from",id:"inherited-from",level:4},{value:"Defined in",id:"defined-in",level:4},{value:"getAdjacentCaret",id:"getadjacentcaret",level:3},{value:"Type declaration",id:"type-declaration",level:4},{value:"Returns",id:"returns",level:5},{value:"Inherited from",id:"inherited-from-1",level:4},{value:"Defined in",id:"defined-in-1",level:4},{value:"getChildCaret",id:"getchildcaret",level:3},{value:"Type declaration",id:"type-declaration-1",level:4},{value:"Returns",id:"returns-1",level:5},{value:"Defined in",id:"defined-in-2",level:4},{value:"getFlipped",id:"getflipped",level:3},{value:"Type declaration",id:"type-declaration-2",level:4},{value:"Returns",id:"returns-2",level:5},{value:"Defined in",id:"defined-in-3",level:4},{value:"getLatest",id:"getlatest",level:3},{value:"Type declaration",id:"type-declaration-3",level:4},{value:"Returns",id:"returns-3",level:5},{value:"Defined in",id:"defined-in-4",level:4},{value:"getNodeAtCaret",id:"getnodeatcaret",level:3},{value:"Type declaration",id:"type-declaration-4",level:4},{value:"Returns",id:"returns-4",level:5},{value:"Inherited from",id:"inherited-from-2",level:4},{value:"Defined in",id:"defined-in-5",level:4},{value:"getParentAtCaret",id:"getparentatcaret",level:3},{value:"Type declaration",id:"type-declaration-5",level:4},{value:"Returns",id:"returns-5",level:5},{value:"Inherited from",id:"inherited-from-3",level:4},{value:"Defined in",id:"defined-in-6",level:4},{value:"getParentCaret",id:"getparentcaret",level:3},{value:"Type declaration",id:"type-declaration-6",level:4},{value:"Parameters",id:"parameters",level:5},{value:"Returns",id:"returns-6",level:5},{value:"Defined in",id:"defined-in-7",level:4},{value:"getSiblingCaret",id:"getsiblingcaret",level:3},{value:"Type declaration",id:"type-declaration-7",level:4},{value:"Returns",id:"returns-7",level:5},{value:"Inherited from",id:"inherited-from-4",level:4},{value:"Defined in",id:"defined-in-8",level:4},{value:"insert",id:"insert",level:3},{value:"Type declaration",id:"type-declaration-8",level:4},{value:"Parameters",id:"parameters-1",level:5},{value:"Returns",id:"returns-8",level:5},{value:"Inherited from",id:"inherited-from-5",level:4},{value:"Defined in",id:"defined-in-9",level:4},{value:"isSameNodeCaret",id:"issamenodecaret",level:3},{value:"Type declaration",id:"type-declaration-9",level:4},{value:"Parameters",id:"parameters-2",level:5},{value:"Returns",id:"returns-9",level:5},{value:"Defined in",id:"defined-in-10",level:4},{value:"isSamePointCaret",id:"issamepointcaret",level:3},{value:"Type declaration",id:"type-declaration-10",level:4},{value:"Parameters",id:"parameters-3",level:5},{value:"Returns",id:"returns-10",level:5},{value:"Defined in",id:"defined-in-11",level:4},{value:"offset",id:"offset",level:3},{value:"Defined in",id:"defined-in-12",level:4},{value:"origin",id:"origin",level:3},{value:"Inherited from",id:"inherited-from-6",level:4},{value:"Defined in",id:"defined-in-13",level:4},{value:"remove",id:"remove",level:3},{value:"Type declaration",id:"type-declaration-11",level:4},{value:"Returns",id:"returns-11",level:5},{value:"Inherited from",id:"inherited-from-7",level:4},{value:"Defined in",id:"defined-in-14",level:4},{value:"replaceOrInsert",id:"replaceorinsert",level:3},{value:"Type declaration",id:"type-declaration-12",level:4},{value:"Parameters",id:"parameters-4",level:5},{value:"Returns",id:"returns-12",level:5},{value:"Inherited from",id:"inherited-from-8",level:4},{value:"Defined in",id:"defined-in-15",level:4},{value:"splice",id:"splice",level:3},{value:"Type declaration",id:"type-declaration-13",level:4},{value:"Parameters",id:"parameters-5",level:5},{value:"Returns",id:"returns-13",level:5},{value:"Inherited from",id:"inherited-from-9",level:4},{value:"Defined in",id:"defined-in-16",level:4},{value:"type",id:"type",level:3},{value:"Inherited from",id:"inherited-from-10",level:4},{value:"Defined in",id:"defined-in-17",level:4}];function h(e){let i={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",h5:"h5",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.a)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(i.p,{children:[(0,l.jsx)(i.a,{href:"/docs/api/modules/lexical",children:"lexical"}),".TextPointCaret"]}),"\n",(0,l.jsx)(i.p,{children:"A TextPointCaret is a special case of a SiblingCaret that also carries\nan offset used for representing partially selected TextNode at the edges\nof a CaretRange."}),"\n",(0,l.jsx)(i.p,{children:"The direction determines which part of the text is adjacent to the caret,\nif next it's all of the text after offset. If previous, it's all of the\ntext before offset."}),"\n",(0,l.jsx)(i.p,{children:"While this can be used in place of any SiblingCaret of a TextNode,\nthe offset into the text will be ignored except in contexts that\nspecifically use the TextPointCaret or PointCaret types."}),"\n",(0,l.jsx)(i.h2,{id:"type-parameters",children:"Type parameters"}),"\n",(0,l.jsxs)(i.table,{children:[(0,l.jsx)(i.thead,{children:(0,l.jsxs)(i.tr,{children:[(0,l.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(i.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,l.jsxs)(i.tbody,{children:[(0,l.jsxs)(i.tr,{children:[(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.code,{children:"T"})}),(0,l.jsxs)(i.td,{style:{textAlign:"left"},children:["extends ",(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.TextNode",children:(0,l.jsx)(i.code,{children:"TextNode"})})," = ",(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.TextNode",children:(0,l.jsx)(i.code,{children:"TextNode"})})]})]}),(0,l.jsxs)(i.tr,{children:[(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.code,{children:"D"})}),(0,l.jsxs)(i.td,{style:{textAlign:"left"},children:["extends ",(0,l.jsx)(i.a,{href:"/docs/api/modules/lexical#caretdirection",children:(0,l.jsx)(i.code,{children:"CaretDirection"})})," = ",(0,l.jsx)(i.a,{href:"/docs/api/modules/lexical#caretdirection",children:(0,l.jsx)(i.code,{children:"CaretDirection"})})]})]})]})]}),"\n",(0,l.jsx)(i.h2,{id:"hierarchy",children:"Hierarchy"}),"\n",(0,l.jsxs)(i.ul,{children:["\n",(0,l.jsxs)(i.li,{children:["\n",(0,l.jsxs)(i.p,{children:[(0,l.jsx)(i.a,{href:"/docs/api/interfaces/lexical.BaseCaret",children:(0,l.jsx)(i.code,{children:"BaseCaret"})}),"<",(0,l.jsx)(i.code,{children:"T"}),", ",(0,l.jsx)(i.code,{children:"D"}),", ",(0,l.jsx)(i.code,{children:'"text"'}),">"]}),"\n",(0,l.jsxs)(i.p,{children:["\u21B3 ",(0,l.jsx)(i.strong,{children:(0,l.jsx)(i.code,{children:"TextPointCaret"})})]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(i.h2,{id:"properties",children:"Properties"}),"\n",(0,l.jsx)(i.h3,{id:"direction",children:"direction"}),"\n",(0,l.jsxs)(i.p,{children:["\u2022 ",(0,l.jsx)(i.code,{children:"Readonly"})," ",(0,l.jsx)(i.strong,{children:"direction"}),": ",(0,l.jsx)(i.code,{children:"D"})]}),"\n",(0,l.jsx)(i.p,{children:"next if pointing at the next sibling or first child, previous if pointing at the previous sibling or last child"}),"\n",(0,l.jsx)(i.h4,{id:"inherited-from",children:"Inherited from"}),"\n",(0,l.jsxs)(i.p,{children:[(0,l.jsx)(i.a,{href:"/docs/api/interfaces/lexical.BaseCaret",children:"BaseCaret"}),".",(0,l.jsx)(i.a,{href:"/docs/api/interfaces/lexical.BaseCaret#direction",children:"direction"})]}),"\n",(0,l.jsx)(i.h4,{id:"defined-in",children:"Defined in"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L57",children:"packages/lexical/src/caret/LexicalCaret.ts:57"})}),"\n",(0,l.jsx)(i.hr,{}),"\n",(0,l.jsx)(i.h3,{id:"getadjacentcaret",children:"getAdjacentCaret"}),"\n",(0,l.jsxs)(i.p,{children:["\u2022 ",(0,l.jsx)(i.strong,{children:"getAdjacentCaret"}),": () => ",(0,l.jsx)(i.code,{children:"null"})," | ",(0,l.jsx)(i.a,{href:"/docs/api/interfaces/lexical.SiblingCaret",children:(0,l.jsx)(i.code,{children:"SiblingCaret"})}),"<",(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,l.jsx)(i.code,{children:"LexicalNode"})}),", ",(0,l.jsx)(i.code,{children:"D"}),">"]}),"\n",(0,l.jsx)(i.p,{children:"Get a new SiblingCaret from getNodeAtCaret() in the same direction."}),"\n",(0,l.jsx)(i.h4,{id:"type-declaration",children:"Type declaration"}),"\n",(0,l.jsxs)(i.p,{children:["\u25B8 (): ",(0,l.jsx)(i.code,{children:"null"})," | ",(0,l.jsx)(i.a,{href:"/docs/api/interfaces/lexical.SiblingCaret",children:(0,l.jsx)(i.code,{children:"SiblingCaret"})}),"<",(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,l.jsx)(i.code,{children:"LexicalNode"})}),", ",(0,l.jsx)(i.code,{children:"D"}),">"]}),"\n",(0,l.jsx)(i.h5,{id:"returns",children:"Returns"}),"\n",(0,l.jsxs)(i.p,{children:[(0,l.jsx)(i.code,{children:"null"})," | ",(0,l.jsx)(i.a,{href:"/docs/api/interfaces/lexical.SiblingCaret",children:(0,l.jsx)(i.code,{children:"SiblingCaret"})}),"<",(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,l.jsx)(i.code,{children:"LexicalNode"})}),", ",(0,l.jsx)(i.code,{children:"D"}),">"]}),"\n",(0,l.jsx)(i.h4,{id:"inherited-from-1",children:"Inherited from"}),"\n",(0,l.jsxs)(i.p,{children:[(0,l.jsx)(i.a,{href:"/docs/api/interfaces/lexical.BaseCaret",children:"BaseCaret"}),".",(0,l.jsx)(i.a,{href:"/docs/api/interfaces/lexical.BaseCaret#getadjacentcaret",children:"getAdjacentCaret"})]}),"\n",(0,l.jsx)(i.h4,{id:"defined-in-1",children:"Defined in"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L63",children:"packages/lexical/src/caret/LexicalCaret.ts:63"})}),"\n",(0,l.jsx)(i.hr,{}),"\n",(0,l.jsx)(i.h3,{id:"getchildcaret",children:"getChildCaret"}),"\n",(0,l.jsxs)(i.p,{children:["\u2022 ",(0,l.jsx)(i.strong,{children:"getChildCaret"}),": () => ",(0,l.jsx)(i.code,{children:"null"})]}),"\n",(0,l.jsx)(i.p,{children:"A TextPointCaret can not have a ChildCaret."}),"\n",(0,l.jsx)(i.h4,{id:"type-declaration-1",children:"Type declaration"}),"\n",(0,l.jsxs)(i.p,{children:["\u25B8 (): ",(0,l.jsx)(i.code,{children:"null"})]}),"\n",(0,l.jsx)(i.h5,{id:"returns-1",children:"Returns"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.code,{children:"null"})}),"\n",(0,l.jsx)(i.h4,{id:"defined-in-2",children:"Defined in"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L291",children:"packages/lexical/src/caret/LexicalCaret.ts:291"})}),"\n",(0,l.jsx)(i.hr,{}),"\n",(0,l.jsx)(i.h3,{id:"getflipped",children:"getFlipped"}),"\n",(0,l.jsxs)(i.p,{children:["\u2022 ",(0,l.jsx)(i.strong,{children:"getFlipped"}),": () => ",(0,l.jsx)(i.a,{href:"/docs/api/interfaces/lexical.TextPointCaret",children:(0,l.jsx)(i.code,{children:"TextPointCaret"})}),"<",(0,l.jsx)(i.code,{children:"T"}),", ",(0,l.jsx)(i.a,{href:"/docs/api/modules/lexical#flipdirection",children:(0,l.jsx)(i.code,{children:"FlipDirection"})}),"<",(0,l.jsx)(i.code,{children:"D"}),">>"]}),"\n",(0,l.jsx)(i.p,{children:"Get a new TextPointCaret with the head and tail of its directional arrow flipped, such that flipping twice is the identity.\nFor a TextPointCaret this merely flips the direction because the arrow is internal to the node."}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.strong,{children:(0,l.jsx)(i.code,{children:"Example"})})}),"\n",(0,l.jsx)(i.pre,{children:(0,l.jsx)(i.code,{children:"caret.getFlipped().getFlipped().is(caret) === true;\n"})}),"\n",(0,l.jsx)(i.h4,{id:"type-declaration-2",children:"Type declaration"}),"\n",(0,l.jsxs)(i.p,{children:["\u25B8 (): ",(0,l.jsx)(i.a,{href:"/docs/api/interfaces/lexical.TextPointCaret",children:(0,l.jsx)(i.code,{children:"TextPointCaret"})}),"<",(0,l.jsx)(i.code,{children:"T"}),", ",(0,l.jsx)(i.a,{href:"/docs/api/modules/lexical#flipdirection",children:(0,l.jsx)(i.code,{children:"FlipDirection"})}),"<",(0,l.jsx)(i.code,{children:"D"}),">>"]}),"\n",(0,l.jsx)(i.h5,{id:"returns-2",children:"Returns"}),"\n",(0,l.jsxs)(i.p,{children:[(0,l.jsx)(i.a,{href:"/docs/api/interfaces/lexical.TextPointCaret",children:(0,l.jsx)(i.code,{children:"TextPointCaret"})}),"<",(0,l.jsx)(i.code,{children:"T"}),", ",(0,l.jsx)(i.a,{href:"/docs/api/modules/lexical#flipdirection",children:(0,l.jsx)(i.code,{children:"FlipDirection"})}),"<",(0,l.jsx)(i.code,{children:"D"}),">>"]}),"\n",(0,l.jsx)(i.h4,{id:"defined-in-3",children:"Defined in"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L322",children:"packages/lexical/src/caret/LexicalCaret.ts:322"})}),"\n",(0,l.jsx)(i.hr,{}),"\n",(0,l.jsx)(i.h3,{id:"getlatest",children:"getLatest"}),"\n",(0,l.jsxs)(i.p,{children:["\u2022 ",(0,l.jsx)(i.strong,{children:"getLatest"}),": () => ",(0,l.jsx)(i.a,{href:"/docs/api/interfaces/lexical.TextPointCaret",children:(0,l.jsx)(i.code,{children:"TextPointCaret"})}),"<",(0,l.jsx)(i.code,{children:"T"}),", ",(0,l.jsx)(i.code,{children:"D"}),">"]}),"\n",(0,l.jsx)(i.p,{children:"Get a new caret with the latest origin pointer"}),"\n",(0,l.jsx)(i.h4,{id:"type-declaration-3",children:"Type declaration"}),"\n",(0,l.jsxs)(i.p,{children:["\u25B8 (): ",(0,l.jsx)(i.a,{href:"/docs/api/interfaces/lexical.TextPointCaret",children:(0,l.jsx)(i.code,{children:"TextPointCaret"})}),"<",(0,l.jsx)(i.code,{children:"T"}),", ",(0,l.jsx)(i.code,{children:"D"}),">"]}),"\n",(0,l.jsx)(i.h5,{id:"returns-3",children:"Returns"}),"\n",(0,l.jsxs)(i.p,{children:[(0,l.jsx)(i.a,{href:"/docs/api/interfaces/lexical.TextPointCaret",children:(0,l.jsx)(i.code,{children:"TextPointCaret"})}),"<",(0,l.jsx)(i.code,{children:"T"}),", ",(0,l.jsx)(i.code,{children:"D"}),">"]}),"\n",(0,l.jsx)(i.h4,{id:"defined-in-4",children:"Defined in"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L287",children:"packages/lexical/src/caret/LexicalCaret.ts:287"})}),"\n",(0,l.jsx)(i.hr,{}),"\n",(0,l.jsx)(i.h3,{id:"getnodeatcaret",children:"getNodeAtCaret"}),"\n",(0,l.jsxs)(i.p,{children:["\u2022 ",(0,l.jsx)(i.strong,{children:"getNodeAtCaret"}),": () => ",(0,l.jsx)(i.code,{children:"null"})," | ",(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,l.jsx)(i.code,{children:"LexicalNode"})})]}),"\n",(0,l.jsx)(i.p,{children:"Get the node connected to the origin in the caret's direction, or null if there is no node"}),"\n",(0,l.jsx)(i.h4,{id:"type-declaration-4",children:"Type declaration"}),"\n",(0,l.jsxs)(i.p,{children:["\u25B8 (): ",(0,l.jsx)(i.code,{children:"null"})," | ",(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,l.jsx)(i.code,{children:"LexicalNode"})})]}),"\n",(0,l.jsx)(i.h5,{id:"returns-4",children:"Returns"}),"\n",(0,l.jsxs)(i.p,{children:[(0,l.jsx)(i.code,{children:"null"})," | ",(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,l.jsx)(i.code,{children:"LexicalNode"})})]}),"\n",(0,l.jsx)(i.h4,{id:"inherited-from-2",children:"Inherited from"}),"\n",(0,l.jsxs)(i.p,{children:[(0,l.jsx)(i.a,{href:"/docs/api/interfaces/lexical.BaseCaret",children:"BaseCaret"}),".",(0,l.jsx)(i.a,{href:"/docs/api/interfaces/lexical.BaseCaret#getnodeatcaret",children:"getNodeAtCaret"})]}),"\n",(0,l.jsx)(i.h4,{id:"defined-in-5",children:"Defined in"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L61",children:"packages/lexical/src/caret/LexicalCaret.ts:61"})}),"\n",(0,l.jsx)(i.hr,{}),"\n",(0,l.jsx)(i.h3,{id:"getparentatcaret",children:"getParentAtCaret"}),"\n",(0,l.jsxs)(i.p,{children:["\u2022 ",(0,l.jsx)(i.strong,{children:"getParentAtCaret"}),": () => ",(0,l.jsx)(i.code,{children:"null"})," | ",(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode",children:(0,l.jsx)(i.code,{children:"ElementNode"})})]}),"\n",(0,l.jsxs)(i.p,{children:["Get the ElementNode that is the logical parent (",(0,l.jsx)(i.code,{children:"origin"})," for ",(0,l.jsx)(i.code,{children:"ChildCaret"}),", ",(0,l.jsx)(i.code,{children:"origin.getParent()"})," for ",(0,l.jsx)(i.code,{children:"SiblingCaret"}),")"]}),"\n",(0,l.jsx)(i.h4,{id:"type-declaration-5",children:"Type declaration"}),"\n",(0,l.jsxs)(i.p,{children:["\u25B8 (): ",(0,l.jsx)(i.code,{children:"null"})," | ",(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode",children:(0,l.jsx)(i.code,{children:"ElementNode"})})]}),"\n",(0,l.jsx)(i.h5,{id:"returns-5",children:"Returns"}),"\n",(0,l.jsxs)(i.p,{children:[(0,l.jsx)(i.code,{children:"null"})," | ",(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode",children:(0,l.jsx)(i.code,{children:"ElementNode"})})]}),"\n",(0,l.jsx)(i.h4,{id:"inherited-from-3",children:"Inherited from"}),"\n",(0,l.jsxs)(i.p,{children:[(0,l.jsx)(i.a,{href:"/docs/api/interfaces/lexical.BaseCaret",children:"BaseCaret"}),".",(0,l.jsx)(i.a,{href:"/docs/api/interfaces/lexical.BaseCaret#getparentatcaret",children:"getParentAtCaret"})]}),"\n",(0,l.jsx)(i.h4,{id:"defined-in-6",children:"Defined in"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L59",children:"packages/lexical/src/caret/LexicalCaret.ts:59"})}),"\n",(0,l.jsx)(i.hr,{}),"\n",(0,l.jsx)(i.h3,{id:"getparentcaret",children:"getParentCaret"}),"\n",(0,l.jsxs)(i.p,{children:["\u2022 ",(0,l.jsx)(i.strong,{children:"getParentCaret"}),": (",(0,l.jsx)(i.code,{children:"mode?"}),": ",(0,l.jsx)(i.a,{href:"/docs/api/modules/lexical#rootmode",children:(0,l.jsx)(i.code,{children:"RootMode"})}),") => ",(0,l.jsx)(i.code,{children:"null"})," | ",(0,l.jsx)(i.a,{href:"/docs/api/interfaces/lexical.SiblingCaret",children:(0,l.jsx)(i.code,{children:"SiblingCaret"})}),"<",(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode",children:(0,l.jsx)(i.code,{children:"ElementNode"})}),", ",(0,l.jsx)(i.code,{children:"D"}),">"]}),"\n",(0,l.jsx)(i.p,{children:"Get the caret in the same direction from the parent of this origin."}),"\n",(0,l.jsx)(i.h4,{id:"type-declaration-6",children:"Type declaration"}),"\n",(0,l.jsxs)(i.p,{children:["\u25B8 (",(0,l.jsx)(i.code,{children:"mode?"}),"): ",(0,l.jsx)(i.code,{children:"null"})," | ",(0,l.jsx)(i.a,{href:"/docs/api/interfaces/lexical.SiblingCaret",children:(0,l.jsx)(i.code,{children:"SiblingCaret"})}),"<",(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode",children:(0,l.jsx)(i.code,{children:"ElementNode"})}),", ",(0,l.jsx)(i.code,{children:"D"}),">"]}),"\n",(0,l.jsx)(i.h5,{id:"parameters",children:"Parameters"}),"\n",(0,l.jsxs)(i.table,{children:[(0,l.jsx)(i.thead,{children:(0,l.jsxs)(i.tr,{children:[(0,l.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(i.th,{style:{textAlign:"left"},children:"Type"}),(0,l.jsx)(i.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,l.jsx)(i.tbody,{children:(0,l.jsxs)(i.tr,{children:[(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.code,{children:"mode?"})}),(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.a,{href:"/docs/api/modules/lexical#rootmode",children:(0,l.jsx)(i.code,{children:"RootMode"})})}),(0,l.jsx)(i.td,{style:{textAlign:"left"},children:"'root' to return null at the root, 'shadowRoot' to return null at the root or any shadow root"})]})})]}),"\n",(0,l.jsx)(i.h5,{id:"returns-6",children:"Returns"}),"\n",(0,l.jsxs)(i.p,{children:[(0,l.jsx)(i.code,{children:"null"})," | ",(0,l.jsx)(i.a,{href:"/docs/api/interfaces/lexical.SiblingCaret",children:(0,l.jsx)(i.code,{children:"SiblingCaret"})}),"<",(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode",children:(0,l.jsx)(i.code,{children:"ElementNode"})}),", ",(0,l.jsx)(i.code,{children:"D"}),">"]}),"\n",(0,l.jsx)(i.h4,{id:"defined-in-7",children:"Defined in"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L298",children:"packages/lexical/src/caret/LexicalCaret.ts:298"})}),"\n",(0,l.jsx)(i.hr,{}),"\n",(0,l.jsx)(i.h3,{id:"getsiblingcaret",children:"getSiblingCaret"}),"\n",(0,l.jsxs)(i.p,{children:["\u2022 ",(0,l.jsx)(i.strong,{children:"getSiblingCaret"}),": () => ",(0,l.jsx)(i.a,{href:"/docs/api/interfaces/lexical.SiblingCaret",children:(0,l.jsx)(i.code,{children:"SiblingCaret"})}),"<",(0,l.jsx)(i.code,{children:"T"}),", ",(0,l.jsx)(i.code,{children:"D"}),">"]}),"\n",(0,l.jsx)(i.p,{children:"Get a new SiblingCaret with this same node"}),"\n",(0,l.jsx)(i.h4,{id:"type-declaration-7",children:"Type declaration"}),"\n",(0,l.jsxs)(i.p,{children:["\u25B8 (): ",(0,l.jsx)(i.a,{href:"/docs/api/interfaces/lexical.SiblingCaret",children:(0,l.jsx)(i.code,{children:"SiblingCaret"})}),"<",(0,l.jsx)(i.code,{children:"T"}),", ",(0,l.jsx)(i.code,{children:"D"}),">"]}),"\n",(0,l.jsx)(i.h5,{id:"returns-7",children:"Returns"}),"\n",(0,l.jsxs)(i.p,{children:[(0,l.jsx)(i.a,{href:"/docs/api/interfaces/lexical.SiblingCaret",children:(0,l.jsx)(i.code,{children:"SiblingCaret"})}),"<",(0,l.jsx)(i.code,{children:"T"}),", ",(0,l.jsx)(i.code,{children:"D"}),">"]}),"\n",(0,l.jsx)(i.h4,{id:"inherited-from-4",children:"Inherited from"}),"\n",(0,l.jsxs)(i.p,{children:[(0,l.jsx)(i.a,{href:"/docs/api/interfaces/lexical.BaseCaret",children:"BaseCaret"}),".",(0,l.jsx)(i.a,{href:"/docs/api/interfaces/lexical.BaseCaret#getsiblingcaret",children:"getSiblingCaret"})]}),"\n",(0,l.jsx)(i.h4,{id:"defined-in-8",children:"Defined in"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L67",children:"packages/lexical/src/caret/LexicalCaret.ts:67"})}),"\n",(0,l.jsx)(i.hr,{}),"\n",(0,l.jsx)(i.h3,{id:"insert",children:"insert"}),"\n",(0,l.jsxs)(i.p,{children:["\u2022 ",(0,l.jsx)(i.strong,{children:"insert"}),": (",(0,l.jsx)(i.code,{children:"node"}),": ",(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,l.jsx)(i.code,{children:"LexicalNode"})}),") => ",(0,l.jsx)(i.code,{children:"this"})]}),"\n",(0,l.jsxs)(i.p,{children:["Insert a node connected to origin in this direction (before the node that this caret is pointing towards, if any existed).\nFor a ",(0,l.jsx)(i.code,{children:"SiblingCaret"})," this is ",(0,l.jsx)(i.code,{children:"origin.insertAfter(node)"})," for next, or ",(0,l.jsx)(i.code,{children:"origin.insertBefore(node)"})," for previous.\nFor a ",(0,l.jsx)(i.code,{children:"ChildCaret"})," this is ",(0,l.jsx)(i.code,{children:"origin.splice(0, 0, [node])"})," for next or ",(0,l.jsx)(i.code,{children:"origin.append(node)"})," for previous."]}),"\n",(0,l.jsx)(i.h4,{id:"type-declaration-8",children:"Type declaration"}),"\n",(0,l.jsxs)(i.p,{children:["\u25B8 (",(0,l.jsx)(i.code,{children:"node"}),"): ",(0,l.jsx)(i.code,{children:"this"})]}),"\n",(0,l.jsx)(i.h5,{id:"parameters-1",children:"Parameters"}),"\n",(0,l.jsxs)(i.table,{children:[(0,l.jsx)(i.thead,{children:(0,l.jsxs)(i.tr,{children:[(0,l.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(i.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,l.jsx)(i.tbody,{children:(0,l.jsxs)(i.tr,{children:[(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.code,{children:"node"})}),(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,l.jsx)(i.code,{children:"LexicalNode"})})})]})})]}),"\n",(0,l.jsx)(i.h5,{id:"returns-8",children:"Returns"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.code,{children:"this"})}),"\n",(0,l.jsx)(i.h4,{id:"inherited-from-5",children:"Inherited from"}),"\n",(0,l.jsxs)(i.p,{children:[(0,l.jsx)(i.a,{href:"/docs/api/interfaces/lexical.BaseCaret",children:"BaseCaret"}),".",(0,l.jsx)(i.a,{href:"/docs/api/interfaces/lexical.BaseCaret#insert",children:"insert"})]}),"\n",(0,l.jsx)(i.h4,{id:"defined-in-9",children:"Defined in"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L75",children:"packages/lexical/src/caret/LexicalCaret.ts:75"})}),"\n",(0,l.jsx)(i.hr,{}),"\n",(0,l.jsx)(i.h3,{id:"issamenodecaret",children:"isSameNodeCaret"}),"\n",(0,l.jsxs)(i.p,{children:["\u2022 ",(0,l.jsx)(i.strong,{children:"isSameNodeCaret"}),": (",(0,l.jsx)(i.code,{children:"other"}),": ",(0,l.jsx)(i.code,{children:"undefined"})," | ",(0,l.jsx)(i.code,{children:"null"})," | ",(0,l.jsx)(i.a,{href:"/docs/api/modules/lexical#pointcaret",children:(0,l.jsx)(i.code,{children:"PointCaret"})}),"<",(0,l.jsx)(i.a,{href:"/docs/api/modules/lexical#caretdirection",children:(0,l.jsx)(i.code,{children:"CaretDirection"})}),">) => other is TextPointCaret<T, D> | SiblingCaret<T, D>"]}),"\n",(0,l.jsx)(i.p,{children:"Return true if other is a TextPointCaret or SiblingCaret with the same\norigin (by node key comparison) and direction."}),"\n",(0,l.jsx)(i.h4,{id:"type-declaration-9",children:"Type declaration"}),"\n",(0,l.jsxs)(i.p,{children:["\u25B8 (",(0,l.jsx)(i.code,{children:"other"}),"): other is TextPointCaret<T, D> | SiblingCaret<T, D>"]}),"\n",(0,l.jsx)(i.h5,{id:"parameters-2",children:"Parameters"}),"\n",(0,l.jsxs)(i.table,{children:[(0,l.jsx)(i.thead,{children:(0,l.jsxs)(i.tr,{children:[(0,l.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(i.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,l.jsx)(i.tbody,{children:(0,l.jsxs)(i.tr,{children:[(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.code,{children:"other"})}),(0,l.jsxs)(i.td,{style:{textAlign:"left"},children:[(0,l.jsx)(i.code,{children:"undefined"})," | ",(0,l.jsx)(i.code,{children:"null"})," | ",(0,l.jsx)(i.a,{href:"/docs/api/modules/lexical#pointcaret",children:(0,l.jsx)(i.code,{children:"PointCaret"})}),"<",(0,l.jsx)(i.a,{href:"/docs/api/modules/lexical#caretdirection",children:(0,l.jsx)(i.code,{children:"CaretDirection"})}),">"]})]})})]}),"\n",(0,l.jsx)(i.h5,{id:"returns-9",children:"Returns"}),"\n",(0,l.jsx)(i.p,{children:"other is TextPointCaret<T, D> | SiblingCaret<T, D>"}),"\n",(0,l.jsx)(i.h4,{id:"defined-in-10",children:"Defined in"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L303",children:"packages/lexical/src/caret/LexicalCaret.ts:303"})}),"\n",(0,l.jsx)(i.hr,{}),"\n",(0,l.jsx)(i.h3,{id:"issamepointcaret",children:"isSamePointCaret"}),"\n",(0,l.jsxs)(i.p,{children:["\u2022 ",(0,l.jsx)(i.strong,{children:"isSamePointCaret"}),": (",(0,l.jsx)(i.code,{children:"other"}),": ",(0,l.jsx)(i.code,{children:"undefined"})," | ",(0,l.jsx)(i.code,{children:"null"})," | ",(0,l.jsx)(i.a,{href:"/docs/api/modules/lexical#pointcaret",children:(0,l.jsx)(i.code,{children:"PointCaret"})}),"<",(0,l.jsx)(i.a,{href:"/docs/api/modules/lexical#caretdirection",children:(0,l.jsx)(i.code,{children:"CaretDirection"})}),">) => other is TextPointCaret<T, D>"]}),"\n",(0,l.jsx)(i.p,{children:"Return true if other is a ChildCaret with the same\norigin (by node key comparison) and direction."}),"\n",(0,l.jsx)(i.h4,{id:"type-declaration-10",children:"Type declaration"}),"\n",(0,l.jsxs)(i.p,{children:["\u25B8 (",(0,l.jsx)(i.code,{children:"other"}),"): other is TextPointCaret<T, D>"]}),"\n",(0,l.jsx)(i.h5,{id:"parameters-3",children:"Parameters"}),"\n",(0,l.jsxs)(i.table,{children:[(0,l.jsx)(i.thead,{children:(0,l.jsxs)(i.tr,{children:[(0,l.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(i.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,l.jsx)(i.tbody,{children:(0,l.jsxs)(i.tr,{children:[(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.code,{children:"other"})}),(0,l.jsxs)(i.td,{style:{textAlign:"left"},children:[(0,l.jsx)(i.code,{children:"undefined"})," | ",(0,l.jsx)(i.code,{children:"null"})," | ",(0,l.jsx)(i.a,{href:"/docs/api/modules/lexical#pointcaret",children:(0,l.jsx)(i.code,{children:"PointCaret"})}),"<",(0,l.jsx)(i.a,{href:"/docs/api/modules/lexical#caretdirection",children:(0,l.jsx)(i.code,{children:"CaretDirection"})}),">"]})]})})]}),"\n",(0,l.jsx)(i.h5,{id:"returns-10",children:"Returns"}),"\n",(0,l.jsx)(i.p,{children:"other is TextPointCaret<T, D>"}),"\n",(0,l.jsx)(i.h4,{id:"defined-in-11",children:"Defined in"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L310",children:"packages/lexical/src/caret/LexicalCaret.ts:310"})}),"\n",(0,l.jsx)(i.hr,{}),"\n",(0,l.jsx)(i.h3,{id:"offset",children:"offset"}),"\n",(0,l.jsxs)(i.p,{children:["\u2022 ",(0,l.jsx)(i.code,{children:"Readonly"})," ",(0,l.jsx)(i.strong,{children:"offset"}),": ",(0,l.jsx)(i.code,{children:"number"})]}),"\n",(0,l.jsx)(i.p,{children:"The offset into the string"}),"\n",(0,l.jsx)(i.h4,{id:"defined-in-12",children:"Defined in"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L285",children:"packages/lexical/src/caret/LexicalCaret.ts:285"})}),"\n",(0,l.jsx)(i.hr,{}),"\n",(0,l.jsx)(i.h3,{id:"origin",children:"origin"}),"\n",(0,l.jsxs)(i.p,{children:["\u2022 ",(0,l.jsx)(i.code,{children:"Readonly"})," ",(0,l.jsx)(i.strong,{children:"origin"}),": ",(0,l.jsx)(i.code,{children:"T"})]}),"\n",(0,l.jsx)(i.p,{children:"The origin node of this caret, typically this is what you will use in traversals"}),"\n",(0,l.jsx)(i.h4,{id:"inherited-from-6",children:"Inherited from"}),"\n",(0,l.jsxs)(i.p,{children:[(0,l.jsx)(i.a,{href:"/docs/api/interfaces/lexical.BaseCaret",children:"BaseCaret"}),".",(0,l.jsx)(i.a,{href:"/docs/api/interfaces/lexical.BaseCaret#origin",children:"origin"})]}),"\n",(0,l.jsx)(i.h4,{id:"defined-in-13",children:"Defined in"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L53",children:"packages/lexical/src/caret/LexicalCaret.ts:53"})}),"\n",(0,l.jsx)(i.hr,{}),"\n",(0,l.jsx)(i.h3,{id:"remove",children:"remove"}),"\n",(0,l.jsxs)(i.p,{children:["\u2022 ",(0,l.jsx)(i.strong,{children:"remove"}),": () => ",(0,l.jsx)(i.code,{children:"this"})]}),"\n",(0,l.jsx)(i.p,{children:"Remove the getNodeAtCaret() node that this caret is pointing towards, if it exists"}),"\n",(0,l.jsx)(i.h4,{id:"type-declaration-11",children:"Type declaration"}),"\n",(0,l.jsxs)(i.p,{children:["\u25B8 (): ",(0,l.jsx)(i.code,{children:"this"})]}),"\n",(0,l.jsx)(i.h5,{id:"returns-11",children:"Returns"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.code,{children:"this"})}),"\n",(0,l.jsx)(i.h4,{id:"inherited-from-7",children:"Inherited from"}),"\n",(0,l.jsxs)(i.p,{children:[(0,l.jsx)(i.a,{href:"/docs/api/interfaces/lexical.BaseCaret",children:"BaseCaret"}),".",(0,l.jsx)(i.a,{href:"/docs/api/interfaces/lexical.BaseCaret#remove",children:"remove"})]}),"\n",(0,l.jsx)(i.h4,{id:"defined-in-14",children:"Defined in"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L69",children:"packages/lexical/src/caret/LexicalCaret.ts:69"})}),"\n",(0,l.jsx)(i.hr,{}),"\n",(0,l.jsx)(i.h3,{id:"replaceorinsert",children:"replaceOrInsert"}),"\n",(0,l.jsxs)(i.p,{children:["\u2022 ",(0,l.jsx)(i.strong,{children:"replaceOrInsert"}),": (",(0,l.jsx)(i.code,{children:"node"}),": ",(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,l.jsx)(i.code,{children:"LexicalNode"})}),", ",(0,l.jsx)(i.code,{children:"includeChildren?"}),": ",(0,l.jsx)(i.code,{children:"boolean"}),") => ",(0,l.jsx)(i.code,{children:"this"})]}),"\n",(0,l.jsx)(i.p,{children:"If getNodeAtCaret() is not null then replace it with node, otherwise insert node"}),"\n",(0,l.jsx)(i.h4,{id:"type-declaration-12",children:"Type declaration"}),"\n",(0,l.jsxs)(i.p,{children:["\u25B8 (",(0,l.jsx)(i.code,{children:"node"}),", ",(0,l.jsx)(i.code,{children:"includeChildren?"}),"): ",(0,l.jsx)(i.code,{children:"this"})]}),"\n",(0,l.jsx)(i.h5,{id:"parameters-4",children:"Parameters"}),"\n",(0,l.jsxs)(i.table,{children:[(0,l.jsx)(i.thead,{children:(0,l.jsxs)(i.tr,{children:[(0,l.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(i.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,l.jsxs)(i.tbody,{children:[(0,l.jsxs)(i.tr,{children:[(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.code,{children:"node"})}),(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,l.jsx)(i.code,{children:"LexicalNode"})})})]}),(0,l.jsxs)(i.tr,{children:[(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.code,{children:"includeChildren?"})}),(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.code,{children:"boolean"})})]})]})]}),"\n",(0,l.jsx)(i.h5,{id:"returns-12",children:"Returns"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.code,{children:"this"})}),"\n",(0,l.jsx)(i.h4,{id:"inherited-from-8",children:"Inherited from"}),"\n",(0,l.jsxs)(i.p,{children:[(0,l.jsx)(i.a,{href:"/docs/api/interfaces/lexical.BaseCaret",children:"BaseCaret"}),".",(0,l.jsx)(i.a,{href:"/docs/api/interfaces/lexical.BaseCaret#replaceorinsert",children:"replaceOrInsert"})]}),"\n",(0,l.jsx)(i.h4,{id:"defined-in-15",children:"Defined in"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L77",children:"packages/lexical/src/caret/LexicalCaret.ts:77"})}),"\n",(0,l.jsx)(i.hr,{}),"\n",(0,l.jsx)(i.h3,{id:"splice",children:"splice"}),"\n",(0,l.jsxs)(i.p,{children:["\u2022 ",(0,l.jsx)(i.strong,{children:"splice"}),": (",(0,l.jsx)(i.code,{children:"deleteCount"}),": ",(0,l.jsx)(i.code,{children:"number"}),", ",(0,l.jsx)(i.code,{children:"nodes"}),": ",(0,l.jsx)(i.code,{children:"Iterable"}),"<",(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,l.jsx)(i.code,{children:"LexicalNode"})}),">, ",(0,l.jsx)(i.code,{children:"nodesDirection?"}),": ",(0,l.jsx)(i.a,{href:"/docs/api/modules/lexical#caretdirection",children:(0,l.jsx)(i.code,{children:"CaretDirection"})}),") => ",(0,l.jsx)(i.code,{children:"this"})]}),"\n",(0,l.jsx)(i.p,{children:"Splice an iterable (typically an Array) of nodes into this location."}),"\n",(0,l.jsx)(i.h4,{id:"type-declaration-13",children:"Type declaration"}),"\n",(0,l.jsxs)(i.p,{children:["\u25B8 (",(0,l.jsx)(i.code,{children:"deleteCount"}),", ",(0,l.jsx)(i.code,{children:"nodes"}),", ",(0,l.jsx)(i.code,{children:"nodesDirection?"}),"): ",(0,l.jsx)(i.code,{children:"this"})]}),"\n",(0,l.jsx)(i.h5,{id:"parameters-5",children:"Parameters"}),"\n",(0,l.jsxs)(i.table,{children:[(0,l.jsx)(i.thead,{children:(0,l.jsxs)(i.tr,{children:[(0,l.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,l.jsx)(i.th,{style:{textAlign:"left"},children:"Type"}),(0,l.jsx)(i.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,l.jsxs)(i.tbody,{children:[(0,l.jsxs)(i.tr,{children:[(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.code,{children:"deleteCount"})}),(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.code,{children:"number"})}),(0,l.jsx)(i.td,{style:{textAlign:"left"},children:"The number of existing nodes to replace or delete"})]}),(0,l.jsxs)(i.tr,{children:[(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.code,{children:"nodes"})}),(0,l.jsxs)(i.td,{style:{textAlign:"left"},children:[(0,l.jsx)(i.code,{children:"Iterable"}),"<",(0,l.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,l.jsx)(i.code,{children:"LexicalNode"})}),">"]}),(0,l.jsx)(i.td,{style:{textAlign:"left"},children:"An iterable of nodes that will be inserted in this location, using replace instead of insert for the first deleteCount nodes"})]}),(0,l.jsxs)(i.tr,{children:[(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.code,{children:"nodesDirection?"})}),(0,l.jsx)(i.td,{style:{textAlign:"left"},children:(0,l.jsx)(i.a,{href:"/docs/api/modules/lexical#caretdirection",children:(0,l.jsx)(i.code,{children:"CaretDirection"})})}),(0,l.jsx)(i.td,{style:{textAlign:"left"},children:"The direction of the nodes iterable, defaults to 'next'"})]})]})]}),"\n",(0,l.jsx)(i.h5,{id:"returns-13",children:"Returns"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.code,{children:"this"})}),"\n",(0,l.jsx)(i.h4,{id:"inherited-from-9",children:"Inherited from"}),"\n",(0,l.jsxs)(i.p,{children:[(0,l.jsx)(i.a,{href:"/docs/api/interfaces/lexical.BaseCaret",children:"BaseCaret"}),".",(0,l.jsx)(i.a,{href:"/docs/api/interfaces/lexical.BaseCaret#splice",children:"splice"})]}),"\n",(0,l.jsx)(i.h4,{id:"defined-in-16",children:"Defined in"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L85",children:"packages/lexical/src/caret/LexicalCaret.ts:85"})}),"\n",(0,l.jsx)(i.hr,{}),"\n",(0,l.jsx)(i.h3,{id:"type",children:"type"}),"\n",(0,l.jsxs)(i.p,{children:["\u2022 ",(0,l.jsx)(i.code,{children:"Readonly"})," ",(0,l.jsx)(i.strong,{children:"type"}),": ",(0,l.jsx)(i.code,{children:'"text"'})]}),"\n",(0,l.jsx)(i.p,{children:"sibling for a SiblingCaret (pointing at the next or previous sibling) or child for a ChildCaret (pointing at the first or last child)"}),"\n",(0,l.jsx)(i.h4,{id:"inherited-from-10",children:"Inherited from"}),"\n",(0,l.jsxs)(i.p,{children:[(0,l.jsx)(i.a,{href:"/docs/api/interfaces/lexical.BaseCaret",children:"BaseCaret"}),".",(0,l.jsx)(i.a,{href:"/docs/api/interfaces/lexical.BaseCaret#type",children:"type"})]}),"\n",(0,l.jsx)(i.h4,{id:"defined-in-17",children:"Defined in"}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L55",children:"packages/lexical/src/caret/LexicalCaret.ts:55"})})]})}function x(e={}){let{wrapper:i}={...(0,t.a)(),...e.components};return i?(0,l.jsx)(i,{...e,children:(0,l.jsx)(h,{...e})}):h(e)}},22840:function(e,i,r){r.d(i,{Z:()=>c,a:()=>d});var n=r(2784);let l={},t=n.createContext(l);function d(e){let i=n.useContext(t);return n.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function c(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:d(e.components),n.createElement(t.Provider,{value:i},e.children)}}}]);