"use strict";(self.webpackChunk_lexical_website=self.webpackChunk_lexical_website||[]).push([["9459"],{24013:function(e,n,t){t.r(n),t.d(n,{frontMatter:()=>s,default:()=>h,contentTitle:()=>r,assets:()=>c,toc:()=>l,metadata:()=>o});var o=JSON.parse('{"id":"concepts/read-only","title":"Read Mode / Edit Mode","description":"Lexical supports two modes:","source":"@site/docs/concepts/read-only.md","sourceDirName":"concepts","slug":"/concepts/read-only","permalink":"/lexical/docs/concepts/read-only","draft":false,"unlisted":false,"editUrl":"https://github.com/QubitPi/lexical/tree/main/packages/lexical-website/docs/concepts/read-only.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Selection","permalink":"/lexical/docs/concepts/selection"},"next":{"title":"useHistory","permalink":"/lexical/docs/concepts/history"}}'),i=t(52322),d=t(22840);let s={},r="Read Mode / Edit Mode",c={},l=[{value:"Setting the mode",id:"setting-the-mode",level:2},{value:"Reading the mode",id:"reading-the-mode",level:2}];function a(e){let n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,d.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"read-mode--edit-mode",children:"Read Mode / Edit Mode"})}),"\n",(0,i.jsx)(n.p,{children:"Lexical supports two modes:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Read mode"}),"\n",(0,i.jsx)(n.li,{children:"Edit mode"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The default behavior for Lexical is edit mode, or more accurately not read only mode. Under-the-hood, the main\nimplementation detail is that the ",(0,i.jsx)(n.code,{children:"contentEditable"})," is being set to ",(0,i.jsx)(n.code,{children:'"false"'})," or ",(0,i.jsx)(n.code,{children:'"true"'})," depending on the mode.\nSpecific plugins can listen to the mode change too \u2013 allowing them to customize parts of the UI depending on the\nmode."]}),"\n",(0,i.jsx)(n.h2,{id:"setting-the-mode",children:"Setting the mode"}),"\n",(0,i.jsx)(n.p,{children:"In order to set the mode, this can be done on creation of the editor:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const editor = createEditor({\n  editable: true,\n  ...\n})\n"})}),"\n",(0,i.jsxs)(n.p,{children:["If you're using ",(0,i.jsx)(n.code,{children:"@lexical/react"})," this can be done on the ",(0,i.jsx)(n.code,{children:"initialConfig"})," passed to ",(0,i.jsx)(n.code,{children:"<LexicalComposer>"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"<LexicalComposer initialConfig={{editable: true}}>\n  ...\n</LexicalComposer>\n"})}),"\n",(0,i.jsx)(n.p,{children:"After an editor is created, the mode can be changed imperatively:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"editor.setEditable(true);\n"})}),"\n",(0,i.jsx)(n.h2,{id:"reading-the-mode",children:"Reading the mode"}),"\n",(0,i.jsx)(n.p,{children:"In order to find the current mode of the editor you can use:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const isEditable = editor.isEditable(); // Returns true or false\n"})}),"\n",(0,i.jsx)(n.p,{children:"You can also get notified when the editor's read only mode has changed:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const removeEditableListener = editor.registerEditableListener(\n  (isEditable) => {\n    // The editor's mode is passed in!\n    console.log(isEditable);\n  },\n);\n\n// Do not forget to unregister the listener when no longer needed!\nremoveEditableListener();\n"})})]})}function h(e={}){let{wrapper:n}={...(0,d.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},22840:function(e,n,t){t.d(n,{Z:()=>r,a:()=>s});var o=t(2784);let i={},d=o.createContext(i);function s(e){let n=o.useContext(d);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),o.createElement(d.Provider,{value:n},e.children)}}}]);