"use strict";(self.webpackChunk_lexical_website=self.webpackChunk_lexical_website||[]).push([["1492"],{39575:function(e,l,t){t.r(l),t.d(l,{frontMatter:()=>d,default:()=>a,contentTitle:()=>c,assets:()=>r,toc:()=>h,metadata:()=>n});var n=JSON.parse('{"id":"api/modules/lexical_selection","title":"Module: @lexical/selection","description":"References","source":"@site/docs/api/modules/lexical_selection.md","sourceDirName":"api/modules","slug":"/api/modules/lexical_selection","permalink":"/lexical/docs/api/modules/lexical_selection","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","frontMatter":{"id":"lexical_selection","title":"Module: @lexical/selection","custom_edit_url":null},"sidebar":"api","previous":{"title":"@lexical/rich-text","permalink":"/lexical/docs/api/modules/lexical_rich_text"},"next":{"title":"@lexical/table","permalink":"/lexical/docs/api/modules/lexical_table"}}'),i=t(52322),s=t(22840);let d={id:"lexical_selection",title:"Module: @lexical/selection",custom_edit_url:null},c=void 0,r={},h=[{value:"References",id:"references",level:2},{value:"$cloneWithProperties",id:"clonewithproperties",level:3},{value:"$selectAll",id:"selectall",level:3},{value:"Functions",id:"functions",level:2},{value:"$addNodeStyle",id:"addnodestyle",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Defined in",id:"defined-in",level:4},{value:"$copyBlockFormatIndent",id:"copyblockformatindent",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Defined in",id:"defined-in-1",level:4},{value:"$ensureForwardRangeSelection",id:"ensureforwardrangeselection",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-2",level:4},{value:"Defined in",id:"defined-in-2",level:4},{value:"$forEachSelectedTextNode",id:"foreachselectedtextnode",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-3",level:4},{value:"Defined in",id:"defined-in-3",level:4},{value:"$getSelectionStyleValueForProperty",id:"getselectionstylevalueforproperty",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-4",level:4},{value:"Defined in",id:"defined-in-4",level:4},{value:"$isAtNodeEnd",id:"isatnodeend",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-5",level:4},{value:"Defined in",id:"defined-in-5",level:4},{value:"$isParentElementRTL",id:"isparentelementrtl",level:3},{value:"Parameters",id:"parameters-6",level:4},{value:"Returns",id:"returns-6",level:4},{value:"Defined in",id:"defined-in-6",level:4},{value:"$moveCaretSelection",id:"movecaretselection",level:3},{value:"Parameters",id:"parameters-7",level:4},{value:"Returns",id:"returns-7",level:4},{value:"Defined in",id:"defined-in-7",level:4},{value:"$moveCharacter",id:"movecharacter",level:3},{value:"Parameters",id:"parameters-8",level:4},{value:"Returns",id:"returns-8",level:4},{value:"Defined in",id:"defined-in-8",level:4},{value:"$patchStyleText",id:"patchstyletext",level:3},{value:"Parameters",id:"parameters-9",level:4},{value:"Returns",id:"returns-9",level:4},{value:"Defined in",id:"defined-in-9",level:4},{value:"$setBlocksType",id:"setblockstype",level:3},{value:"Type parameters",id:"type-parameters",level:4},{value:"Parameters",id:"parameters-10",level:4},{value:"Returns",id:"returns-10",level:4},{value:"Defined in",id:"defined-in-10",level:4},{value:"$shouldOverrideDefaultCharacterSelection",id:"shouldoverridedefaultcharacterselection",level:3},{value:"Parameters",id:"parameters-11",level:4},{value:"Returns",id:"returns-11",level:4},{value:"Defined in",id:"defined-in-11",level:4},{value:"$sliceSelectedTextNodeContent",id:"sliceselectedtextnodecontent",level:3},{value:"Parameters",id:"parameters-12",level:4},{value:"Returns",id:"returns-12",level:4},{value:"Defined in",id:"defined-in-12",level:4},{value:"$trimTextContentFromAnchor",id:"trimtextcontentfromanchor",level:3},{value:"Parameters",id:"parameters-13",level:4},{value:"Returns",id:"returns-13",level:4},{value:"Defined in",id:"defined-in-13",level:4},{value:"$wrapNodes",id:"wrapnodes",level:3},{value:"Parameters",id:"parameters-14",level:4},{value:"Returns",id:"returns-14",level:4},{value:"Defined in",id:"defined-in-14",level:4},{value:"createDOMRange",id:"createdomrange",level:3},{value:"Parameters",id:"parameters-15",level:4},{value:"Returns",id:"returns-15",level:4},{value:"Defined in",id:"defined-in-15",level:4},{value:"createRectsFromDOMRange",id:"createrectsfromdomrange",level:3},{value:"Parameters",id:"parameters-16",level:4},{value:"Returns",id:"returns-16",level:4},{value:"Defined in",id:"defined-in-16",level:4},{value:"getCSSFromStyleObject",id:"getcssfromstyleobject",level:3},{value:"Parameters",id:"parameters-17",level:4},{value:"Returns",id:"returns-17",level:4},{value:"Defined in",id:"defined-in-17",level:4},{value:"getStyleObjectFromCSS",id:"getstyleobjectfromcss",level:3},{value:"Parameters",id:"parameters-18",level:4},{value:"Returns",id:"returns-18",level:4},{value:"Defined in",id:"defined-in-18",level:4},{value:"trimTextContentFromAnchor",id:"trimtextcontentfromanchor-1",level:3},{value:"Parameters",id:"parameters-19",level:4},{value:"Returns",id:"returns-19",level:4},{value:"Defined in",id:"defined-in-19",level:4}];function x(e){let l={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",hr:"hr",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(l.h2,{id:"references",children:"References"}),"\n",(0,i.jsx)(l.h3,{id:"clonewithproperties",children:"$cloneWithProperties"}),"\n",(0,i.jsxs)(l.p,{children:["Re-exports ",(0,i.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#clonewithproperties",children:"$cloneWithProperties"})]}),"\n",(0,i.jsx)(l.hr,{}),"\n",(0,i.jsx)(l.h3,{id:"selectall",children:"$selectAll"}),"\n",(0,i.jsxs)(l.p,{children:["Re-exports ",(0,i.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#selectall",children:"$selectAll"})]}),"\n",(0,i.jsx)(l.h2,{id:"functions",children:"Functions"}),"\n",(0,i.jsx)(l.h3,{id:"addnodestyle",children:"$addNodeStyle"}),"\n",(0,i.jsxs)(l.p,{children:["\u25B8 ",(0,i.jsx)(l.strong,{children:"$addNodeStyle"}),"(",(0,i.jsx)(l.code,{children:"node"}),"): ",(0,i.jsx)(l.code,{children:"void"})]}),"\n",(0,i.jsx)(l.p,{children:"Gets the TextNode's style object and adds the styles to the CSS."}),"\n",(0,i.jsx)(l.h4,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)(l.table,{children:[(0,i.jsx)(l.thead,{children:(0,i.jsxs)(l.tr,{children:[(0,i.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,i.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,i.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,i.jsx)(l.tbody,{children:(0,i.jsxs)(l.tr,{children:[(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.code,{children:"node"})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.TextNode",children:(0,i.jsx)(l.code,{children:"TextNode"})})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:"The TextNode to add styles to."})]})})]}),"\n",(0,i.jsx)(l.h4,{id:"returns",children:"Returns"}),"\n",(0,i.jsx)(l.p,{children:(0,i.jsx)(l.code,{children:"void"})}),"\n",(0,i.jsx)(l.h4,{id:"defined-in",children:"Defined in"}),"\n",(0,i.jsx)(l.p,{children:(0,i.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-selection/src/lexical-node.ts#L241",children:"packages/lexical-selection/src/lexical-node.ts:241"})}),"\n",(0,i.jsx)(l.hr,{}),"\n",(0,i.jsx)(l.h3,{id:"copyblockformatindent",children:"$copyBlockFormatIndent"}),"\n",(0,i.jsxs)(l.p,{children:["\u25B8 ",(0,i.jsx)(l.strong,{children:"$copyBlockFormatIndent"}),"(",(0,i.jsx)(l.code,{children:"srcNode"}),", ",(0,i.jsx)(l.code,{children:"destNode"}),"): ",(0,i.jsx)(l.code,{children:"void"})]}),"\n",(0,i.jsx)(l.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,i.jsxs)(l.table,{children:[(0,i.jsx)(l.thead,{children:(0,i.jsxs)(l.tr,{children:[(0,i.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,i.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,i.jsxs)(l.tbody,{children:[(0,i.jsxs)(l.tr,{children:[(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.code,{children:"srcNode"})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:(0,i.jsx)(l.code,{children:"ElementNode"})})})]}),(0,i.jsxs)(l.tr,{children:[(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.code,{children:"destNode"})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:(0,i.jsx)(l.code,{children:"ElementNode"})})})]})]})]}),"\n",(0,i.jsx)(l.h4,{id:"returns-1",children:"Returns"}),"\n",(0,i.jsx)(l.p,{children:(0,i.jsx)(l.code,{children:"void"})}),"\n",(0,i.jsx)(l.h4,{id:"defined-in-1",children:"Defined in"}),"\n",(0,i.jsx)(l.p,{children:(0,i.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-selection/src/range-selection.ts#L44",children:"packages/lexical-selection/src/range-selection.ts:44"})}),"\n",(0,i.jsx)(l.hr,{}),"\n",(0,i.jsx)(l.h3,{id:"ensureforwardrangeselection",children:"$ensureForwardRangeSelection"}),"\n",(0,i.jsxs)(l.p,{children:["\u25B8 ",(0,i.jsx)(l.strong,{children:"$ensureForwardRangeSelection"}),"(",(0,i.jsx)(l.code,{children:"selection"}),"): ",(0,i.jsx)(l.code,{children:"void"})]}),"\n",(0,i.jsx)(l.p,{children:"Ensure that the given RangeSelection is not backwards. If it\nis backwards, then the anchor and focus points will be swapped\nin-place. Ensuring that the selection is a writable RangeSelection\nis the responsibility of the caller (e.g. in a read-only context\nyou will want to clone $getSelection() before using this)."}),"\n",(0,i.jsx)(l.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,i.jsxs)(l.table,{children:[(0,i.jsx)(l.thead,{children:(0,i.jsxs)(l.tr,{children:[(0,i.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,i.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,i.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,i.jsx)(l.tbody,{children:(0,i.jsxs)(l.tr,{children:[(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.code,{children:"selection"})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.RangeSelection",children:(0,i.jsx)(l.code,{children:"RangeSelection"})})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:"a writable RangeSelection"})]})})]}),"\n",(0,i.jsx)(l.h4,{id:"returns-2",children:"Returns"}),"\n",(0,i.jsx)(l.p,{children:(0,i.jsx)(l.code,{children:"void"})}),"\n",(0,i.jsx)(l.h4,{id:"defined-in-2",children:"Defined in"}),"\n",(0,i.jsx)(l.p,{children:(0,i.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-selection/src/lexical-node.ts#L404",children:"packages/lexical-selection/src/lexical-node.ts:404"})}),"\n",(0,i.jsx)(l.hr,{}),"\n",(0,i.jsx)(l.h3,{id:"foreachselectedtextnode",children:"$forEachSelectedTextNode"}),"\n",(0,i.jsxs)(l.p,{children:["\u25B8 ",(0,i.jsx)(l.strong,{children:"$forEachSelectedTextNode"}),"(",(0,i.jsx)(l.code,{children:"fn"}),"): ",(0,i.jsx)(l.code,{children:"void"})]}),"\n",(0,i.jsx)(l.h4,{id:"parameters-3",children:"Parameters"}),"\n",(0,i.jsxs)(l.table,{children:[(0,i.jsx)(l.thead,{children:(0,i.jsxs)(l.tr,{children:[(0,i.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,i.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,i.jsx)(l.tbody,{children:(0,i.jsxs)(l.tr,{children:[(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.code,{children:"fn"})}),(0,i.jsxs)(l.td,{style:{textAlign:"left"},children:["(",(0,i.jsx)(l.code,{children:"textNode"}),": ",(0,i.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.TextNode",children:(0,i.jsx)(l.code,{children:"TextNode"})}),") => ",(0,i.jsx)(l.code,{children:"void"})]})]})})]}),"\n",(0,i.jsx)(l.h4,{id:"returns-3",children:"Returns"}),"\n",(0,i.jsx)(l.p,{children:(0,i.jsx)(l.code,{children:"void"})}),"\n",(0,i.jsx)(l.h4,{id:"defined-in-3",children:"Defined in"}),"\n",(0,i.jsx)(l.p,{children:(0,i.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-selection/src/lexical-node.ts#L329",children:"packages/lexical-selection/src/lexical-node.ts:329"})}),"\n",(0,i.jsx)(l.hr,{}),"\n",(0,i.jsx)(l.h3,{id:"getselectionstylevalueforproperty",children:"$getSelectionStyleValueForProperty"}),"\n",(0,i.jsxs)(l.p,{children:["\u25B8 ",(0,i.jsx)(l.strong,{children:"$getSelectionStyleValueForProperty"}),"(",(0,i.jsx)(l.code,{children:"selection"}),", ",(0,i.jsx)(l.code,{children:"styleProperty"}),", ",(0,i.jsx)(l.code,{children:"defaultValue?"}),"): ",(0,i.jsx)(l.code,{children:"string"})]}),"\n",(0,i.jsx)(l.p,{children:"Returns the current value of a CSS property for TextNodes in the Selection, if set. If not set, it returns the defaultValue.\nIf all TextNodes do not have the same value, it returns an empty string."}),"\n",(0,i.jsx)(l.h4,{id:"parameters-4",children:"Parameters"}),"\n",(0,i.jsxs)(l.table,{children:[(0,i.jsx)(l.thead,{children:(0,i.jsxs)(l.tr,{children:[(0,i.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,i.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,i.jsx)(l.th,{style:{textAlign:"left"},children:"Default value"}),(0,i.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,i.jsxs)(l.tbody,{children:[(0,i.jsxs)(l.tr,{children:[(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.code,{children:"selection"})}),(0,i.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,i.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.RangeSelection",children:(0,i.jsx)(l.code,{children:"RangeSelection"})})," | ",(0,i.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical_table.TableSelection",children:(0,i.jsx)(l.code,{children:"TableSelection"})})]}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.code,{children:"undefined"})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:"The selection of TextNodes whose value to find."})]}),(0,i.jsxs)(l.tr,{children:[(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.code,{children:"styleProperty"})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.code,{children:"string"})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.code,{children:"undefined"})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:"The CSS style property."})]}),(0,i.jsxs)(l.tr,{children:[(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.code,{children:"defaultValue"})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.code,{children:"string"})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.code,{children:"''"})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:"The default value for the property, defaults to an empty string."})]})]})]}),"\n",(0,i.jsx)(l.h4,{id:"returns-4",children:"Returns"}),"\n",(0,i.jsx)(l.p,{children:(0,i.jsx)(l.code,{children:"string"})}),"\n",(0,i.jsx)(l.p,{children:"The value of the property for the selected TextNodes."}),"\n",(0,i.jsx)(l.h4,{id:"defined-in-4",children:"Defined in"}),"\n",(0,i.jsx)(l.p,{children:(0,i.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-selection/src/range-selection.ts#L585",children:"packages/lexical-selection/src/range-selection.ts:585"})}),"\n",(0,i.jsx)(l.hr,{}),"\n",(0,i.jsx)(l.h3,{id:"isatnodeend",children:"$isAtNodeEnd"}),"\n",(0,i.jsxs)(l.p,{children:["\u25B8 ",(0,i.jsx)(l.strong,{children:"$isAtNodeEnd"}),"(",(0,i.jsx)(l.code,{children:"point"}),"): ",(0,i.jsx)(l.code,{children:"boolean"})]}),"\n",(0,i.jsx)(l.p,{children:"Determines if the current selection is at the end of the node."}),"\n",(0,i.jsx)(l.h4,{id:"parameters-5",children:"Parameters"}),"\n",(0,i.jsxs)(l.table,{children:[(0,i.jsx)(l.thead,{children:(0,i.jsxs)(l.tr,{children:[(0,i.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,i.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,i.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,i.jsx)(l.tbody,{children:(0,i.jsxs)(l.tr,{children:[(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.code,{children:"point"})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.Point",children:(0,i.jsx)(l.code,{children:"Point"})})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:"The point of the selection to test."})]})})]}),"\n",(0,i.jsx)(l.h4,{id:"returns-5",children:"Returns"}),"\n",(0,i.jsx)(l.p,{children:(0,i.jsx)(l.code,{children:"boolean"})}),"\n",(0,i.jsx)(l.p,{children:"true if the provided point offset is in the last possible position, false otherwise."}),"\n",(0,i.jsx)(l.h4,{id:"defined-in-5",children:"Defined in"}),"\n",(0,i.jsx)(l.p,{children:(0,i.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-selection/src/lexical-node.ts#L97",children:"packages/lexical-selection/src/lexical-node.ts:97"})}),"\n",(0,i.jsx)(l.hr,{}),"\n",(0,i.jsx)(l.h3,{id:"isparentelementrtl",children:"$isParentElementRTL"}),"\n",(0,i.jsxs)(l.p,{children:["\u25B8 ",(0,i.jsx)(l.strong,{children:"$isParentElementRTL"}),"(",(0,i.jsx)(l.code,{children:"selection"}),"): ",(0,i.jsx)(l.code,{children:"boolean"})]}),"\n",(0,i.jsx)(l.p,{children:"Tests a parent element for right to left direction."}),"\n",(0,i.jsx)(l.h4,{id:"parameters-6",children:"Parameters"}),"\n",(0,i.jsxs)(l.table,{children:[(0,i.jsx)(l.thead,{children:(0,i.jsxs)(l.tr,{children:[(0,i.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,i.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,i.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,i.jsx)(l.tbody,{children:(0,i.jsxs)(l.tr,{children:[(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.code,{children:"selection"})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.RangeSelection",children:(0,i.jsx)(l.code,{children:"RangeSelection"})})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:"The selection whose parent is to be tested."})]})})]}),"\n",(0,i.jsx)(l.h4,{id:"returns-6",children:"Returns"}),"\n",(0,i.jsx)(l.p,{children:(0,i.jsx)(l.code,{children:"boolean"})}),"\n",(0,i.jsx)(l.p,{children:"true if the selections' parent element has a direction of 'rtl' (right to left), false otherwise."}),"\n",(0,i.jsx)(l.h4,{id:"defined-in-6",children:"Defined in"}),"\n",(0,i.jsx)(l.p,{children:(0,i.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-selection/src/range-selection.ts#L506",children:"packages/lexical-selection/src/range-selection.ts:506"})}),"\n",(0,i.jsx)(l.hr,{}),"\n",(0,i.jsx)(l.h3,{id:"movecaretselection",children:"$moveCaretSelection"}),"\n",(0,i.jsxs)(l.p,{children:["\u25B8 ",(0,i.jsx)(l.strong,{children:"$moveCaretSelection"}),"(",(0,i.jsx)(l.code,{children:"selection"}),", ",(0,i.jsx)(l.code,{children:"isHoldingShift"}),", ",(0,i.jsx)(l.code,{children:"isBackward"}),", ",(0,i.jsx)(l.code,{children:"granularity"}),"): ",(0,i.jsx)(l.code,{children:"void"})]}),"\n",(0,i.jsx)(l.p,{children:"Moves the selection according to the arguments."}),"\n",(0,i.jsx)(l.h4,{id:"parameters-7",children:"Parameters"}),"\n",(0,i.jsxs)(l.table,{children:[(0,i.jsx)(l.thead,{children:(0,i.jsxs)(l.tr,{children:[(0,i.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,i.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,i.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,i.jsxs)(l.tbody,{children:[(0,i.jsxs)(l.tr,{children:[(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.code,{children:"selection"})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.RangeSelection",children:(0,i.jsx)(l.code,{children:"RangeSelection"})})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:"The selected text or nodes."})]}),(0,i.jsxs)(l.tr,{children:[(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.code,{children:"isHoldingShift"})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.code,{children:"boolean"})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:"Is the shift key being held down during the operation."})]}),(0,i.jsxs)(l.tr,{children:[(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.code,{children:"isBackward"})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.code,{children:"boolean"})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:"Is the selection selected backwards (the focus comes before the anchor)?"})]}),(0,i.jsxs)(l.tr,{children:[(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.code,{children:"granularity"})}),(0,i.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,i.jsx)(l.code,{children:'"character"'})," | ",(0,i.jsx)(l.code,{children:'"word"'})," | ",(0,i.jsx)(l.code,{children:'"lineboundary"'})]}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:"The distance to adjust the current selection."})]})]})]}),"\n",(0,i.jsx)(l.h4,{id:"returns-7",children:"Returns"}),"\n",(0,i.jsx)(l.p,{children:(0,i.jsx)(l.code,{children:"void"})}),"\n",(0,i.jsx)(l.h4,{id:"defined-in-7",children:"Defined in"}),"\n",(0,i.jsx)(l.p,{children:(0,i.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-selection/src/range-selection.ts#L492",children:"packages/lexical-selection/src/range-selection.ts:492"})}),"\n",(0,i.jsx)(l.hr,{}),"\n",(0,i.jsx)(l.h3,{id:"movecharacter",children:"$moveCharacter"}),"\n",(0,i.jsxs)(l.p,{children:["\u25B8 ",(0,i.jsx)(l.strong,{children:"$moveCharacter"}),"(",(0,i.jsx)(l.code,{children:"selection"}),", ",(0,i.jsx)(l.code,{children:"isHoldingShift"}),", ",(0,i.jsx)(l.code,{children:"isBackward"}),"): ",(0,i.jsx)(l.code,{children:"void"})]}),"\n",(0,i.jsx)(l.p,{children:"Moves selection by character according to arguments."}),"\n",(0,i.jsx)(l.h4,{id:"parameters-8",children:"Parameters"}),"\n",(0,i.jsxs)(l.table,{children:[(0,i.jsx)(l.thead,{children:(0,i.jsxs)(l.tr,{children:[(0,i.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,i.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,i.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,i.jsxs)(l.tbody,{children:[(0,i.jsxs)(l.tr,{children:[(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.code,{children:"selection"})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.RangeSelection",children:(0,i.jsx)(l.code,{children:"RangeSelection"})})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:"The selection of the characters to move."})]}),(0,i.jsxs)(l.tr,{children:[(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.code,{children:"isHoldingShift"})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.code,{children:"boolean"})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:"Is the shift key being held down during the operation."})]}),(0,i.jsxs)(l.tr,{children:[(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.code,{children:"isBackward"})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.code,{children:"boolean"})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:"Is the selection backward (the focus comes before the anchor)?"})]})]})]}),"\n",(0,i.jsx)(l.h4,{id:"returns-8",children:"Returns"}),"\n",(0,i.jsx)(l.p,{children:(0,i.jsx)(l.code,{children:"void"})}),"\n",(0,i.jsx)(l.h4,{id:"defined-in-8",children:"Defined in"}),"\n",(0,i.jsx)(l.p,{children:(0,i.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-selection/src/range-selection.ts#L521",children:"packages/lexical-selection/src/range-selection.ts:521"})}),"\n",(0,i.jsx)(l.hr,{}),"\n",(0,i.jsx)(l.h3,{id:"patchstyletext",children:"$patchStyleText"}),"\n",(0,i.jsxs)(l.p,{children:["\u25B8 ",(0,i.jsx)(l.strong,{children:"$patchStyleText"}),"(",(0,i.jsx)(l.code,{children:"selection"}),", ",(0,i.jsx)(l.code,{children:"patch"}),"): ",(0,i.jsx)(l.code,{children:"void"})]}),"\n",(0,i.jsx)(l.p,{children:"Applies the provided styles to the TextNodes in the provided Selection.\nWill update partially selected TextNodes by splitting the TextNode and applying\nthe styles to the appropriate one."}),"\n",(0,i.jsx)(l.h4,{id:"parameters-9",children:"Parameters"}),"\n",(0,i.jsxs)(l.table,{children:[(0,i.jsx)(l.thead,{children:(0,i.jsxs)(l.tr,{children:[(0,i.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,i.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,i.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,i.jsxs)(l.tbody,{children:[(0,i.jsxs)(l.tr,{children:[(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.code,{children:"selection"})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.BaseSelection",children:(0,i.jsx)(l.code,{children:"BaseSelection"})})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:"The selected node(s) to update."})]}),(0,i.jsxs)(l.tr,{children:[(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.code,{children:"patch"})}),(0,i.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,i.jsx)(l.code,{children:"Record"}),"<",(0,i.jsx)(l.code,{children:"string"}),", ",(0,i.jsx)(l.code,{children:"null"})," | ",(0,i.jsx)(l.code,{children:"string"})," | (",(0,i.jsx)(l.code,{children:"currentStyleValue"}),": ",(0,i.jsx)(l.code,{children:"null"})," | ",(0,i.jsx)(l.code,{children:"string"}),", ",(0,i.jsx)(l.code,{children:"target"}),": ",(0,i.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:(0,i.jsx)(l.code,{children:"ElementNode"})})," | ",(0,i.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.RangeSelection",children:(0,i.jsx)(l.code,{children:"RangeSelection"})})," | ",(0,i.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.TextNode",children:(0,i.jsx)(l.code,{children:"TextNode"})}),") => ",(0,i.jsx)(l.code,{children:"string"}),">"]}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:"The patch to apply, which can include multiple styles. {CSSProperty: value} . Can also accept a function that returns the new property value."})]})]})]}),"\n",(0,i.jsx)(l.h4,{id:"returns-9",children:"Returns"}),"\n",(0,i.jsx)(l.p,{children:(0,i.jsx)(l.code,{children:"void"})}),"\n",(0,i.jsx)(l.h4,{id:"defined-in-9",children:"Defined in"}),"\n",(0,i.jsx)(l.p,{children:(0,i.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-selection/src/lexical-node.ts#L305",children:"packages/lexical-selection/src/lexical-node.ts:305"})}),"\n",(0,i.jsx)(l.hr,{}),"\n",(0,i.jsx)(l.h3,{id:"setblockstype",children:"$setBlocksType"}),"\n",(0,i.jsxs)(l.p,{children:["\u25B8 ",(0,i.jsx)(l.strong,{children:"$setBlocksType"}),"<",(0,i.jsx)(l.code,{children:"T"}),">(",(0,i.jsx)(l.code,{children:"selection"}),", ",(0,i.jsx)(l.code,{children:"$createElement"}),", ",(0,i.jsx)(l.code,{children:"$afterCreateElement?"}),"): ",(0,i.jsx)(l.code,{children:"void"})]}),"\n",(0,i.jsx)(l.p,{children:"Converts all nodes in the selection that are of one block type to another."}),"\n",(0,i.jsx)(l.h4,{id:"type-parameters",children:"Type parameters"}),"\n",(0,i.jsxs)(l.table,{children:[(0,i.jsx)(l.thead,{children:(0,i.jsxs)(l.tr,{children:[(0,i.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,i.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,i.jsx)(l.tbody,{children:(0,i.jsxs)(l.tr,{children:[(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.code,{children:"T"})}),(0,i.jsxs)(l.td,{style:{textAlign:"left"},children:["extends ",(0,i.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:(0,i.jsx)(l.code,{children:"ElementNode"})})]})]})})]}),"\n",(0,i.jsx)(l.h4,{id:"parameters-10",children:"Parameters"}),"\n",(0,i.jsxs)(l.table,{children:[(0,i.jsx)(l.thead,{children:(0,i.jsxs)(l.tr,{children:[(0,i.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,i.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,i.jsx)(l.th,{style:{textAlign:"left"},children:"Default value"}),(0,i.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,i.jsxs)(l.tbody,{children:[(0,i.jsxs)(l.tr,{children:[(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.code,{children:"selection"})}),(0,i.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,i.jsx)(l.code,{children:"null"})," | ",(0,i.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.BaseSelection",children:(0,i.jsx)(l.code,{children:"BaseSelection"})})]}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.code,{children:"undefined"})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:"The selected blocks to be converted."})]}),(0,i.jsxs)(l.tr,{children:[(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.code,{children:"$createElement"})}),(0,i.jsxs)(l.td,{style:{textAlign:"left"},children:["() => ",(0,i.jsx)(l.code,{children:"T"})]}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.code,{children:"undefined"})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:"The function that creates the node. eg. $createParagraphNode."})]}),(0,i.jsxs)(l.tr,{children:[(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.code,{children:"$afterCreateElement"})}),(0,i.jsxs)(l.td,{style:{textAlign:"left"},children:["(",(0,i.jsx)(l.code,{children:"prevNodeSrc"}),": ",(0,i.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:(0,i.jsx)(l.code,{children:"ElementNode"})}),", ",(0,i.jsx)(l.code,{children:"newNodeDest"}),": ",(0,i.jsx)(l.code,{children:"T"}),") => ",(0,i.jsx)(l.code,{children:"void"})]}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.code,{children:"$copyBlockFormatIndent"})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:"The function that updates the new node based on the previous one ($copyBlockFormatIndent by default)"})]})]})]}),"\n",(0,i.jsx)(l.h4,{id:"returns-10",children:"Returns"}),"\n",(0,i.jsx)(l.p,{children:(0,i.jsx)(l.code,{children:"void"})}),"\n",(0,i.jsx)(l.h4,{id:"defined-in-10",children:"Defined in"}),"\n",(0,i.jsx)(l.p,{children:(0,i.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-selection/src/range-selection.ts#L64",children:"packages/lexical-selection/src/range-selection.ts:64"})}),"\n",(0,i.jsx)(l.hr,{}),"\n",(0,i.jsx)(l.h3,{id:"shouldoverridedefaultcharacterselection",children:"$shouldOverrideDefaultCharacterSelection"}),"\n",(0,i.jsxs)(l.p,{children:["\u25B8 ",(0,i.jsx)(l.strong,{children:"$shouldOverrideDefaultCharacterSelection"}),"(",(0,i.jsx)(l.code,{children:"selection"}),", ",(0,i.jsx)(l.code,{children:"isBackward"}),"): ",(0,i.jsx)(l.code,{children:"boolean"})]}),"\n",(0,i.jsx)(l.p,{children:"Determines if the default character selection should be overridden. Used with DecoratorNodes"}),"\n",(0,i.jsx)(l.h4,{id:"parameters-11",children:"Parameters"}),"\n",(0,i.jsxs)(l.table,{children:[(0,i.jsx)(l.thead,{children:(0,i.jsxs)(l.tr,{children:[(0,i.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,i.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,i.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,i.jsxs)(l.tbody,{children:[(0,i.jsxs)(l.tr,{children:[(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.code,{children:"selection"})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.RangeSelection",children:(0,i.jsx)(l.code,{children:"RangeSelection"})})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:"The selection whose default character selection may need to be overridden."})]}),(0,i.jsxs)(l.tr,{children:[(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.code,{children:"isBackward"})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.code,{children:"boolean"})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:"Is the selection backwards (the focus comes before the anchor)?"})]})]})]}),"\n",(0,i.jsx)(l.h4,{id:"returns-11",children:"Returns"}),"\n",(0,i.jsx)(l.p,{children:(0,i.jsx)(l.code,{children:"boolean"})}),"\n",(0,i.jsx)(l.p,{children:"true if it should be overridden, false if not."}),"\n",(0,i.jsx)(l.h4,{id:"defined-in-11",children:"Defined in"}),"\n",(0,i.jsx)(l.p,{children:(0,i.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-selection/src/range-selection.ts#L456",children:"packages/lexical-selection/src/range-selection.ts:456"})}),"\n",(0,i.jsx)(l.hr,{}),"\n",(0,i.jsx)(l.h3,{id:"sliceselectedtextnodecontent",children:"$sliceSelectedTextNodeContent"}),"\n",(0,i.jsxs)(l.p,{children:["\u25B8 ",(0,i.jsx)(l.strong,{children:"$sliceSelectedTextNodeContent"}),"(",(0,i.jsx)(l.code,{children:"selection"}),", ",(0,i.jsx)(l.code,{children:"textNode"}),"): ",(0,i.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,i.jsx)(l.code,{children:"LexicalNode"})})]}),"\n",(0,i.jsx)(l.p,{children:'Generally used to append text content to HTML and JSON. Grabs the text content and "slices"\nit to be generated into the new TextNode.'}),"\n",(0,i.jsx)(l.h4,{id:"parameters-12",children:"Parameters"}),"\n",(0,i.jsxs)(l.table,{children:[(0,i.jsx)(l.thead,{children:(0,i.jsxs)(l.tr,{children:[(0,i.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,i.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,i.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,i.jsxs)(l.tbody,{children:[(0,i.jsxs)(l.tr,{children:[(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.code,{children:"selection"})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.BaseSelection",children:(0,i.jsx)(l.code,{children:"BaseSelection"})})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:"The selection containing the node whose TextNode is to be edited."})]}),(0,i.jsxs)(l.tr,{children:[(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.code,{children:"textNode"})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.TextNode",children:(0,i.jsx)(l.code,{children:"TextNode"})})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:"The TextNode to be edited."})]})]})]}),"\n",(0,i.jsx)(l.h4,{id:"returns-12",children:"Returns"}),"\n",(0,i.jsx)(l.p,{children:(0,i.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,i.jsx)(l.code,{children:"LexicalNode"})})}),"\n",(0,i.jsx)(l.p,{children:"The updated TextNode."}),"\n",(0,i.jsx)(l.h4,{id:"defined-in-12",children:"Defined in"}),"\n",(0,i.jsx)(l.p,{children:(0,i.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-selection/src/lexical-node.ts#L45",children:"packages/lexical-selection/src/lexical-node.ts:45"})}),"\n",(0,i.jsx)(l.hr,{}),"\n",(0,i.jsx)(l.h3,{id:"trimtextcontentfromanchor",children:"$trimTextContentFromAnchor"}),"\n",(0,i.jsxs)(l.p,{children:["\u25B8 ",(0,i.jsx)(l.strong,{children:"$trimTextContentFromAnchor"}),"(",(0,i.jsx)(l.code,{children:"editor"}),", ",(0,i.jsx)(l.code,{children:"anchor"}),", ",(0,i.jsx)(l.code,{children:"delCount"}),"): ",(0,i.jsx)(l.code,{children:"void"})]}),"\n",(0,i.jsx)(l.p,{children:"Trims text from a node in order to shorten it, eg. to enforce a text's max length. If it deletes text\nthat is an ancestor of the anchor then it will leave 2 indents, otherwise, if no text content exists, it deletes\nthe TextNode. It will move the focus to either the end of any left over text or beginning of a new TextNode."}),"\n",(0,i.jsx)(l.h4,{id:"parameters-13",children:"Parameters"}),"\n",(0,i.jsxs)(l.table,{children:[(0,i.jsx)(l.thead,{children:(0,i.jsxs)(l.tr,{children:[(0,i.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,i.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,i.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,i.jsxs)(l.tbody,{children:[(0,i.jsxs)(l.tr,{children:[(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.code,{children:"editor"})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalEditor",children:(0,i.jsx)(l.code,{children:"LexicalEditor"})})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:"The lexical editor."})]}),(0,i.jsxs)(l.tr,{children:[(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.code,{children:"anchor"})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.Point",children:(0,i.jsx)(l.code,{children:"Point"})})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:"The anchor of the current selection, where the selection should be pointing."})]}),(0,i.jsxs)(l.tr,{children:[(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.code,{children:"delCount"})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.code,{children:"number"})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:"The amount of characters to delete. Useful as a dynamic variable eg. textContentSize - maxLength;"})]})]})]}),"\n",(0,i.jsx)(l.h4,{id:"returns-13",children:"Returns"}),"\n",(0,i.jsx)(l.p,{children:(0,i.jsx)(l.code,{children:"void"})}),"\n",(0,i.jsx)(l.h4,{id:"defined-in-13",children:"Defined in"}),"\n",(0,i.jsx)(l.p,{children:(0,i.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-selection/src/lexical-node.ts#L118",children:"packages/lexical-selection/src/lexical-node.ts:118"})}),"\n",(0,i.jsx)(l.hr,{}),"\n",(0,i.jsx)(l.h3,{id:"wrapnodes",children:"$wrapNodes"}),"\n",(0,i.jsxs)(l.p,{children:["\u25B8 ",(0,i.jsx)(l.strong,{children:"$wrapNodes"}),"(",(0,i.jsx)(l.code,{children:"selection"}),", ",(0,i.jsx)(l.code,{children:"createElement"}),", ",(0,i.jsx)(l.code,{children:"wrappingElement?"}),"): ",(0,i.jsx)(l.code,{children:"void"})]}),"\n",(0,i.jsx)(l.h4,{id:"parameters-14",children:"Parameters"}),"\n",(0,i.jsxs)(l.table,{children:[(0,i.jsx)(l.thead,{children:(0,i.jsxs)(l.tr,{children:[(0,i.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,i.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,i.jsx)(l.th,{style:{textAlign:"left"},children:"Default value"}),(0,i.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,i.jsxs)(l.tbody,{children:[(0,i.jsxs)(l.tr,{children:[(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.code,{children:"selection"})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.BaseSelection",children:(0,i.jsx)(l.code,{children:"BaseSelection"})})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.code,{children:"undefined"})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:"The selection of nodes to be wrapped."})]}),(0,i.jsxs)(l.tr,{children:[(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.code,{children:"createElement"})}),(0,i.jsxs)(l.td,{style:{textAlign:"left"},children:["() => ",(0,i.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:(0,i.jsx)(l.code,{children:"ElementNode"})})]}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.code,{children:"undefined"})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:"A function that creates the wrapping ElementNode. eg. $createParagraphNode."})]}),(0,i.jsxs)(l.tr,{children:[(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.code,{children:"wrappingElement"})}),(0,i.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,i.jsx)(l.code,{children:"null"})," | ",(0,i.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:(0,i.jsx)(l.code,{children:"ElementNode"})})]}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.code,{children:"null"})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:"An element to append the wrapped selection and its children to."})]})]})]}),"\n",(0,i.jsx)(l.h4,{id:"returns-14",children:"Returns"}),"\n",(0,i.jsx)(l.p,{children:(0,i.jsx)(l.code,{children:"void"})}),"\n",(0,i.jsx)(l.p,{children:(0,i.jsx)(l.strong,{children:(0,i.jsx)(l.code,{children:"Deprecated"})})}),"\n",(0,i.jsx)(l.p,{children:"In favor of $setBlockTypes\nWraps all nodes in the selection into another node of the type returned by createElement."}),"\n",(0,i.jsx)(l.h4,{id:"defined-in-14",children:"Defined in"}),"\n",(0,i.jsx)(l.p,{children:(0,i.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-selection/src/range-selection.ts#L156",children:"packages/lexical-selection/src/range-selection.ts:156"})}),"\n",(0,i.jsx)(l.hr,{}),"\n",(0,i.jsx)(l.h3,{id:"createdomrange",children:"createDOMRange"}),"\n",(0,i.jsxs)(l.p,{children:["\u25B8 ",(0,i.jsx)(l.strong,{children:"createDOMRange"}),"(",(0,i.jsx)(l.code,{children:"editor"}),", ",(0,i.jsx)(l.code,{children:"anchorNode"}),", ",(0,i.jsx)(l.code,{children:"_anchorOffset"}),", ",(0,i.jsx)(l.code,{children:"focusNode"}),", ",(0,i.jsx)(l.code,{children:"_focusOffset"}),"): ",(0,i.jsx)(l.code,{children:"Range"})," | ",(0,i.jsx)(l.code,{children:"null"})]}),"\n",(0,i.jsx)(l.p,{children:"Creates a selection range for the DOM."}),"\n",(0,i.jsx)(l.h4,{id:"parameters-15",children:"Parameters"}),"\n",(0,i.jsxs)(l.table,{children:[(0,i.jsx)(l.thead,{children:(0,i.jsxs)(l.tr,{children:[(0,i.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,i.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,i.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,i.jsxs)(l.tbody,{children:[(0,i.jsxs)(l.tr,{children:[(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.code,{children:"editor"})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalEditor",children:(0,i.jsx)(l.code,{children:"LexicalEditor"})})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:"The lexical editor."})]}),(0,i.jsxs)(l.tr,{children:[(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.code,{children:"anchorNode"})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,i.jsx)(l.code,{children:"LexicalNode"})})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:"The anchor node of a selection."})]}),(0,i.jsxs)(l.tr,{children:[(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.code,{children:"_anchorOffset"})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.code,{children:"number"})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:"The amount of space offset from the anchor to the focus."})]}),(0,i.jsxs)(l.tr,{children:[(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.code,{children:"focusNode"})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,i.jsx)(l.code,{children:"LexicalNode"})})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:"The current focus."})]}),(0,i.jsxs)(l.tr,{children:[(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.code,{children:"_focusOffset"})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.code,{children:"number"})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:"The amount of space offset from the focus to the anchor."})]})]})]}),"\n",(0,i.jsx)(l.h4,{id:"returns-15",children:"Returns"}),"\n",(0,i.jsxs)(l.p,{children:[(0,i.jsx)(l.code,{children:"Range"})," | ",(0,i.jsx)(l.code,{children:"null"})]}),"\n",(0,i.jsx)(l.p,{children:"The range of selection for the DOM that was created."}),"\n",(0,i.jsx)(l.h4,{id:"defined-in-15",children:"Defined in"}),"\n",(0,i.jsx)(l.p,{children:(0,i.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-selection/src/utils.ts#L47",children:"packages/lexical-selection/src/utils.ts:47"})}),"\n",(0,i.jsx)(l.hr,{}),"\n",(0,i.jsx)(l.h3,{id:"createrectsfromdomrange",children:"createRectsFromDOMRange"}),"\n",(0,i.jsxs)(l.p,{children:["\u25B8 ",(0,i.jsx)(l.strong,{children:"createRectsFromDOMRange"}),"(",(0,i.jsx)(l.code,{children:"editor"}),", ",(0,i.jsx)(l.code,{children:"range"}),"): ",(0,i.jsx)(l.code,{children:"ClientRect"}),"[]"]}),"\n",(0,i.jsx)(l.p,{children:"Creates DOMRects, generally used to help the editor find a specific location on the screen."}),"\n",(0,i.jsx)(l.h4,{id:"parameters-16",children:"Parameters"}),"\n",(0,i.jsxs)(l.table,{children:[(0,i.jsx)(l.thead,{children:(0,i.jsxs)(l.tr,{children:[(0,i.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,i.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,i.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,i.jsxs)(l.tbody,{children:[(0,i.jsxs)(l.tr,{children:[(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.code,{children:"editor"})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalEditor",children:(0,i.jsx)(l.code,{children:"LexicalEditor"})})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:"The lexical editor"})]}),(0,i.jsxs)(l.tr,{children:[(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.code,{children:"range"})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.code,{children:"Range"})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:"A fragment of a document that can contain nodes and parts of text nodes."})]})]})]}),"\n",(0,i.jsx)(l.h4,{id:"returns-16",children:"Returns"}),"\n",(0,i.jsxs)(l.p,{children:[(0,i.jsx)(l.code,{children:"ClientRect"}),"[]"]}),"\n",(0,i.jsx)(l.p,{children:"The selectionRects as an array."}),"\n",(0,i.jsx)(l.h4,{id:"defined-in-16",children:"Defined in"}),"\n",(0,i.jsx)(l.p,{children:(0,i.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-selection/src/utils.ts#L124",children:"packages/lexical-selection/src/utils.ts:124"})}),"\n",(0,i.jsx)(l.hr,{}),"\n",(0,i.jsx)(l.h3,{id:"getcssfromstyleobject",children:"getCSSFromStyleObject"}),"\n",(0,i.jsxs)(l.p,{children:["\u25B8 ",(0,i.jsx)(l.strong,{children:"getCSSFromStyleObject"}),"(",(0,i.jsx)(l.code,{children:"styles"}),"): ",(0,i.jsx)(l.code,{children:"string"})]}),"\n",(0,i.jsx)(l.p,{children:"Gets the CSS styles from the style object."}),"\n",(0,i.jsx)(l.h4,{id:"parameters-17",children:"Parameters"}),"\n",(0,i.jsxs)(l.table,{children:[(0,i.jsx)(l.thead,{children:(0,i.jsxs)(l.tr,{children:[(0,i.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,i.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,i.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,i.jsx)(l.tbody,{children:(0,i.jsxs)(l.tr,{children:[(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.code,{children:"styles"})}),(0,i.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,i.jsx)(l.code,{children:"Record"}),"<",(0,i.jsx)(l.code,{children:"string"}),", ",(0,i.jsx)(l.code,{children:"string"}),">"]}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:"The style object containing the styles to get."})]})})]}),"\n",(0,i.jsx)(l.h4,{id:"returns-17",children:"Returns"}),"\n",(0,i.jsx)(l.p,{children:(0,i.jsx)(l.code,{children:"string"})}),"\n",(0,i.jsx)(l.p,{children:"A string containing the CSS styles and their values."}),"\n",(0,i.jsx)(l.h4,{id:"defined-in-17",children:"Defined in"}),"\n",(0,i.jsx)(l.p,{children:(0,i.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-selection/src/utils.ts#L221",children:"packages/lexical-selection/src/utils.ts:221"})}),"\n",(0,i.jsx)(l.hr,{}),"\n",(0,i.jsx)(l.h3,{id:"getstyleobjectfromcss",children:"getStyleObjectFromCSS"}),"\n",(0,i.jsxs)(l.p,{children:["\u25B8 ",(0,i.jsx)(l.strong,{children:"getStyleObjectFromCSS"}),"(",(0,i.jsx)(l.code,{children:"css"}),"): ",(0,i.jsx)(l.code,{children:"Record"}),"<",(0,i.jsx)(l.code,{children:"string"}),", ",(0,i.jsx)(l.code,{children:"string"}),">"]}),"\n",(0,i.jsx)(l.p,{children:"Given a CSS string, returns an object from the style cache."}),"\n",(0,i.jsx)(l.h4,{id:"parameters-18",children:"Parameters"}),"\n",(0,i.jsxs)(l.table,{children:[(0,i.jsx)(l.thead,{children:(0,i.jsxs)(l.tr,{children:[(0,i.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,i.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,i.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,i.jsx)(l.tbody,{children:(0,i.jsxs)(l.tr,{children:[(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.code,{children:"css"})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.code,{children:"string"})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:"The CSS property as a string."})]})})]}),"\n",(0,i.jsx)(l.h4,{id:"returns-18",children:"Returns"}),"\n",(0,i.jsxs)(l.p,{children:[(0,i.jsx)(l.code,{children:"Record"}),"<",(0,i.jsx)(l.code,{children:"string"}),", ",(0,i.jsx)(l.code,{children:"string"}),">"]}),"\n",(0,i.jsx)(l.p,{children:"The value of the given CSS property."}),"\n",(0,i.jsx)(l.h4,{id:"defined-in-18",children:"Defined in"}),"\n",(0,i.jsx)(l.p,{children:(0,i.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-selection/src/utils.ts#L201",children:"packages/lexical-selection/src/utils.ts:201"})}),"\n",(0,i.jsx)(l.hr,{}),"\n",(0,i.jsx)(l.h3,{id:"trimtextcontentfromanchor-1",children:"trimTextContentFromAnchor"}),"\n",(0,i.jsxs)(l.p,{children:["\u25B8 ",(0,i.jsx)(l.strong,{children:"trimTextContentFromAnchor"}),"(",(0,i.jsx)(l.code,{children:"editor"}),", ",(0,i.jsx)(l.code,{children:"anchor"}),", ",(0,i.jsx)(l.code,{children:"delCount"}),"): ",(0,i.jsx)(l.code,{children:"void"})]}),"\n",(0,i.jsx)(l.h4,{id:"parameters-19",children:"Parameters"}),"\n",(0,i.jsxs)(l.table,{children:[(0,i.jsx)(l.thead,{children:(0,i.jsxs)(l.tr,{children:[(0,i.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,i.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,i.jsxs)(l.tbody,{children:[(0,i.jsxs)(l.tr,{children:[(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.code,{children:"editor"})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalEditor",children:(0,i.jsx)(l.code,{children:"LexicalEditor"})})})]}),(0,i.jsxs)(l.tr,{children:[(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.code,{children:"anchor"})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.Point",children:(0,i.jsx)(l.code,{children:"Point"})})})]}),(0,i.jsxs)(l.tr,{children:[(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.code,{children:"delCount"})}),(0,i.jsx)(l.td,{style:{textAlign:"left"},children:(0,i.jsx)(l.code,{children:"number"})})]})]})]}),"\n",(0,i.jsx)(l.h4,{id:"returns-19",children:"Returns"}),"\n",(0,i.jsx)(l.p,{children:(0,i.jsx)(l.code,{children:"void"})}),"\n",(0,i.jsx)(l.p,{children:(0,i.jsx)(l.strong,{children:(0,i.jsx)(l.code,{children:"Deprecated"})})}),"\n",(0,i.jsxs)(l.p,{children:["renamed to ",(0,i.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical_selection#trimtextcontentfromanchor",children:"$trimTextContentFromAnchor"})," by @lexical/eslint-plugin rules-of-lexical"]}),"\n",(0,i.jsx)(l.h4,{id:"defined-in-19",children:"Defined in"}),"\n",(0,i.jsx)(l.p,{children:(0,i.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-selection/src/index.ts#L37",children:"packages/lexical-selection/src/index.ts:37"})})]})}function a(e={}){let{wrapper:l}={...(0,s.a)(),...e.components};return l?(0,i.jsx)(l,{...e,children:(0,i.jsx)(x,{...e})}):x(e)}},22840:function(e,l,t){t.d(l,{Z:()=>c,a:()=>d});var n=t(2784);let i={},s=n.createContext(i);function d(e){let l=n.useContext(s);return n.useMemo(function(){return"function"==typeof e?e(l):{...l,...e}},[l,e])}function c(e){let l;return l=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),n.createElement(s.Provider,{value:l},e.children)}}}]);