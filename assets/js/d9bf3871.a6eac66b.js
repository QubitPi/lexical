"use strict";(self.webpackChunk_lexical_website=self.webpackChunk_lexical_website||[]).push([["2266"],{23949:function(e,l,i){i.r(l),i.d(l,{frontMatter:()=>r,default:()=>x,contentTitle:()=>t,assets:()=>c,toc:()=>a,metadata:()=>s});var s=JSON.parse('{"id":"api/classes/lexical_table.TableNode","title":"Class: TableNode","description":"@lexical/table.TableNode","source":"@site/docs/api/classes/lexical_table.TableNode.md","sourceDirName":"api/classes","slug":"/api/classes/lexical_table.TableNode","permalink":"/lexical/docs/api/classes/lexical_table.TableNode","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","frontMatter":{"id":"lexical_table.TableNode","title":"Class: TableNode","custom_edit_url":null},"sidebar":"api","previous":{"title":"TableCellNode","permalink":"/lexical/docs/api/classes/lexical_table.TableCellNode"},"next":{"title":"TableObserver","permalink":"/lexical/docs/api/classes/lexical_table.TableObserver"}}'),n=i(52322),d=i(22840);let r={id:"lexical_table.TableNode",title:"Class: TableNode",custom_edit_url:null},t=void 0,c={},a=[{value:"Hierarchy",id:"hierarchy",level:2},{value:"Constructors",id:"constructors",level:2},{value:"constructor",id:"constructor",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Overrides",id:"overrides",level:4},{value:"Defined in",id:"defined-in",level:4},{value:"Properties",id:"properties",level:2},{value:"__colWidths",id:"__colwidths",level:3},{value:"Defined in",id:"defined-in-1",level:4},{value:"__frozenColumnCount",id:"__frozencolumncount",level:3},{value:"Defined in",id:"defined-in-2",level:4},{value:"__frozenRowCount",id:"__frozenrowcount",level:3},{value:"Defined in",id:"defined-in-3",level:4},{value:"Methods",id:"methods",level:2},{value:"afterCloneFrom",id:"afterclonefrom",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Overrides",id:"overrides-1",level:4},{value:"Defined in",id:"defined-in-4",level:4},{value:"canBeEmpty",id:"canbeempty",level:3},{value:"Returns",id:"returns-2",level:4},{value:"Overrides",id:"overrides-2",level:4},{value:"Defined in",id:"defined-in-5",level:4},{value:"canIndent",id:"canindent",level:3},{value:"Returns",id:"returns-3",level:4},{value:"Overrides",id:"overrides-3",level:4},{value:"Defined in",id:"defined-in-6",level:4},{value:"canSelectBefore",id:"canselectbefore",level:3},{value:"Returns",id:"returns-4",level:4},{value:"Defined in",id:"defined-in-7",level:4},{value:"createDOM",id:"createdom",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-5",level:4},{value:"Overrides",id:"overrides-4",level:4},{value:"Defined in",id:"defined-in-8",level:4},{value:"exportDOM",id:"exportdom",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-6",level:4},{value:"Overrides",id:"overrides-5",level:4},{value:"Defined in",id:"defined-in-9",level:4},{value:"exportJSON",id:"exportjson",level:3},{value:"Returns",id:"returns-7",level:4},{value:"Overrides",id:"overrides-6",level:4},{value:"Defined in",id:"defined-in-10",level:4},{value:"extractWithChild",id:"extractwithchild",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-8",level:4},{value:"Overrides",id:"overrides-7",level:4},{value:"Defined in",id:"defined-in-11",level:4},{value:"getCellNodeFromCords",id:"getcellnodefromcords",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-9",level:4},{value:"Defined in",id:"defined-in-12",level:4},{value:"getCellNodeFromCordsOrThrow",id:"getcellnodefromcordsorthrow",level:3},{value:"Parameters",id:"parameters-6",level:4},{value:"Returns",id:"returns-10",level:4},{value:"Defined in",id:"defined-in-13",level:4},{value:"getColWidths",id:"getcolwidths",level:3},{value:"Returns",id:"returns-11",level:4},{value:"Defined in",id:"defined-in-14",level:4},{value:"getColumnCount",id:"getcolumncount",level:3},{value:"Returns",id:"returns-12",level:4},{value:"Defined in",id:"defined-in-15",level:4},{value:"getCordsFromCellNode",id:"getcordsfromcellnode",level:3},{value:"Parameters",id:"parameters-7",level:4},{value:"Returns",id:"returns-13",level:4},{value:"Defined in",id:"defined-in-16",level:4},{value:"getDOMCellFromCords",id:"getdomcellfromcords",level:3},{value:"Parameters",id:"parameters-8",level:4},{value:"Returns",id:"returns-14",level:4},{value:"Defined in",id:"defined-in-17",level:4},{value:"getDOMCellFromCordsOrThrow",id:"getdomcellfromcordsorthrow",level:3},{value:"Parameters",id:"parameters-9",level:4},{value:"Returns",id:"returns-15",level:4},{value:"Defined in",id:"defined-in-18",level:4},{value:"getDOMSlot",id:"getdomslot",level:3},{value:"Parameters",id:"parameters-10",level:4},{value:"Returns",id:"returns-16",level:4},{value:"Overrides",id:"overrides-8",level:4},{value:"Defined in",id:"defined-in-19",level:4},{value:"getFrozenColumns",id:"getfrozencolumns",level:3},{value:"Returns",id:"returns-17",level:4},{value:"Defined in",id:"defined-in-20",level:4},{value:"getFrozenRows",id:"getfrozenrows",level:3},{value:"Returns",id:"returns-18",level:4},{value:"Defined in",id:"defined-in-21",level:4},{value:"getRowStriping",id:"getrowstriping",level:3},{value:"Returns",id:"returns-19",level:4},{value:"Defined in",id:"defined-in-22",level:4},{value:"isShadowRoot",id:"isshadowroot",level:3},{value:"Returns",id:"returns-20",level:4},{value:"Overrides",id:"overrides-9",level:4},{value:"Defined in",id:"defined-in-23",level:4},{value:"setColWidths",id:"setcolwidths",level:3},{value:"Parameters",id:"parameters-11",level:4},{value:"Returns",id:"returns-21",level:4},{value:"Defined in",id:"defined-in-24",level:4},{value:"setFrozenColumns",id:"setfrozencolumns",level:3},{value:"Parameters",id:"parameters-12",level:4},{value:"Returns",id:"returns-22",level:4},{value:"Defined in",id:"defined-in-25",level:4},{value:"setFrozenRows",id:"setfrozenrows",level:3},{value:"Parameters",id:"parameters-13",level:4},{value:"Returns",id:"returns-23",level:4},{value:"Defined in",id:"defined-in-26",level:4},{value:"setRowStriping",id:"setrowstriping",level:3},{value:"Parameters",id:"parameters-14",level:4},{value:"Returns",id:"returns-24",level:4},{value:"Defined in",id:"defined-in-27",level:4},{value:"updateDOM",id:"updatedom",level:3},{value:"Parameters",id:"parameters-15",level:4},{value:"Returns",id:"returns-25",level:4},{value:"Overrides",id:"overrides-10",level:4},{value:"Defined in",id:"defined-in-28",level:4},{value:"updateFromJSON",id:"updatefromjson",level:3},{value:"Parameters",id:"parameters-16",level:4},{value:"Returns",id:"returns-26",level:4},{value:"Overrides",id:"overrides-11",level:4},{value:"Defined in",id:"defined-in-29",level:4},{value:"updateTableElement",id:"updatetableelement",level:3},{value:"Parameters",id:"parameters-17",level:4},{value:"Returns",id:"returns-27",level:4},{value:"Defined in",id:"defined-in-30",level:4},{value:"updateTableWrapper",id:"updatetablewrapper",level:3},{value:"Parameters",id:"parameters-18",level:4},{value:"Returns",id:"returns-28",level:4},{value:"Defined in",id:"defined-in-31",level:4},{value:"clone",id:"clone",level:3},{value:"Parameters",id:"parameters-19",level:4},{value:"Returns",id:"returns-29",level:4},{value:"Overrides",id:"overrides-12",level:4},{value:"Defined in",id:"defined-in-32",level:4},{value:"getType",id:"gettype",level:3},{value:"Returns",id:"returns-30",level:4},{value:"Overrides",id:"overrides-13",level:4},{value:"Defined in",id:"defined-in-33",level:4},{value:"importDOM",id:"importdom",level:3},{value:"Returns",id:"returns-31",level:4},{value:"Overrides",id:"overrides-14",level:4},{value:"Defined in",id:"defined-in-34",level:4},{value:"importJSON",id:"importjson",level:3},{value:"Parameters",id:"parameters-20",level:4},{value:"Returns",id:"returns-32",level:4},{value:"Overrides",id:"overrides-15",level:4},{value:"Defined in",id:"defined-in-35",level:4}];function h(e){let l={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,d.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical_table",children:"@lexical/table"}),".TableNode"]}),"\n",(0,n.jsx)(l.h2,{id:"hierarchy",children:"Hierarchy"}),"\n",(0,n.jsxs)(l.ul,{children:["\n",(0,n.jsxs)(l.li,{children:["\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:(0,n.jsx)(l.code,{children:"ElementNode"})})}),"\n",(0,n.jsxs)(l.p,{children:["\u21B3 ",(0,n.jsx)(l.strong,{children:(0,n.jsx)(l.code,{children:"TableNode"})})]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(l.h2,{id:"constructors",children:"Constructors"}),"\n",(0,n.jsx)(l.h3,{id:"constructor",children:"constructor"}),"\n",(0,n.jsxs)(l.p,{children:["\u2022 ",(0,n.jsx)(l.strong,{children:"new TableNode"}),"(",(0,n.jsx)(l.code,{children:"key?"}),"): ",(0,n.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical_table.TableNode",children:(0,n.jsx)(l.code,{children:"TableNode"})})]}),"\n",(0,n.jsx)(l.h4,{id:"parameters",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(l.tbody,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"key?"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"string"})})]})})]}),"\n",(0,n.jsx)(l.h4,{id:"returns",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical_table.TableNode",children:(0,n.jsx)(l.code,{children:"TableNode"})})}),"\n",(0,n.jsx)(l.h4,{id:"overrides",children:"Overrides"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,n.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode#constructor",children:"constructor"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-table/src/LexicalTableNode.ts#L232",children:"packages/lexical-table/src/LexicalTableNode.ts:232"})}),"\n",(0,n.jsx)(l.h2,{id:"properties",children:"Properties"}),"\n",(0,n.jsx)(l.h3,{id:"__colwidths",children:"__colWidths"}),"\n",(0,n.jsxs)(l.p,{children:["\u2022 ",(0,n.jsx)(l.code,{children:"Optional"})," ",(0,n.jsx)(l.strong,{children:"__colWidths"}),": readonly ",(0,n.jsx)(l.code,{children:"number"}),"[]"]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-1",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-table/src/LexicalTableNode.ts#L179",children:"packages/lexical-table/src/LexicalTableNode.ts:179"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"__frozencolumncount",children:"__frozenColumnCount"}),"\n",(0,n.jsxs)(l.p,{children:["\u2022 ",(0,n.jsx)(l.strong,{children:"__frozenColumnCount"}),": ",(0,n.jsx)(l.code,{children:"number"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-2",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-table/src/LexicalTableNode.ts#L177",children:"packages/lexical-table/src/LexicalTableNode.ts:177"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"__frozenrowcount",children:"__frozenRowCount"}),"\n",(0,n.jsxs)(l.p,{children:["\u2022 ",(0,n.jsx)(l.strong,{children:"__frozenRowCount"}),": ",(0,n.jsx)(l.code,{children:"number"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-3",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-table/src/LexicalTableNode.ts#L178",children:"packages/lexical-table/src/LexicalTableNode.ts:178"})}),"\n",(0,n.jsx)(l.h2,{id:"methods",children:"Methods"}),"\n",(0,n.jsx)(l.h3,{id:"afterclonefrom",children:"afterCloneFrom"}),"\n",(0,n.jsxs)(l.p,{children:["\u25B8 ",(0,n.jsx)(l.strong,{children:"afterCloneFrom"}),"(",(0,n.jsx)(l.code,{children:"prevNode"}),"): ",(0,n.jsx)(l.code,{children:"void"})]}),"\n",(0,n.jsxs)(l.p,{children:["Perform any state updates on the clone of prevNode that are not already\nhandled by the constructor call in the static clone method. If you have\nstate to update in your clone that is not handled directly by the\nconstructor, it is advisable to override this method but it is required\nto include a call to ",(0,n.jsx)(l.code,{children:"super.afterCloneFrom(prevNode)"})," in your\nimplementation. This is only intended to be called by\n",(0,n.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#clonewithproperties",children:"$cloneWithProperties"})," function or via a super call."]}),"\n",(0,n.jsx)(l.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(l.tbody,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"prevNode"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"this"})})]})})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-1",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"void"})}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.strong,{children:(0,n.jsx)(l.code,{children:"Example"})})}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-ts",children:"class ClassesTextNode extends TextNode {\n  // Not shown: static getType, static importJSON, exportJSON, createDOM, updateDOM\n  __classes = new Set<string>();\n  static clone(node: ClassesTextNode): ClassesTextNode {\n    // The inherited TextNode constructor is used here, so\n    // classes is not set by this method.\n    return new ClassesTextNode(node.__text, node.__key);\n  }\n  afterCloneFrom(node: this): void {\n    // This calls TextNode.afterCloneFrom and LexicalNode.afterCloneFrom\n    // for necessary state updates\n    super.afterCloneFrom(node);\n    this.__addClasses(node.__classes);\n  }\n  // This method is a private implementation detail, it is not\n  // suitable for the public API because it does not call getWritable\n  __addClasses(classNames: Iterable<string>): this {\n    for (const className of classNames) {\n      this.__classes.add(className);\n    }\n    return this;\n  }\n  addClass(...classNames: string[]): this {\n    return this.getWritable().__addClasses(classNames);\n  }\n  removeClass(...classNames: string[]): this {\n    const node = this.getWritable();\n    for (const className of classNames) {\n      this.__classes.delete(className);\n    }\n    return this;\n  }\n  getClasses(): Set<string> {\n    return this.getLatest().__classes;\n  }\n}\n"})}),"\n",(0,n.jsx)(l.h4,{id:"overrides-1",children:"Overrides"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,n.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode#afterclonefrom",children:"afterCloneFrom"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-4",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-table/src/LexicalTableNode.ts#L202",children:"packages/lexical-table/src/LexicalTableNode.ts:202"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"canbeempty",children:"canBeEmpty"}),"\n",(0,n.jsxs)(l.p,{children:["\u25B8 ",(0,n.jsx)(l.strong,{children:"canBeEmpty"}),"(): ",(0,n.jsx)(l.code,{children:"false"})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-2",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"false"})}),"\n",(0,n.jsx)(l.h4,{id:"overrides-2",children:"Overrides"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,n.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode#canbeempty",children:"canBeEmpty"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-5",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-table/src/LexicalTableNode.ts#L434",children:"packages/lexical-table/src/LexicalTableNode.ts:434"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"canindent",children:"canIndent"}),"\n",(0,n.jsxs)(l.p,{children:["\u25B8 ",(0,n.jsx)(l.strong,{children:"canIndent"}),"(): ",(0,n.jsx)(l.code,{children:"false"})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-3",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"false"})}),"\n",(0,n.jsx)(l.h4,{id:"overrides-3",children:"Overrides"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,n.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode#canindent",children:"canIndent"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-6",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-table/src/LexicalTableNode.ts#L577",children:"packages/lexical-table/src/LexicalTableNode.ts:577"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"canselectbefore",children:"canSelectBefore"}),"\n",(0,n.jsxs)(l.p,{children:["\u25B8 ",(0,n.jsx)(l.strong,{children:"canSelectBefore"}),"(): ",(0,n.jsx)(l.code,{children:"true"})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-4",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"true"})}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-7",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-table/src/LexicalTableNode.ts#L573",children:"packages/lexical-table/src/LexicalTableNode.ts:573"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"createdom",children:"createDOM"}),"\n",(0,n.jsxs)(l.p,{children:["\u25B8 ",(0,n.jsx)(l.strong,{children:"createDOM"}),"(",(0,n.jsx)(l.code,{children:"config"}),", ",(0,n.jsx)(l.code,{children:"editor?"}),"): ",(0,n.jsx)(l.code,{children:"HTMLElement"})]}),"\n",(0,n.jsx)(l.p,{children:"Called during the reconciliation process to determine which nodes\nto insert into the DOM for this Lexical Node."}),"\n",(0,n.jsx)(l.p,{children:"This method must return exactly one HTMLElement. Nested elements are not supported."}),"\n",(0,n.jsx)(l.p,{children:"Do not attempt to update the Lexical EditorState during this phase of the update lifecycle."}),"\n",(0,n.jsx)(l.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,n.jsxs)(l.tbody,{children:[(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"config"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorconfig",children:(0,n.jsx)(l.code,{children:"EditorConfig"})})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:"allows access to things like the EditorTheme (to apply classes) during reconciliation."})]}),(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"editor?"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalEditor",children:(0,n.jsx)(l.code,{children:"LexicalEditor"})})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:"allows access to the editor for context during reconciliation."})]})]})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-5",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"HTMLElement"})}),"\n",(0,n.jsx)(l.h4,{id:"overrides-4",children:"Overrides"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,n.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode#createdom",children:"createDOM"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-8",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-table/src/LexicalTableNode.ts#L273",children:"packages/lexical-table/src/LexicalTableNode.ts:273"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"exportdom",children:"exportDOM"}),"\n",(0,n.jsxs)(l.p,{children:["\u25B8 ",(0,n.jsx)(l.strong,{children:"exportDOM"}),"(",(0,n.jsx)(l.code,{children:"editor"}),"): ",(0,n.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#domexportoutput",children:(0,n.jsx)(l.code,{children:"DOMExportOutput"})})]}),"\n",(0,n.jsxs)(l.p,{children:["Controls how the this node is serialized to HTML. This is important for\ncopy and paste between Lexical and non-Lexical editors, or Lexical editors with different namespaces,\nin which case the primary transfer format is HTML. It's also important if you're serializing\nto HTML for any other reason via ",(0,n.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical_html#generatehtmlfromnodes",children:"$generateHtmlFromNodes"}),". You could\nalso use this method to build your own HTML renderer."]}),"\n",(0,n.jsx)(l.h4,{id:"parameters-3",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(l.tbody,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"editor"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalEditor",children:(0,n.jsx)(l.code,{children:"LexicalEditor"})})})]})})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-6",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#domexportoutput",children:(0,n.jsx)(l.code,{children:"DOMExportOutput"})})}),"\n",(0,n.jsx)(l.h4,{id:"overrides-5",children:"Overrides"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,n.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode#exportdom",children:"exportDOM"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-9",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-table/src/LexicalTableNode.ts#L352",children:"packages/lexical-table/src/LexicalTableNode.ts:352"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"exportjson",children:"exportJSON"}),"\n",(0,n.jsxs)(l.p,{children:["\u25B8 ",(0,n.jsx)(l.strong,{children:"exportJSON"}),"(): ",(0,n.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical_table#serializedtablenode",children:(0,n.jsx)(l.code,{children:"SerializedTableNode"})})]}),"\n",(0,n.jsxs)(l.p,{children:["Controls how the this node is serialized to JSON. This is important for\ncopy and paste between Lexical editors sharing the same namespace. It's also important\nif you're serializing to JSON for persistent storage somewhere.\nSee ",(0,n.jsx)(l.a,{href:"https://lexical.dev/docs/concepts/serialization#lexical---html",children:"Serialization & Deserialization"}),"."]}),"\n",(0,n.jsx)(l.h4,{id:"returns-7",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical_table#serializedtablenode",children:(0,n.jsx)(l.code,{children:"SerializedTableNode"})})}),"\n",(0,n.jsx)(l.h4,{id:"overrides-6",children:"Overrides"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,n.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode#exportjson",children:"exportJSON"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-10",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-table/src/LexicalTableNode.ts#L239",children:"packages/lexical-table/src/LexicalTableNode.ts:239"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"extractwithchild",children:"extractWithChild"}),"\n",(0,n.jsxs)(l.p,{children:["\u25B8 ",(0,n.jsx)(l.strong,{children:"extractWithChild"}),"(",(0,n.jsx)(l.code,{children:"child"}),", ",(0,n.jsx)(l.code,{children:"selection"}),", ",(0,n.jsx)(l.code,{children:"destination"}),"): ",(0,n.jsx)(l.code,{children:"boolean"})]}),"\n",(0,n.jsx)(l.h4,{id:"parameters-4",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsxs)(l.tbody,{children:[(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"child"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(l.code,{children:"LexicalNode"})})})]}),(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"selection"})}),(0,n.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,n.jsx)(l.code,{children:"null"})," | ",(0,n.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.BaseSelection",children:(0,n.jsx)(l.code,{children:"BaseSelection"})})]})]}),(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"destination"})}),(0,n.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,n.jsx)(l.code,{children:'"clone"'})," | ",(0,n.jsx)(l.code,{children:'"html"'})]})]})]})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-8",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"boolean"})}),"\n",(0,n.jsx)(l.h4,{id:"overrides-7",children:"Overrides"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,n.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode#extractwithchild",children:"extractWithChild"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-11",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-table/src/LexicalTableNode.ts#L251",children:"packages/lexical-table/src/LexicalTableNode.ts:251"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"getcellnodefromcords",children:"getCellNodeFromCords"}),"\n",(0,n.jsxs)(l.p,{children:["\u25B8 ",(0,n.jsx)(l.strong,{children:"getCellNodeFromCords"}),"(",(0,n.jsx)(l.code,{children:"x"}),", ",(0,n.jsx)(l.code,{children:"y"}),", ",(0,n.jsx)(l.code,{children:"table"}),"): ",(0,n.jsx)(l.code,{children:"null"})," | ",(0,n.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical_table.TableCellNode",children:(0,n.jsx)(l.code,{children:"TableCellNode"})})]}),"\n",(0,n.jsx)(l.h4,{id:"parameters-5",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsxs)(l.tbody,{children:[(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"x"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"number"})})]}),(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"y"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"number"})})]}),(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"table"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"TableDOMTable"})})]})]})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-9",children:"Returns"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.code,{children:"null"})," | ",(0,n.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical_table.TableCellNode",children:(0,n.jsx)(l.code,{children:"TableCellNode"})})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-12",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-table/src/LexicalTableNode.ts#L509",children:"packages/lexical-table/src/LexicalTableNode.ts:509"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"getcellnodefromcordsorthrow",children:"getCellNodeFromCordsOrThrow"}),"\n",(0,n.jsxs)(l.p,{children:["\u25B8 ",(0,n.jsx)(l.strong,{children:"getCellNodeFromCordsOrThrow"}),"(",(0,n.jsx)(l.code,{children:"x"}),", ",(0,n.jsx)(l.code,{children:"y"}),", ",(0,n.jsx)(l.code,{children:"table"}),"): ",(0,n.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical_table.TableCellNode",children:(0,n.jsx)(l.code,{children:"TableCellNode"})})]}),"\n",(0,n.jsx)(l.h4,{id:"parameters-6",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsxs)(l.tbody,{children:[(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"x"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"number"})})]}),(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"y"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"number"})})]}),(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"table"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"TableDOMTable"})})]})]})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-10",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical_table.TableCellNode",children:(0,n.jsx)(l.code,{children:"TableCellNode"})})}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-13",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-table/src/LexicalTableNode.ts#L529",children:"packages/lexical-table/src/LexicalTableNode.ts:529"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"getcolwidths",children:"getColWidths"}),"\n",(0,n.jsxs)(l.p,{children:["\u25B8 ",(0,n.jsx)(l.strong,{children:"getColWidths"}),"(): ",(0,n.jsx)(l.code,{children:"undefined"})," | readonly ",(0,n.jsx)(l.code,{children:"number"}),"[]"]}),"\n",(0,n.jsx)(l.h4,{id:"returns-11",children:"Returns"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.code,{children:"undefined"})," | readonly ",(0,n.jsx)(l.code,{children:"number"}),"[]"]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-14",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-table/src/LexicalTableNode.ts#L185",children:"packages/lexical-table/src/LexicalTableNode.ts:185"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"getcolumncount",children:"getColumnCount"}),"\n",(0,n.jsxs)(l.p,{children:["\u25B8 ",(0,n.jsx)(l.strong,{children:"getColumnCount"}),"(): ",(0,n.jsx)(l.code,{children:"number"})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-12",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"number"})}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-15",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-table/src/LexicalTableNode.ts#L581",children:"packages/lexical-table/src/LexicalTableNode.ts:581"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"getcordsfromcellnode",children:"getCordsFromCellNode"}),"\n",(0,n.jsxs)(l.p,{children:["\u25B8 ",(0,n.jsx)(l.strong,{children:"getCordsFromCellNode"}),"(",(0,n.jsx)(l.code,{children:"tableCellNode"}),", ",(0,n.jsx)(l.code,{children:"table"}),"): ",(0,n.jsx)(l.code,{children:"Object"})]}),"\n",(0,n.jsx)(l.h4,{id:"parameters-7",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsxs)(l.tbody,{children:[(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"tableCellNode"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical_table.TableCellNode",children:(0,n.jsx)(l.code,{children:"TableCellNode"})})})]}),(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"table"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"TableDOMTable"})})]})]})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-13",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"Object"})}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsxs)(l.tbody,{children:[(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"x"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"number"})})]}),(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"y"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"number"})})]})]})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-16",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-table/src/LexicalTableNode.ts#L442",children:"packages/lexical-table/src/LexicalTableNode.ts:442"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"getdomcellfromcords",children:"getDOMCellFromCords"}),"\n",(0,n.jsxs)(l.p,{children:["\u25B8 ",(0,n.jsx)(l.strong,{children:"getDOMCellFromCords"}),"(",(0,n.jsx)(l.code,{children:"x"}),", ",(0,n.jsx)(l.code,{children:"y"}),", ",(0,n.jsx)(l.code,{children:"table"}),"): ",(0,n.jsx)(l.code,{children:"null"})," | ",(0,n.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical_table#tabledomcell",children:(0,n.jsx)(l.code,{children:"TableDOMCell"})})]}),"\n",(0,n.jsx)(l.h4,{id:"parameters-8",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsxs)(l.tbody,{children:[(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"x"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"number"})})]}),(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"y"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"number"})})]}),(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"table"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"TableDOMTable"})})]})]})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-14",children:"Returns"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.code,{children:"null"})," | ",(0,n.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical_table#tabledomcell",children:(0,n.jsx)(l.code,{children:"TableDOMCell"})})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-17",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-table/src/LexicalTableNode.ts#L471",children:"packages/lexical-table/src/LexicalTableNode.ts:471"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"getdomcellfromcordsorthrow",children:"getDOMCellFromCordsOrThrow"}),"\n",(0,n.jsxs)(l.p,{children:["\u25B8 ",(0,n.jsx)(l.strong,{children:"getDOMCellFromCordsOrThrow"}),"(",(0,n.jsx)(l.code,{children:"x"}),", ",(0,n.jsx)(l.code,{children:"y"}),", ",(0,n.jsx)(l.code,{children:"table"}),"): ",(0,n.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical_table#tabledomcell",children:(0,n.jsx)(l.code,{children:"TableDOMCell"})})]}),"\n",(0,n.jsx)(l.h4,{id:"parameters-9",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsxs)(l.tbody,{children:[(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"x"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"number"})})]}),(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"y"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"number"})})]}),(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"table"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"TableDOMTable"})})]})]})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-15",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical_table#tabledomcell",children:(0,n.jsx)(l.code,{children:"TableDOMCell"})})}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-18",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-table/src/LexicalTableNode.ts#L495",children:"packages/lexical-table/src/LexicalTableNode.ts:495"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"getdomslot",children:"getDOMSlot"}),"\n",(0,n.jsxs)(l.p,{children:["\u25B8 ",(0,n.jsx)(l.strong,{children:"getDOMSlot"}),"(",(0,n.jsx)(l.code,{children:"element"}),"): ",(0,n.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementDOMSlot",children:(0,n.jsx)(l.code,{children:"ElementDOMSlot"})}),"<",(0,n.jsx)(l.code,{children:"HTMLTableElement"}),">"]}),"\n",(0,n.jsx)(l.h4,{id:"parameters-10",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(l.tbody,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"element"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"HTMLElement"})})]})})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-16",children:"Returns"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementDOMSlot",children:(0,n.jsx)(l.code,{children:"ElementDOMSlot"})}),"<",(0,n.jsx)(l.code,{children:"HTMLTableElement"}),">"]}),"\n",(0,n.jsx)(l.h4,{id:"overrides-8",children:"Overrides"}),"\n",(0,n.jsx)(l.p,{children:"ElementNode.getDOMSlot"}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-19",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-table/src/LexicalTableNode.ts#L259",children:"packages/lexical-table/src/LexicalTableNode.ts:259"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"getfrozencolumns",children:"getFrozenColumns"}),"\n",(0,n.jsxs)(l.p,{children:["\u25B8 ",(0,n.jsx)(l.strong,{children:"getFrozenColumns"}),"(): ",(0,n.jsx)(l.code,{children:"number"})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-17",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"number"})}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-20",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-table/src/LexicalTableNode.ts#L559",children:"packages/lexical-table/src/LexicalTableNode.ts:559"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"getfrozenrows",children:"getFrozenRows"}),"\n",(0,n.jsxs)(l.p,{children:["\u25B8 ",(0,n.jsx)(l.strong,{children:"getFrozenRows"}),"(): ",(0,n.jsx)(l.code,{children:"number"})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-18",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"number"})}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-21",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-table/src/LexicalTableNode.ts#L569",children:"packages/lexical-table/src/LexicalTableNode.ts:569"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"getrowstriping",children:"getRowStriping"}),"\n",(0,n.jsxs)(l.p,{children:["\u25B8 ",(0,n.jsx)(l.strong,{children:"getRowStriping"}),"(): ",(0,n.jsx)(l.code,{children:"boolean"})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-19",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"boolean"})}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-22",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-table/src/LexicalTableNode.ts#L543",children:"packages/lexical-table/src/LexicalTableNode.ts:543"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"isshadowroot",children:"isShadowRoot"}),"\n",(0,n.jsxs)(l.p,{children:["\u25B8 ",(0,n.jsx)(l.strong,{children:"isShadowRoot"}),"(): ",(0,n.jsx)(l.code,{children:"boolean"})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-20",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"boolean"})}),"\n",(0,n.jsx)(l.h4,{id:"overrides-9",children:"Overrides"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,n.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode#isshadowroot",children:"isShadowRoot"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-23",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-table/src/LexicalTableNode.ts#L438",children:"packages/lexical-table/src/LexicalTableNode.ts:438"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"setcolwidths",children:"setColWidths"}),"\n",(0,n.jsxs)(l.p,{children:["\u25B8 ",(0,n.jsx)(l.strong,{children:"setColWidths"}),"(",(0,n.jsx)(l.code,{children:"colWidths"}),"): ",(0,n.jsx)(l.code,{children:"this"})]}),"\n",(0,n.jsx)(l.h4,{id:"parameters-11",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(l.tbody,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"colWidths"})}),(0,n.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,n.jsx)(l.code,{children:"undefined"})," | readonly ",(0,n.jsx)(l.code,{children:"number"}),"[]"]})]})})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-21",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"this"})}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-24",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-table/src/LexicalTableNode.ts#L190",children:"packages/lexical-table/src/LexicalTableNode.ts:190"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"setfrozencolumns",children:"setFrozenColumns"}),"\n",(0,n.jsxs)(l.p,{children:["\u25B8 ",(0,n.jsx)(l.strong,{children:"setFrozenColumns"}),"(",(0,n.jsx)(l.code,{children:"columnCount"}),"): ",(0,n.jsx)(l.code,{children:"this"})]}),"\n",(0,n.jsx)(l.h4,{id:"parameters-12",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(l.tbody,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"columnCount"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"number"})})]})})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-22",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"this"})}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-25",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-table/src/LexicalTableNode.ts#L553",children:"packages/lexical-table/src/LexicalTableNode.ts:553"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"setfrozenrows",children:"setFrozenRows"}),"\n",(0,n.jsxs)(l.p,{children:["\u25B8 ",(0,n.jsx)(l.strong,{children:"setFrozenRows"}),"(",(0,n.jsx)(l.code,{children:"rowCount"}),"): ",(0,n.jsx)(l.code,{children:"this"})]}),"\n",(0,n.jsx)(l.h4,{id:"parameters-13",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(l.tbody,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"rowCount"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"number"})})]})})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-23",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"this"})}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-26",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-table/src/LexicalTableNode.ts#L563",children:"packages/lexical-table/src/LexicalTableNode.ts:563"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"setrowstriping",children:"setRowStriping"}),"\n",(0,n.jsxs)(l.p,{children:["\u25B8 ",(0,n.jsx)(l.strong,{children:"setRowStriping"}),"(",(0,n.jsx)(l.code,{children:"newRowStriping"}),"): ",(0,n.jsx)(l.code,{children:"this"})]}),"\n",(0,n.jsx)(l.h4,{id:"parameters-14",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(l.tbody,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"newRowStriping"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"boolean"})})]})})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-24",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"this"})}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-27",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-table/src/LexicalTableNode.ts#L547",children:"packages/lexical-table/src/LexicalTableNode.ts:547"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"updatedom",children:"updateDOM"}),"\n",(0,n.jsxs)(l.p,{children:["\u25B8 ",(0,n.jsx)(l.strong,{children:"updateDOM"}),"(",(0,n.jsx)(l.code,{children:"prevNode"}),", ",(0,n.jsx)(l.code,{children:"dom"}),", ",(0,n.jsx)(l.code,{children:"config"}),"): ",(0,n.jsx)(l.code,{children:"boolean"})]}),"\n",(0,n.jsx)(l.p,{children:"Called when a node changes and should update the DOM\nin whatever way is necessary to make it align with any changes that might\nhave happened during the update."}),"\n",(0,n.jsx)(l.p,{children:'Returning "true" here will cause lexical to unmount and recreate the DOM node\n(by calling createDOM). You would need to do this if the element tag changes,\nfor instance.'}),"\n",(0,n.jsx)(l.h4,{id:"parameters-15",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsxs)(l.tbody,{children:[(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"prevNode"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"this"})})]}),(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"dom"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"HTMLElement"})})]}),(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"config"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorconfig",children:(0,n.jsx)(l.code,{children:"EditorConfig"})})})]})]})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-25",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"boolean"})}),"\n",(0,n.jsx)(l.h4,{id:"overrides-10",children:"Overrides"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,n.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode#updatedom",children:"updateDOM"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-28",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-table/src/LexicalTableNode.ts#L339",children:"packages/lexical-table/src/LexicalTableNode.ts:339"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"updatefromjson",children:"updateFromJSON"}),"\n",(0,n.jsxs)(l.p,{children:["\u25B8 ",(0,n.jsx)(l.strong,{children:"updateFromJSON"}),"(",(0,n.jsx)(l.code,{children:"serializedNode"}),"): ",(0,n.jsx)(l.code,{children:"this"})]}),"\n",(0,n.jsx)(l.p,{children:"Update this LexicalNode instance from serialized JSON. It's recommended\nto implement as much logic as possible in this method instead of the\nstatic importJSON method, so that the functionality can be inherited in subclasses."}),"\n",(0,n.jsx)(l.p,{children:"The LexicalUpdateJSON utility type should be used to ignore any type, version,\nor children properties in the JSON so that the extended JSON from subclasses\nare acceptable parameters for the super call."}),"\n",(0,n.jsx)(l.p,{children:"If overridden, this method must call super."}),"\n",(0,n.jsx)(l.h4,{id:"parameters-16",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(l.tbody,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"serializedNode"})}),(0,n.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,n.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#lexicalupdatejson",children:(0,n.jsx)(l.code,{children:"LexicalUpdateJSON"})}),"<",(0,n.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical_table#serializedtablenode",children:(0,n.jsx)(l.code,{children:"SerializedTableNode"})}),">"]})]})})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-26",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"this"})}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.strong,{children:(0,n.jsx)(l.code,{children:"Example"})})}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-ts",children:"class MyTextNode extends TextNode {\n  // ...\n  static importJSON(serializedNode: SerializedMyTextNode): MyTextNode {\n    return $createMyTextNode()\n      .updateFromJSON(serializedNode);\n  }\n  updateFromJSON(\n    serializedNode: LexicalUpdateJSON<SerializedMyTextNode>,\n  ): this {\n    return super.updateFromJSON(serializedNode)\n      .setMyProperty(serializedNode.myProperty);\n  }\n}\n"})}),"\n",(0,n.jsx)(l.h4,{id:"overrides-11",children:"Overrides"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,n.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode#updatefromjson",children:"updateFromJSON"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-29",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-table/src/LexicalTableNode.ts#L223",children:"packages/lexical-table/src/LexicalTableNode.ts:223"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"updatetableelement",children:"updateTableElement"}),"\n",(0,n.jsxs)(l.p,{children:["\u25B8 ",(0,n.jsx)(l.strong,{children:"updateTableElement"}),"(",(0,n.jsx)(l.code,{children:"prevNode"}),", ",(0,n.jsx)(l.code,{children:"tableElement"}),", ",(0,n.jsx)(l.code,{children:"config"}),"): ",(0,n.jsx)(l.code,{children:"void"})]}),"\n",(0,n.jsx)(l.h4,{id:"parameters-17",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsxs)(l.tbody,{children:[(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"prevNode"})}),(0,n.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,n.jsx)(l.code,{children:"null"})," | ",(0,n.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical_table.TableNode",children:(0,n.jsx)(l.code,{children:"TableNode"})})]})]}),(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"tableElement"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"HTMLTableElement"})})]}),(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"config"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorconfig",children:(0,n.jsx)(l.code,{children:"EditorConfig"})})})]})]})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-27",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"void"})}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-30",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-table/src/LexicalTableNode.ts#L319",children:"packages/lexical-table/src/LexicalTableNode.ts:319"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"updatetablewrapper",children:"updateTableWrapper"}),"\n",(0,n.jsxs)(l.p,{children:["\u25B8 ",(0,n.jsx)(l.strong,{children:"updateTableWrapper"}),"(",(0,n.jsx)(l.code,{children:"prevNode"}),", ",(0,n.jsx)(l.code,{children:"tableWrapper"}),", ",(0,n.jsx)(l.code,{children:"tableElement"}),", ",(0,n.jsx)(l.code,{children:"config"}),"): ",(0,n.jsx)(l.code,{children:"void"})]}),"\n",(0,n.jsx)(l.h4,{id:"parameters-18",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsxs)(l.tbody,{children:[(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"prevNode"})}),(0,n.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,n.jsx)(l.code,{children:"null"})," | ",(0,n.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical_table.TableNode",children:(0,n.jsx)(l.code,{children:"TableNode"})})]})]}),(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"tableWrapper"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"HTMLDivElement"})})]}),(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"tableElement"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"HTMLTableElement"})})]}),(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"config"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorconfig",children:(0,n.jsx)(l.code,{children:"EditorConfig"})})})]})]})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-28",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"void"})}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-31",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-table/src/LexicalTableNode.ts#L298",children:"packages/lexical-table/src/LexicalTableNode.ts:298"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"clone",children:"clone"}),"\n",(0,n.jsxs)(l.p,{children:["\u25B8 ",(0,n.jsx)(l.strong,{children:"clone"}),"(",(0,n.jsx)(l.code,{children:"node"}),"): ",(0,n.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical_table.TableNode",children:(0,n.jsx)(l.code,{children:"TableNode"})})]}),"\n",(0,n.jsx)(l.p,{children:"Clones this node, creating a new node with a different key\nand adding it to the EditorState (but not attaching it anywhere!). All nodes must\nimplement this method."}),"\n",(0,n.jsx)(l.h4,{id:"parameters-19",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(l.tbody,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"node"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical_table.TableNode",children:(0,n.jsx)(l.code,{children:"TableNode"})})})]})})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-29",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical_table.TableNode",children:(0,n.jsx)(l.code,{children:"TableNode"})})}),"\n",(0,n.jsx)(l.h4,{id:"overrides-12",children:"Overrides"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,n.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode#clone",children:"clone"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-32",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-table/src/LexicalTableNode.ts#L198",children:"packages/lexical-table/src/LexicalTableNode.ts:198"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"gettype",children:"getType"}),"\n",(0,n.jsxs)(l.p,{children:["\u25B8 ",(0,n.jsx)(l.strong,{children:"getType"}),"(): ",(0,n.jsx)(l.code,{children:"string"})]}),"\n",(0,n.jsx)(l.p,{children:"Returns the string type of this node. Every node must\nimplement this and it MUST BE UNIQUE amongst nodes registered\non the editor."}),"\n",(0,n.jsx)(l.h4,{id:"returns-30",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"string"})}),"\n",(0,n.jsx)(l.h4,{id:"overrides-13",children:"Overrides"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,n.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode#gettype-1",children:"getType"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-33",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-table/src/LexicalTableNode.ts#L181",children:"packages/lexical-table/src/LexicalTableNode.ts:181"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"importdom",children:"importDOM"}),"\n",(0,n.jsxs)(l.p,{children:["\u25B8 ",(0,n.jsx)(l.strong,{children:"importDOM"}),"(): ",(0,n.jsx)(l.code,{children:"null"})," | ",(0,n.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#domconversionmap",children:(0,n.jsx)(l.code,{children:"DOMConversionMap"})})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-31",children:"Returns"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.code,{children:"null"})," | ",(0,n.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#domconversionmap",children:(0,n.jsx)(l.code,{children:"DOMConversionMap"})})]}),"\n",(0,n.jsx)(l.h4,{id:"overrides-14",children:"Overrides"}),"\n",(0,n.jsx)(l.p,{children:"ElementNode.importDOM"}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-34",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-table/src/LexicalTableNode.ts#L210",children:"packages/lexical-table/src/LexicalTableNode.ts:210"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"importjson",children:"importJSON"}),"\n",(0,n.jsxs)(l.p,{children:["\u25B8 ",(0,n.jsx)(l.strong,{children:"importJSON"}),"(",(0,n.jsx)(l.code,{children:"serializedNode"}),"): ",(0,n.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical_table.TableNode",children:(0,n.jsx)(l.code,{children:"TableNode"})})]}),"\n",(0,n.jsxs)(l.p,{children:["Controls how the this node is deserialized from JSON. This is usually boilerplate,\nbut provides an abstraction between the node implementation and serialized interface that can\nbe important if you ever make breaking changes to a node schema (by adding or removing properties).\nSee ",(0,n.jsx)(l.a,{href:"https://lexical.dev/docs/concepts/serialization#lexical---html",children:"Serialization & Deserialization"}),"."]}),"\n",(0,n.jsx)(l.h4,{id:"parameters-20",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(l.tbody,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"serializedNode"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical_table#serializedtablenode",children:(0,n.jsx)(l.code,{children:"SerializedTableNode"})})})]})})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-32",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical_table.TableNode",children:(0,n.jsx)(l.code,{children:"TableNode"})})}),"\n",(0,n.jsx)(l.h4,{id:"overrides-15",children:"Overrides"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,n.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode#importjson",children:"importJSON"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-35",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-table/src/LexicalTableNode.ts#L219",children:"packages/lexical-table/src/LexicalTableNode.ts:219"})})]})}function x(e={}){let{wrapper:l}={...(0,d.a)(),...e.components};return l?(0,n.jsx)(l,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},22840:function(e,l,i){i.d(l,{Z:()=>t,a:()=>r});var s=i(2784);let n={},d=s.createContext(n);function r(e){let l=s.useContext(d);return s.useMemo(function(){return"function"==typeof e?e(l):{...l,...e}},[l,e])}function t(e){let l;return l=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),s.createElement(d.Provider,{value:l},e.children)}}}]);