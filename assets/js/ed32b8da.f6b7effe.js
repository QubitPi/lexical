"use strict";(self.webpackChunk_lexical_website=self.webpackChunk_lexical_website||[]).push([["4826"],{43475:function(e,l,i){i.r(l),i.d(l,{frontMatter:()=>d,default:()=>o,contentTitle:()=>a,assets:()=>c,toc:()=>t,metadata:()=>r});var r=JSON.parse('{"id":"api/classes/lexical.ParagraphNode","title":"Class: ParagraphNode","description":"lexical.ParagraphNode","source":"@site/docs/api/classes/lexical.ParagraphNode.md","sourceDirName":"api/classes","slug":"/api/classes/lexical.ParagraphNode","permalink":"/lexical/docs/api/classes/lexical.ParagraphNode","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","frontMatter":{"id":"lexical.ParagraphNode","title":"Class: ParagraphNode","custom_edit_url":null},"sidebar":"api","previous":{"title":"NodeSelection","permalink":"/lexical/docs/api/classes/lexical.NodeSelection"},"next":{"title":"Point","permalink":"/lexical/docs/api/classes/lexical.Point"}}'),s=i(52322),n=i(22840);let d={id:"lexical.ParagraphNode",title:"Class: ParagraphNode",custom_edit_url:null},a=void 0,c={},t=[{value:"Hierarchy",id:"hierarchy",level:2},{value:"Properties",id:"properties",level:2},{value:"constructor",id:"constructor",level:3},{value:"Overrides",id:"overrides",level:4},{value:"Defined in",id:"defined-in",level:4},{value:"Methods",id:"methods",level:2},{value:"collapseAtStart",id:"collapseatstart",level:3},{value:"Returns",id:"returns",level:4},{value:"Overrides",id:"overrides-1",level:4},{value:"Defined in",id:"defined-in-1",level:4},{value:"createDOM",id:"createdom",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Overrides",id:"overrides-2",level:4},{value:"Defined in",id:"defined-in-2",level:4},{value:"exportDOM",id:"exportdom",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-2",level:4},{value:"Overrides",id:"overrides-3",level:4},{value:"Defined in",id:"defined-in-3",level:4},{value:"exportJSON",id:"exportjson",level:3},{value:"Returns",id:"returns-3",level:4},{value:"Overrides",id:"overrides-4",level:4},{value:"Defined in",id:"defined-in-4",level:4},{value:"insertNewAfter",id:"insertnewafter",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-4",level:4},{value:"Overrides",id:"overrides-5",level:4},{value:"Defined in",id:"defined-in-5",level:4},{value:"updateDOM",id:"updatedom",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-5",level:4},{value:"Overrides",id:"overrides-6",level:4},{value:"Defined in",id:"defined-in-6",level:4},{value:"clone",id:"clone",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-6",level:4},{value:"Overrides",id:"overrides-7",level:4},{value:"Defined in",id:"defined-in-7",level:4},{value:"getType",id:"gettype",level:3},{value:"Returns",id:"returns-7",level:4},{value:"Overrides",id:"overrides-8",level:4},{value:"Defined in",id:"defined-in-8",level:4},{value:"importDOM",id:"importdom",level:3},{value:"Returns",id:"returns-8",level:4},{value:"Overrides",id:"overrides-9",level:4},{value:"Defined in",id:"defined-in-9",level:4},{value:"importJSON",id:"importjson",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-9",level:4},{value:"Overrides",id:"overrides-10",level:4},{value:"Defined in",id:"defined-in-10",level:4}];function h(e){let l={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,n.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(l.p,{children:[(0,s.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical",children:"lexical"}),".ParagraphNode"]}),"\n",(0,s.jsx)(l.h2,{id:"hierarchy",children:"Hierarchy"}),"\n",(0,s.jsxs)(l.ul,{children:["\n",(0,s.jsxs)(l.li,{children:["\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:(0,s.jsx)(l.code,{children:"ElementNode"})})}),"\n",(0,s.jsxs)(l.p,{children:["\u21B3 ",(0,s.jsx)(l.strong,{children:(0,s.jsx)(l.code,{children:"ParagraphNode"})})]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(l.h2,{id:"properties",children:"Properties"}),"\n",(0,s.jsx)(l.h3,{id:"constructor",children:"constructor"}),"\n",(0,s.jsxs)(l.p,{children:["\u2022 ",(0,s.jsx)(l.strong,{children:"constructor"}),": ",(0,s.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#klassconstructor",children:(0,s.jsx)(l.code,{children:"KlassConstructor"})}),"<typeof ",(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ParagraphNode",children:(0,s.jsx)(l.code,{children:"ParagraphNode"})}),">"]}),"\n",(0,s.jsx)(l.h4,{id:"overrides",children:"Overrides"}),"\n",(0,s.jsxs)(l.p,{children:[(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode#constructor-1",children:"constructor"})]}),"\n",(0,s.jsx)(l.h4,{id:"defined-in",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/nodes/LexicalParagraphNode.ts#L46",children:"packages/lexical/src/nodes/LexicalParagraphNode.ts:46"})}),"\n",(0,s.jsx)(l.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(l.h3,{id:"collapseatstart",children:"collapseAtStart"}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 ",(0,s.jsx)(l.strong,{children:"collapseAtStart"}),"(): ",(0,s.jsx)(l.code,{children:"boolean"})]}),"\n",(0,s.jsx)(l.h4,{id:"returns",children:"Returns"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.code,{children:"boolean"})}),"\n",(0,s.jsx)(l.h4,{id:"overrides-1",children:"Overrides"}),"\n",(0,s.jsxs)(l.p,{children:[(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode#collapseatstart",children:"collapseAtStart"})]}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-1",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/nodes/LexicalParagraphNode.ts#L133",children:"packages/lexical/src/nodes/LexicalParagraphNode.ts:133"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"createdom",children:"createDOM"}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 ",(0,s.jsx)(l.strong,{children:"createDOM"}),"(",(0,s.jsx)(l.code,{children:"config"}),"): ",(0,s.jsx)(l.code,{children:"HTMLElement"})]}),"\n",(0,s.jsx)(l.p,{children:"Called during the reconciliation process to determine which nodes\nto insert into the DOM for this Lexical Node."}),"\n",(0,s.jsx)(l.p,{children:"This method must return exactly one HTMLElement. Nested elements are not supported."}),"\n",(0,s.jsx)(l.p,{children:"Do not attempt to update the Lexical EditorState during this phase of the update lifecycle."}),"\n",(0,s.jsx)(l.h4,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,s.jsx)(l.tbody,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"config"})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorconfig",children:(0,s.jsx)(l.code,{children:"EditorConfig"})})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:"allows access to things like the EditorTheme (to apply classes) during reconciliation."})]})})]}),"\n",(0,s.jsx)(l.h4,{id:"returns-1",children:"Returns"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.code,{children:"HTMLElement"})}),"\n",(0,s.jsx)(l.h4,{id:"overrides-2",children:"Overrides"}),"\n",(0,s.jsxs)(l.p,{children:[(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode#createdom",children:"createDOM"})]}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-2",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/nodes/LexicalParagraphNode.ts#L58",children:"packages/lexical/src/nodes/LexicalParagraphNode.ts:58"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"exportdom",children:"exportDOM"}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 ",(0,s.jsx)(l.strong,{children:"exportDOM"}),"(",(0,s.jsx)(l.code,{children:"editor"}),"): ",(0,s.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#domexportoutput",children:(0,s.jsx)(l.code,{children:"DOMExportOutput"})})]}),"\n",(0,s.jsxs)(l.p,{children:["Controls how the this node is serialized to HTML. This is important for\ncopy and paste between Lexical and non-Lexical editors, or Lexical editors with different namespaces,\nin which case the primary transfer format is HTML. It's also important if you're serializing\nto HTML for any other reason via ",(0,s.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical_html#generatehtmlfromnodes",children:"$generateHtmlFromNodes"}),". You could\nalso use this method to build your own HTML renderer."]}),"\n",(0,s.jsx)(l.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,s.jsx)(l.tbody,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"editor"})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalEditor",children:(0,s.jsx)(l.code,{children:"LexicalEditor"})})})]})})]}),"\n",(0,s.jsx)(l.h4,{id:"returns-2",children:"Returns"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#domexportoutput",children:(0,s.jsx)(l.code,{children:"DOMExportOutput"})})}),"\n",(0,s.jsx)(l.h4,{id:"overrides-3",children:"Overrides"}),"\n",(0,s.jsxs)(l.p,{children:[(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode#exportdom",children:"exportDOM"})]}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-3",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/nodes/LexicalParagraphNode.ts#L84",children:"packages/lexical/src/nodes/LexicalParagraphNode.ts:84"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"exportjson",children:"exportJSON"}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 ",(0,s.jsx)(l.strong,{children:"exportJSON"}),"(): ",(0,s.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#serializedparagraphnode",children:(0,s.jsx)(l.code,{children:"SerializedParagraphNode"})})]}),"\n",(0,s.jsxs)(l.p,{children:["Controls how the this node is serialized to JSON. This is important for\ncopy and paste between Lexical editors sharing the same namespace. It's also important\nif you're serializing to JSON for persistent storage somewhere.\nSee ",(0,s.jsx)(l.a,{href:"https://lexical.dev/docs/concepts/serialization#lexical---html",children:"Serialization & Deserialization"}),"."]}),"\n",(0,s.jsx)(l.h4,{id:"returns-3",children:"Returns"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#serializedparagraphnode",children:(0,s.jsx)(l.code,{children:"SerializedParagraphNode"})})}),"\n",(0,s.jsx)(l.h4,{id:"overrides-4",children:"Overrides"}),"\n",(0,s.jsxs)(l.p,{children:[(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode#exportjson",children:"exportJSON"})]}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-4",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/nodes/LexicalParagraphNode.ts#L107",children:"packages/lexical/src/nodes/LexicalParagraphNode.ts:107"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"insertnewafter",children:"insertNewAfter"}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 ",(0,s.jsx)(l.strong,{children:"insertNewAfter"}),"(",(0,s.jsx)(l.code,{children:"rangeSelection"}),", ",(0,s.jsx)(l.code,{children:"restoreSelection"}),"): ",(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ParagraphNode",children:(0,s.jsx)(l.code,{children:"ParagraphNode"})})]}),"\n",(0,s.jsx)(l.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,s.jsxs)(l.tbody,{children:[(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"rangeSelection"})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.RangeSelection",children:(0,s.jsx)(l.code,{children:"RangeSelection"})})})]}),(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"restoreSelection"})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"boolean"})})]})]})]}),"\n",(0,s.jsx)(l.h4,{id:"returns-4",children:"Returns"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ParagraphNode",children:(0,s.jsx)(l.code,{children:"ParagraphNode"})})}),"\n",(0,s.jsx)(l.h4,{id:"overrides-5",children:"Overrides"}),"\n",(0,s.jsxs)(l.p,{children:[(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode#insertnewafter",children:"insertNewAfter"})]}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-5",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/nodes/LexicalParagraphNode.ts#L118",children:"packages/lexical/src/nodes/LexicalParagraphNode.ts:118"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"updatedom",children:"updateDOM"}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 ",(0,s.jsx)(l.strong,{children:"updateDOM"}),"(",(0,s.jsx)(l.code,{children:"prevNode"}),", ",(0,s.jsx)(l.code,{children:"dom"}),", ",(0,s.jsx)(l.code,{children:"config"}),"): ",(0,s.jsx)(l.code,{children:"boolean"})]}),"\n",(0,s.jsx)(l.p,{children:"Called when a node changes and should update the DOM\nin whatever way is necessary to make it align with any changes that might\nhave happened during the update."}),"\n",(0,s.jsx)(l.p,{children:'Returning "true" here will cause lexical to unmount and recreate the DOM node\n(by calling createDOM). You would need to do this if the element tag changes,\nfor instance.'}),"\n",(0,s.jsx)(l.h4,{id:"parameters-3",children:"Parameters"}),"\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,s.jsxs)(l.tbody,{children:[(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"prevNode"})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ParagraphNode",children:(0,s.jsx)(l.code,{children:"ParagraphNode"})})})]}),(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"dom"})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"HTMLElement"})})]}),(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"config"})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorconfig",children:(0,s.jsx)(l.code,{children:"EditorConfig"})})})]})]})]}),"\n",(0,s.jsx)(l.h4,{id:"returns-5",children:"Returns"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.code,{children:"boolean"})}),"\n",(0,s.jsx)(l.h4,{id:"overrides-6",children:"Overrides"}),"\n",(0,s.jsxs)(l.p,{children:[(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode#updatedom",children:"updateDOM"})]}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-6",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/nodes/LexicalParagraphNode.ts#L67",children:"packages/lexical/src/nodes/LexicalParagraphNode.ts:67"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"clone",children:"clone"}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 ",(0,s.jsx)(l.strong,{children:"clone"}),"(",(0,s.jsx)(l.code,{children:"node"}),"): ",(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ParagraphNode",children:(0,s.jsx)(l.code,{children:"ParagraphNode"})})]}),"\n",(0,s.jsx)(l.p,{children:"Clones this node, creating a new node with a different key\nand adding it to the EditorState (but not attaching it anywhere!). All nodes must\nimplement this method."}),"\n",(0,s.jsx)(l.h4,{id:"parameters-4",children:"Parameters"}),"\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,s.jsx)(l.tbody,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"node"})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ParagraphNode",children:(0,s.jsx)(l.code,{children:"ParagraphNode"})})})]})})]}),"\n",(0,s.jsx)(l.h4,{id:"returns-6",children:"Returns"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ParagraphNode",children:(0,s.jsx)(l.code,{children:"ParagraphNode"})})}),"\n",(0,s.jsx)(l.h4,{id:"overrides-7",children:"Overrides"}),"\n",(0,s.jsxs)(l.p,{children:[(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode#clone",children:"clone"})]}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-7",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/nodes/LexicalParagraphNode.ts#L52",children:"packages/lexical/src/nodes/LexicalParagraphNode.ts:52"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"gettype",children:"getType"}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 ",(0,s.jsx)(l.strong,{children:"getType"}),"(): ",(0,s.jsx)(l.code,{children:"string"})]}),"\n",(0,s.jsx)(l.p,{children:"Returns the string type of this node. Every node must\nimplement this and it MUST BE UNIQUE amongst nodes registered\non the editor."}),"\n",(0,s.jsx)(l.h4,{id:"returns-7",children:"Returns"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.code,{children:"string"})}),"\n",(0,s.jsx)(l.h4,{id:"overrides-8",children:"Overrides"}),"\n",(0,s.jsxs)(l.p,{children:[(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode#gettype-1",children:"getType"})]}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-8",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/nodes/LexicalParagraphNode.ts#L48",children:"packages/lexical/src/nodes/LexicalParagraphNode.ts:48"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"importdom",children:"importDOM"}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 ",(0,s.jsx)(l.strong,{children:"importDOM"}),"(): ",(0,s.jsx)(l.code,{children:"null"})," | ",(0,s.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#domconversionmap",children:(0,s.jsx)(l.code,{children:"DOMConversionMap"})})]}),"\n",(0,s.jsx)(l.h4,{id:"returns-8",children:"Returns"}),"\n",(0,s.jsxs)(l.p,{children:[(0,s.jsx)(l.code,{children:"null"})," | ",(0,s.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#domconversionmap",children:(0,s.jsx)(l.code,{children:"DOMConversionMap"})})]}),"\n",(0,s.jsx)(l.h4,{id:"overrides-9",children:"Overrides"}),"\n",(0,s.jsx)(l.p,{children:"ElementNode.importDOM"}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-9",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/nodes/LexicalParagraphNode.ts#L75",children:"packages/lexical/src/nodes/LexicalParagraphNode.ts:75"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"importjson",children:"importJSON"}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 ",(0,s.jsx)(l.strong,{children:"importJSON"}),"(",(0,s.jsx)(l.code,{children:"serializedNode"}),"): ",(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ParagraphNode",children:(0,s.jsx)(l.code,{children:"ParagraphNode"})})]}),"\n",(0,s.jsxs)(l.p,{children:["Controls how the this node is deserialized from JSON. This is usually boilerplate,\nbut provides an abstraction between the node implementation and serialized interface that can\nbe important if you ever make breaking changes to a node schema (by adding or removing properties).\nSee ",(0,s.jsx)(l.a,{href:"https://lexical.dev/docs/concepts/serialization#lexical---html",children:"Serialization & Deserialization"}),"."]}),"\n",(0,s.jsx)(l.h4,{id:"parameters-5",children:"Parameters"}),"\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,s.jsx)(l.tbody,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"serializedNode"})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#serializedparagraphnode",children:(0,s.jsx)(l.code,{children:"SerializedParagraphNode"})})})]})})]}),"\n",(0,s.jsx)(l.h4,{id:"returns-9",children:"Returns"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ParagraphNode",children:(0,s.jsx)(l.code,{children:"ParagraphNode"})})}),"\n",(0,s.jsx)(l.h4,{id:"overrides-10",children:"Overrides"}),"\n",(0,s.jsxs)(l.p,{children:[(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode#importjson",children:"importJSON"})]}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-10",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/nodes/LexicalParagraphNode.ts#L103",children:"packages/lexical/src/nodes/LexicalParagraphNode.ts:103"})})]})}function o(e={}){let{wrapper:l}={...(0,n.a)(),...e.components};return l?(0,s.jsx)(l,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},22840:function(e,l,i){i.d(l,{Z:()=>a,a:()=>d});var r=i(2784);let s={},n=r.createContext(s);function d(e){let l=r.useContext(n);return r.useMemo(function(){return"function"==typeof e?e(l):{...l,...e}},[l,e])}function a(e){let l;return l=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),r.createElement(n.Provider,{value:l},e.children)}}}]);