"use strict";(self.webpackChunk_lexical_website=self.webpackChunk_lexical_website||[]).push([["6564"],{59519:function(e,i,l){l.r(i),l.d(i,{frontMatter:()=>r,default:()=>x,contentTitle:()=>t,assets:()=>c,toc:()=>a,metadata:()=>s});var s=JSON.parse('{"id":"api/classes/lexical_rich_text.HeadingNode","title":"Class: HeadingNode","description":"@lexical/rich-text.HeadingNode","source":"@site/docs/api/classes/lexical_rich_text.HeadingNode.md","sourceDirName":"api/classes","slug":"/api/classes/lexical_rich_text.HeadingNode","permalink":"/lexical/docs/api/classes/lexical_rich_text.HeadingNode","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","frontMatter":{"id":"lexical_rich_text.HeadingNode","title":"Class: HeadingNode","custom_edit_url":null},"sidebar":"api","previous":{"title":"NodeContextMenuSeparator","permalink":"/lexical/docs/api/classes/lexical_react_LexicalNodeContextMenuPlugin.NodeContextMenuSeparator"},"next":{"title":"QuoteNode","permalink":"/lexical/docs/api/classes/lexical_rich_text.QuoteNode"}}'),n=l(52322),d=l(22840);let r={id:"lexical_rich_text.HeadingNode",title:"Class: HeadingNode",custom_edit_url:null},t=void 0,c={},a=[{value:"Hierarchy",id:"hierarchy",level:2},{value:"Constructors",id:"constructors",level:2},{value:"constructor",id:"constructor",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Overrides",id:"overrides",level:4},{value:"Defined in",id:"defined-in",level:4},{value:"Methods",id:"methods",level:2},{value:"collapseAtStart",id:"collapseatstart",level:3},{value:"Returns",id:"returns-1",level:4},{value:"Overrides",id:"overrides-1",level:4},{value:"Defined in",id:"defined-in-1",level:4},{value:"createDOM",id:"createdom",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-2",level:4},{value:"Overrides",id:"overrides-2",level:4},{value:"Defined in",id:"defined-in-2",level:4},{value:"exportDOM",id:"exportdom",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-3",level:4},{value:"Overrides",id:"overrides-3",level:4},{value:"Defined in",id:"defined-in-3",level:4},{value:"exportJSON",id:"exportjson",level:3},{value:"Returns",id:"returns-4",level:4},{value:"Overrides",id:"overrides-4",level:4},{value:"Defined in",id:"defined-in-4",level:4},{value:"extractWithChild",id:"extractwithchild",level:3},{value:"Returns",id:"returns-5",level:4},{value:"Overrides",id:"overrides-5",level:4},{value:"Defined in",id:"defined-in-5",level:4},{value:"getTag",id:"gettag",level:3},{value:"Returns",id:"returns-6",level:4},{value:"Defined in",id:"defined-in-6",level:4},{value:"insertNewAfter",id:"insertnewafter",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-7",level:4},{value:"Overrides",id:"overrides-6",level:4},{value:"Defined in",id:"defined-in-7",level:4},{value:"setTag",id:"settag",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-8",level:4},{value:"Defined in",id:"defined-in-8",level:4},{value:"updateDOM",id:"updatedom",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-9",level:4},{value:"Overrides",id:"overrides-7",level:4},{value:"Defined in",id:"defined-in-9",level:4},{value:"updateFromJSON",id:"updatefromjson",level:3},{value:"Parameters",id:"parameters-6",level:4},{value:"Returns",id:"returns-10",level:4},{value:"Overrides",id:"overrides-8",level:4},{value:"Defined in",id:"defined-in-10",level:4},{value:"clone",id:"clone",level:3},{value:"Parameters",id:"parameters-7",level:4},{value:"Returns",id:"returns-11",level:4},{value:"Overrides",id:"overrides-9",level:4},{value:"Defined in",id:"defined-in-11",level:4},{value:"getType",id:"gettype",level:3},{value:"Returns",id:"returns-12",level:4},{value:"Overrides",id:"overrides-10",level:4},{value:"Defined in",id:"defined-in-12",level:4},{value:"importDOM",id:"importdom",level:3},{value:"Returns",id:"returns-13",level:4},{value:"Overrides",id:"overrides-11",level:4},{value:"Defined in",id:"defined-in-13",level:4},{value:"importJSON",id:"importjson",level:3},{value:"Parameters",id:"parameters-8",level:4},{value:"Returns",id:"returns-14",level:4},{value:"Overrides",id:"overrides-12",level:4},{value:"Defined in",id:"defined-in-14",level:4}];function h(e){let i={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,d.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/lexical/docs/api/modules/lexical_rich_text",children:"@lexical/rich-text"}),".HeadingNode"]}),"\n",(0,n.jsx)(i.h2,{id:"hierarchy",children:"Hierarchy"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:["\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:(0,n.jsx)(i.code,{children:"ElementNode"})})}),"\n",(0,n.jsxs)(i.p,{children:["\u21B3 ",(0,n.jsx)(i.strong,{children:(0,n.jsx)(i.code,{children:"HeadingNode"})})]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(i.h2,{id:"constructors",children:"Constructors"}),"\n",(0,n.jsx)(i.h3,{id:"constructor",children:"constructor"}),"\n",(0,n.jsxs)(i.p,{children:["\u2022 ",(0,n.jsx)(i.strong,{children:"new HeadingNode"}),"(",(0,n.jsx)(i.code,{children:"tag"}),", ",(0,n.jsx)(i.code,{children:"key?"}),"): ",(0,n.jsx)(i.a,{href:"/lexical/docs/api/classes/lexical_rich_text.HeadingNode",children:(0,n.jsx)(i.code,{children:"HeadingNode"})})]}),"\n",(0,n.jsx)(i.h4,{id:"parameters",children:"Parameters"}),"\n",(0,n.jsxs)(i.table,{children:[(0,n.jsx)(i.thead,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsxs)(i.tbody,{children:[(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"tag"})}),(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.a,{href:"/lexical/docs/api/modules/lexical_rich_text#headingtagtype",children:(0,n.jsx)(i.code,{children:"HeadingTagType"})})})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"key?"})}),(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"string"})})]})]})]}),"\n",(0,n.jsx)(i.h4,{id:"returns",children:"Returns"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"/lexical/docs/api/classes/lexical_rich_text.HeadingNode",children:(0,n.jsx)(i.code,{children:"HeadingNode"})})}),"\n",(0,n.jsx)(i.h4,{id:"overrides",children:"Overrides"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,n.jsx)(i.a,{href:"/lexical/docs/api/classes/lexical.ElementNode#constructor",children:"constructor"})]}),"\n",(0,n.jsx)(i.h4,{id:"defined-in",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-rich-text/src/index.ts#L229",children:"packages/lexical-rich-text/src/index.ts:229"})}),"\n",(0,n.jsx)(i.h2,{id:"methods",children:"Methods"}),"\n",(0,n.jsx)(i.h3,{id:"collapseatstart",children:"collapseAtStart"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"collapseAtStart"}),"(): ",(0,n.jsx)(i.code,{children:"true"})]}),"\n",(0,n.jsx)(i.h4,{id:"returns-1",children:"Returns"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.code,{children:"true"})}),"\n",(0,n.jsx)(i.h4,{id:"overrides-1",children:"Overrides"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,n.jsx)(i.a,{href:"/lexical/docs/api/classes/lexical.ElementNode#collapseatstart",children:"collapseAtStart"})]}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-1",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-rich-text/src/index.ts#L386",children:"packages/lexical-rich-text/src/index.ts:386"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"createdom",children:"createDOM"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"createDOM"}),"(",(0,n.jsx)(i.code,{children:"config"}),"): ",(0,n.jsx)(i.code,{children:"HTMLElement"})]}),"\n",(0,n.jsx)(i.p,{children:"Called during the reconciliation process to determine which nodes\nto insert into the DOM for this Lexical Node."}),"\n",(0,n.jsx)(i.p,{children:"This method must return exactly one HTMLElement. Nested elements are not supported."}),"\n",(0,n.jsx)(i.p,{children:"Do not attempt to update the Lexical EditorState during this phase of the update lifecycle."}),"\n",(0,n.jsx)(i.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,n.jsxs)(i.table,{children:[(0,n.jsx)(i.thead,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Type"}),(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,n.jsx)(i.tbody,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"config"})}),(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.a,{href:"/lexical/docs/api/modules/lexical#editorconfig",children:(0,n.jsx)(i.code,{children:"EditorConfig"})})}),(0,n.jsx)(i.td,{style:{textAlign:"left"},children:"allows access to things like the EditorTheme (to apply classes) during reconciliation."})]})})]}),"\n",(0,n.jsx)(i.h4,{id:"returns-2",children:"Returns"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.code,{children:"HTMLElement"})}),"\n",(0,n.jsx)(i.h4,{id:"overrides-2",children:"Overrides"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,n.jsx)(i.a,{href:"/lexical/docs/api/classes/lexical.ElementNode#createdom",children:"createDOM"})]}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-2",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-rich-text/src/index.ts#L246",children:"packages/lexical-rich-text/src/index.ts:246"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"exportdom",children:"exportDOM"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"exportDOM"}),"(",(0,n.jsx)(i.code,{children:"editor"}),"): ",(0,n.jsx)(i.a,{href:"/lexical/docs/api/modules/lexical#domexportoutput",children:(0,n.jsx)(i.code,{children:"DOMExportOutput"})})]}),"\n",(0,n.jsxs)(i.p,{children:["Controls how the this node is serialized to HTML. This is important for\ncopy and paste between Lexical and non-Lexical editors, or Lexical editors with different namespaces,\nin which case the primary transfer format is HTML. It's also important if you're serializing\nto HTML for any other reason via ",(0,n.jsx)(i.a,{href:"/lexical/docs/api/modules/lexical_html#generatehtmlfromnodes",children:"$generateHtmlFromNodes"}),". You could\nalso use this method to build your own HTML renderer."]}),"\n",(0,n.jsx)(i.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,n.jsxs)(i.table,{children:[(0,n.jsx)(i.thead,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(i.tbody,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"editor"})}),(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.a,{href:"/lexical/docs/api/classes/lexical.LexicalEditor",children:(0,n.jsx)(i.code,{children:"LexicalEditor"})})})]})})]}),"\n",(0,n.jsx)(i.h4,{id:"returns-3",children:"Returns"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"/lexical/docs/api/modules/lexical#domexportoutput",children:(0,n.jsx)(i.code,{children:"DOMExportOutput"})})}),"\n",(0,n.jsx)(i.h4,{id:"overrides-3",children:"Overrides"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,n.jsx)(i.a,{href:"/lexical/docs/api/classes/lexical.ElementNode#exportdom",children:"exportDOM"})]}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-3",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-rich-text/src/index.ts#L316",children:"packages/lexical-rich-text/src/index.ts:316"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"exportjson",children:"exportJSON"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"exportJSON"}),"(): ",(0,n.jsx)(i.a,{href:"/lexical/docs/api/modules/lexical_rich_text#serializedheadingnode",children:(0,n.jsx)(i.code,{children:"SerializedHeadingNode"})})]}),"\n",(0,n.jsxs)(i.p,{children:["Controls how the this node is serialized to JSON. This is important for\ncopy and paste between Lexical editors sharing the same namespace. It's also important\nif you're serializing to JSON for persistent storage somewhere.\nSee ",(0,n.jsx)(i.a,{href:"https://lexical.dev/docs/concepts/serialization#lexical---html",children:"Serialization & Deserialization"}),"."]}),"\n",(0,n.jsx)(i.h4,{id:"returns-4",children:"Returns"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"/lexical/docs/api/modules/lexical_rich_text#serializedheadingnode",children:(0,n.jsx)(i.code,{children:"SerializedHeadingNode"})})}),"\n",(0,n.jsx)(i.h4,{id:"overrides-4",children:"Overrides"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,n.jsx)(i.a,{href:"/lexical/docs/api/classes/lexical.ElementNode#exportjson",children:"exportJSON"})]}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-4",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-rich-text/src/index.ts#L352",children:"packages/lexical-rich-text/src/index.ts:352"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"extractwithchild",children:"extractWithChild"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"extractWithChild"}),"(): ",(0,n.jsx)(i.code,{children:"boolean"})]}),"\n",(0,n.jsx)(i.h4,{id:"returns-5",children:"Returns"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.code,{children:"boolean"})}),"\n",(0,n.jsx)(i.h4,{id:"overrides-5",children:"Overrides"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,n.jsx)(i.a,{href:"/lexical/docs/api/classes/lexical.ElementNode#extractwithchild",children:"extractWithChild"})]}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-5",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-rich-text/src/index.ts#L396",children:"packages/lexical-rich-text/src/index.ts:396"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"gettag",children:"getTag"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"getTag"}),"(): ",(0,n.jsx)(i.a,{href:"/lexical/docs/api/modules/lexical_rich_text#headingtagtype",children:(0,n.jsx)(i.code,{children:"HeadingTagType"})})]}),"\n",(0,n.jsx)(i.h4,{id:"returns-6",children:"Returns"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"/lexical/docs/api/modules/lexical_rich_text#headingtagtype",children:(0,n.jsx)(i.code,{children:"HeadingTagType"})})}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-6",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-rich-text/src/index.ts#L234",children:"packages/lexical-rich-text/src/index.ts:234"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"insertnewafter",children:"insertNewAfter"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"insertNewAfter"}),"(",(0,n.jsx)(i.code,{children:"selection?"}),", ",(0,n.jsx)(i.code,{children:"restoreSelection?"}),"): ",(0,n.jsx)(i.a,{href:"/lexical/docs/api/classes/lexical.ParagraphNode",children:(0,n.jsx)(i.code,{children:"ParagraphNode"})})," | ",(0,n.jsx)(i.a,{href:"/lexical/docs/api/classes/lexical_rich_text.HeadingNode",children:(0,n.jsx)(i.code,{children:"HeadingNode"})})]}),"\n",(0,n.jsx)(i.h4,{id:"parameters-3",children:"Parameters"}),"\n",(0,n.jsxs)(i.table,{children:[(0,n.jsx)(i.thead,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Type"}),(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Default value"})]})}),(0,n.jsxs)(i.tbody,{children:[(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"selection?"})}),(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.a,{href:"/lexical/docs/api/classes/lexical.RangeSelection",children:(0,n.jsx)(i.code,{children:"RangeSelection"})})}),(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"undefined"})})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"restoreSelection"})}),(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"boolean"})}),(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"true"})})]})]})]}),"\n",(0,n.jsx)(i.h4,{id:"returns-7",children:"Returns"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/lexical/docs/api/classes/lexical.ParagraphNode",children:(0,n.jsx)(i.code,{children:"ParagraphNode"})})," | ",(0,n.jsx)(i.a,{href:"/lexical/docs/api/classes/lexical_rich_text.HeadingNode",children:(0,n.jsx)(i.code,{children:"HeadingNode"})})]}),"\n",(0,n.jsx)(i.h4,{id:"overrides-6",children:"Overrides"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,n.jsx)(i.a,{href:"/lexical/docs/api/classes/lexical.ElementNode#insertnewafter",children:"insertNewAfter"})]}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-7",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-rich-text/src/index.ts#L360",children:"packages/lexical-rich-text/src/index.ts:360"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"settag",children:"setTag"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"setTag"}),"(",(0,n.jsx)(i.code,{children:"tag"}),"): ",(0,n.jsx)(i.code,{children:"this"})]}),"\n",(0,n.jsx)(i.h4,{id:"parameters-4",children:"Parameters"}),"\n",(0,n.jsxs)(i.table,{children:[(0,n.jsx)(i.thead,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(i.tbody,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"tag"})}),(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.a,{href:"/lexical/docs/api/modules/lexical_rich_text#headingtagtype",children:(0,n.jsx)(i.code,{children:"HeadingTagType"})})})]})})]}),"\n",(0,n.jsx)(i.h4,{id:"returns-8",children:"Returns"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.code,{children:"this"})}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-8",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-rich-text/src/index.ts#L238",children:"packages/lexical-rich-text/src/index.ts:238"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"updatedom",children:"updateDOM"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"updateDOM"}),"(",(0,n.jsx)(i.code,{children:"prevNode"}),", ",(0,n.jsx)(i.code,{children:"dom"}),", ",(0,n.jsx)(i.code,{children:"config"}),"): ",(0,n.jsx)(i.code,{children:"boolean"})]}),"\n",(0,n.jsx)(i.p,{children:"Called when a node changes and should update the DOM\nin whatever way is necessary to make it align with any changes that might\nhave happened during the update."}),"\n",(0,n.jsx)(i.p,{children:'Returning "true" here will cause lexical to unmount and recreate the DOM node\n(by calling createDOM). You would need to do this if the element tag changes,\nfor instance.'}),"\n",(0,n.jsx)(i.h4,{id:"parameters-5",children:"Parameters"}),"\n",(0,n.jsxs)(i.table,{children:[(0,n.jsx)(i.thead,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsxs)(i.tbody,{children:[(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"prevNode"})}),(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"this"})})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"dom"})}),(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"HTMLElement"})})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"config"})}),(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.a,{href:"/lexical/docs/api/modules/lexical#editorconfig",children:(0,n.jsx)(i.code,{children:"EditorConfig"})})})]})]})]}),"\n",(0,n.jsx)(i.h4,{id:"returns-9",children:"Returns"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.code,{children:"boolean"})}),"\n",(0,n.jsx)(i.h4,{id:"overrides-7",children:"Overrides"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,n.jsx)(i.a,{href:"/lexical/docs/api/classes/lexical.ElementNode#updatedom",children:"updateDOM"})]}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-9",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-rich-text/src/index.ts#L258",children:"packages/lexical-rich-text/src/index.ts:258"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"updatefromjson",children:"updateFromJSON"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"updateFromJSON"}),"(",(0,n.jsx)(i.code,{children:"serializedNode"}),"): ",(0,n.jsx)(i.code,{children:"this"})]}),"\n",(0,n.jsx)(i.p,{children:"Update this LexicalNode instance from serialized JSON. It's recommended\nto implement as much logic as possible in this method instead of the\nstatic importJSON method, so that the functionality can be inherited in subclasses."}),"\n",(0,n.jsx)(i.p,{children:"The LexicalUpdateJSON utility type should be used to ignore any type, version,\nor children properties in the JSON so that the extended JSON from subclasses\nare acceptable parameters for the super call."}),"\n",(0,n.jsx)(i.p,{children:"If overridden, this method must call super."}),"\n",(0,n.jsx)(i.h4,{id:"parameters-6",children:"Parameters"}),"\n",(0,n.jsxs)(i.table,{children:[(0,n.jsx)(i.thead,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(i.tbody,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"serializedNode"})}),(0,n.jsxs)(i.td,{style:{textAlign:"left"},children:[(0,n.jsx)(i.a,{href:"/lexical/docs/api/modules/lexical#lexicalupdatejson",children:(0,n.jsx)(i.code,{children:"LexicalUpdateJSON"})}),"<",(0,n.jsx)(i.a,{href:"/lexical/docs/api/modules/lexical_rich_text#serializedheadingnode",children:(0,n.jsx)(i.code,{children:"SerializedHeadingNode"})}),">"]})]})})]}),"\n",(0,n.jsx)(i.h4,{id:"returns-10",children:"Returns"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.code,{children:"this"})}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.strong,{children:(0,n.jsx)(i.code,{children:"Example"})})}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-ts",children:"class MyTextNode extends TextNode {\n  // ...\n  static importJSON(serializedNode: SerializedMyTextNode): MyTextNode {\n    return $createMyTextNode()\n      .updateFromJSON(serializedNode);\n  }\n  updateFromJSON(\n    serializedNode: LexicalUpdateJSON<SerializedMyTextNode>,\n  ): this {\n    return super.updateFromJSON(serializedNode)\n      .setMyProperty(serializedNode.myProperty);\n  }\n}\n"})}),"\n",(0,n.jsx)(i.h4,{id:"overrides-8",children:"Overrides"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,n.jsx)(i.a,{href:"/lexical/docs/api/classes/lexical.ElementNode#updatefromjson",children:"updateFromJSON"})]}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-10",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-rich-text/src/index.ts#L346",children:"packages/lexical-rich-text/src/index.ts:346"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"clone",children:"clone"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"clone"}),"(",(0,n.jsx)(i.code,{children:"node"}),"): ",(0,n.jsx)(i.a,{href:"/lexical/docs/api/classes/lexical_rich_text.HeadingNode",children:(0,n.jsx)(i.code,{children:"HeadingNode"})})]}),"\n",(0,n.jsx)(i.p,{children:"Clones this node, creating a new node with a different key\nand adding it to the EditorState (but not attaching it anywhere!). All nodes must\nimplement this method."}),"\n",(0,n.jsx)(i.h4,{id:"parameters-7",children:"Parameters"}),"\n",(0,n.jsxs)(i.table,{children:[(0,n.jsx)(i.thead,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(i.tbody,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"node"})}),(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.a,{href:"/lexical/docs/api/classes/lexical_rich_text.HeadingNode",children:(0,n.jsx)(i.code,{children:"HeadingNode"})})})]})})]}),"\n",(0,n.jsx)(i.h4,{id:"returns-11",children:"Returns"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"/lexical/docs/api/classes/lexical_rich_text.HeadingNode",children:(0,n.jsx)(i.code,{children:"HeadingNode"})})}),"\n",(0,n.jsx)(i.h4,{id:"overrides-9",children:"Overrides"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,n.jsx)(i.a,{href:"/lexical/docs/api/classes/lexical.ElementNode#clone",children:"clone"})]}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-11",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-rich-text/src/index.ts#L225",children:"packages/lexical-rich-text/src/index.ts:225"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"gettype",children:"getType"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"getType"}),"(): ",(0,n.jsx)(i.code,{children:"string"})]}),"\n",(0,n.jsx)(i.p,{children:"Returns the string type of this node. Every node must\nimplement this and it MUST BE UNIQUE amongst nodes registered\non the editor."}),"\n",(0,n.jsx)(i.h4,{id:"returns-12",children:"Returns"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.code,{children:"string"})}),"\n",(0,n.jsx)(i.h4,{id:"overrides-10",children:"Overrides"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,n.jsx)(i.a,{href:"/lexical/docs/api/classes/lexical.ElementNode#gettype-1",children:"getType"})]}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-12",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-rich-text/src/index.ts#L221",children:"packages/lexical-rich-text/src/index.ts:221"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"importdom",children:"importDOM"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"importDOM"}),"(): ",(0,n.jsx)(i.code,{children:"null"})," | ",(0,n.jsx)(i.a,{href:"/lexical/docs/api/modules/lexical#domconversionmap",children:(0,n.jsx)(i.code,{children:"DOMConversionMap"})})]}),"\n",(0,n.jsx)(i.h4,{id:"returns-13",children:"Returns"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.code,{children:"null"})," | ",(0,n.jsx)(i.a,{href:"/lexical/docs/api/modules/lexical#domconversionmap",children:(0,n.jsx)(i.code,{children:"DOMConversionMap"})})]}),"\n",(0,n.jsx)(i.h4,{id:"overrides-11",children:"Overrides"}),"\n",(0,n.jsx)(i.p,{children:"ElementNode.importDOM"}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-13",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-rich-text/src/index.ts#L262",children:"packages/lexical-rich-text/src/index.ts:262"})}),"\n",(0,n.jsx)(i.hr,{}),"\n",(0,n.jsx)(i.h3,{id:"importjson",children:"importJSON"}),"\n",(0,n.jsxs)(i.p,{children:["\u25B8 ",(0,n.jsx)(i.strong,{children:"importJSON"}),"(",(0,n.jsx)(i.code,{children:"serializedNode"}),"): ",(0,n.jsx)(i.a,{href:"/lexical/docs/api/classes/lexical_rich_text.HeadingNode",children:(0,n.jsx)(i.code,{children:"HeadingNode"})})]}),"\n",(0,n.jsxs)(i.p,{children:["Controls how the this node is deserialized from JSON. This is usually boilerplate,\nbut provides an abstraction between the node implementation and serialized interface that can\nbe important if you ever make breaking changes to a node schema (by adding or removing properties).\nSee ",(0,n.jsx)(i.a,{href:"https://lexical.dev/docs/concepts/serialization#lexical---html",children:"Serialization & Deserialization"}),"."]}),"\n",(0,n.jsx)(i.h4,{id:"parameters-8",children:"Parameters"}),"\n",(0,n.jsxs)(i.table,{children:[(0,n.jsx)(i.thead,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(i.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(i.tbody,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.code,{children:"serializedNode"})}),(0,n.jsx)(i.td,{style:{textAlign:"left"},children:(0,n.jsx)(i.a,{href:"/lexical/docs/api/modules/lexical_rich_text#serializedheadingnode",children:(0,n.jsx)(i.code,{children:"SerializedHeadingNode"})})})]})})]}),"\n",(0,n.jsx)(i.h4,{id:"returns-14",children:"Returns"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"/lexical/docs/api/classes/lexical_rich_text.HeadingNode",children:(0,n.jsx)(i.code,{children:"HeadingNode"})})}),"\n",(0,n.jsx)(i.h4,{id:"overrides-12",children:"Overrides"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,n.jsx)(i.a,{href:"/lexical/docs/api/classes/lexical.ElementNode#importjson",children:"importJSON"})]}),"\n",(0,n.jsx)(i.h4,{id:"defined-in-14",children:"Defined in"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-rich-text/src/index.ts#L340",children:"packages/lexical-rich-text/src/index.ts:340"})})]})}function x(e={}){let{wrapper:i}={...(0,d.a)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},22840:function(e,i,l){l.d(i,{Z:()=>t,a:()=>r});var s=l(2784);let n={},d=s.createContext(n);function r(e){let i=s.useContext(d);return s.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function t(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),s.createElement(d.Provider,{value:i},e.children)}}}]);