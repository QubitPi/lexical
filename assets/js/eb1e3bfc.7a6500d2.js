"use strict";(self.webpackChunk_lexical_website=self.webpackChunk_lexical_website||[]).push([["1668"],{54502:function(e,n,i){i.r(n),i.d(n,{frontMatter:()=>s,default:()=>u,contentTitle:()=>o,assets:()=>c,toc:()=>r,metadata:()=>l});var l=JSON.parse('{"id":"packages/lexical-eslint-plugin","title":"@lexical/eslint-plugin","description":"This ESLint plugin enforces the Lexical $function convention.","source":"@site/docs/packages/lexical-eslint-plugin.md","sourceDirName":"packages","slug":"/packages/lexical-eslint-plugin","permalink":"/lexical/docs/packages/lexical-eslint-plugin","draft":false,"unlisted":false,"editUrl":"https://github.com/QubitPi/lexical/tree/main/packages/lexical-eslint-plugin/README.md","tags":[],"version":"current","frontMatter":{"custom_edit_url":"https://github.com/QubitPi/lexical/tree/main/packages/lexical-eslint-plugin/README.md"},"sidebar":"docs","previous":{"title":"@lexical/dragon","permalink":"/lexical/docs/packages/lexical-dragon"},"next":{"title":"@lexical/file","permalink":"/lexical/docs/packages/lexical-file"}}'),a=i(52322),t=i(22840);let s={custom_edit_url:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-eslint-plugin/README.md"},o="@lexical/eslint-plugin",c={},r=[{value:"Installation",id:"installation",level:2},{value:"Custom Configuration",id:"custom-configuration",level:3},{value:"Advanced configuration",id:"advanced-configuration",level:3},{value:"<code>isDollarFunction</code>",id:"isdollarfunction",level:4},{value:"<code>isIgnoredFunction</code>",id:"isignoredfunction",level:4},{value:"<code>isLexicalProvider</code>",id:"islexicalprovider",level:4},{value:"<code>isSafeDollarFunction</code>",id:"issafedollarfunction",level:4},{value:"Valid and Invalid Examples",id:"valid-and-invalid-examples",level:2},{value:"Valid Examples",id:"valid-examples",level:3},{value:"Invalid Examples",id:"invalid-examples",level:3},{value:"Rename autofix",id:"rename-autofix",level:4},{value:"Rename &amp; deprecate autofix",id:"rename--deprecate-autofix",level:4},{value:"Rename scope conflict",id:"rename-scope-conflict",level:4}];function d(e){let n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"lexicaleslint-plugin",children:(0,a.jsx)(n.code,{children:"@lexical/eslint-plugin"})})}),"\n",(0,a.jsxs)(n.p,{children:["This ESLint plugin enforces the ",(0,a.jsx)(n.a,{href:"https://lexical.dev/docs/intro#reading-and-updating-editor-state",children:"Lexical $function convention"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,a.jsx)(n.p,{children:"Assuming you already have ESLint installed, run:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sh",children:"npm install @lexical/eslint-plugin --save-dev\n"})}),"\n",(0,a.jsx)(n.p,{children:"Then extend the recommended eslint config:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'{\n  "extends": [\n    // ...\n    "plugin:@lexical/recommended"\n  ]\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"custom-configuration",children:"Custom Configuration"}),"\n",(0,a.jsx)(n.p,{children:"If you want more fine-grained configuration, you can instead add a snippet like this to your ESLint configuration file:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'{\n  "plugins": [\n    // ...\n    "@lexical"\n  ],\n  "rules": {\n    // ...\n    "@lexical/rules-of-lexical": "error"\n  }\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"advanced-configuration",children:"Advanced configuration"}),"\n",(0,a.jsxs)(n.p,{children:["Most of the heuristics in ",(0,a.jsx)(n.code,{children:"@lexical/rules-of-lexical"})," can be extended with\nadditional terms or patterns."]}),"\n",(0,a.jsx)(n.p,{children:'The code example below is shown using the default implementations for each\noption. When you configure these they are combined with the default\nimplementations using "OR", the default implementations can not be overridden.\nThese terms and patterns are only shown for reference and pasting this example\ninto your project is not useful.'}),"\n",(0,a.jsxs)(n.p,{children:["If the string begins with a ",(0,a.jsx)(n.code,{children:'"^"'})," or ",(0,a.jsx)(n.code,{children:'"("'})," then it is treated as a RegExp,\notherwise it will be an exact match. A string may also be used instead\nof an array of strings."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'{\n  "plugins": [\n    // ...\n    "@lexical"\n  ],\n  "rules": {\n    // ...\n    "@lexical/rules-of-lexical": [\n      "error",\n      {\n        "isDollarFunction": ["^\\\\$[a-z_]"],\n        "isIgnoredFunction": [],\n        "isLexicalProvider": [\n          "parseEditorState",\n          "read",\n          "registerCommand",\n          "registerNodeTransform",\n          "update"\n        ],\n        "isSafeDollarFunction": ["^\\\\$is"]\n      }\n    ]\n  }\n}\n'})}),"\n",(0,a.jsx)(n.h4,{id:"isdollarfunction",children:(0,a.jsx)(n.code,{children:"isDollarFunction"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.em,{children:"Base case"}),": ",(0,a.jsx)(n.code,{children:"/^\\$[a-z_]/"})]}),"\n",(0,a.jsxs)(n.p,{children:["This defines the $function convention, which by default is any function that\nstarts with a dollar sign followed by a lowercase latin letter. You may have a\nsecondary convention in your codebase, such as non-latin letters, or an\ninternal prefix that you want to consider (e.g. ",(0,a.jsx)(n.code,{children:'"^INTERNAL_\\\\$"'}),")."]}),"\n",(0,a.jsx)(n.h4,{id:"isignoredfunction",children:(0,a.jsx)(n.code,{children:"isIgnoredFunction"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.em,{children:"Base case"}),": None"]}),"\n",(0,a.jsx)(n.p,{children:"Functions that match these patterns are ignored from analysis, they may call\nLexical $functions but are not considered to be a dollar function themselves."}),"\n",(0,a.jsx)(n.h4,{id:"islexicalprovider",children:(0,a.jsx)(n.code,{children:"isLexicalProvider"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.em,{children:"Base case"}),": ",(0,a.jsx)(n.code,{children:"/^(parseEditorState|read|registerCommand|registerNodeTransform|update)$/"})]}),"\n",(0,a.jsx)(n.p,{children:"These are functions that allow their function argument to use Lexical\n$functions."}),"\n",(0,a.jsx)(n.h4,{id:"issafedollarfunction",children:(0,a.jsx)(n.code,{children:"isSafeDollarFunction"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.em,{children:"Base case"}),": ",(0,a.jsx)(n.code,{children:"/^\\$is/"})]}),"\n",(0,a.jsx)(n.p,{children:"These $functions are considered safe to call from anywhere, generally\nthese functions are runtime type checks that do not depend on any other\nstate."}),"\n",(0,a.jsx)(n.h2,{id:"valid-and-invalid-examples",children:"Valid and Invalid Examples"}),"\n",(0,a.jsx)(n.h3,{id:"valid-examples",children:"Valid Examples"}),"\n",(0,a.jsx)(n.p,{children:"$functions may be called by other $functions"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"function $namedCorrectly() {\n  return $getRoot();\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"$functions may be called in functions defined when calling the following\nmethods (the heuristic only considers the method name):"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"editor.update"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"editorState.read"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"editor.registerCommand"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"editor.registerNodeTransform"})}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"function validUsesEditorOrState(editor) {\n  editor.update(() => $getRoot());\n  editor.getLatestState().read(() => $getRoot());\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"$functions may be called from class methods"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"class CustomNode extends ElementNode {\n  appendText(string) {\n    this.appendChild($createTextNode(string));\n  }\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"invalid-examples",children:"Invalid Examples"}),"\n",(0,a.jsx)(n.h4,{id:"rename-autofix",children:"Rename autofix"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"function invalidFunction() {\n  return $getRoot();\n}\nfunction $callsInvalidFunction() {\n  return invalidFunction();\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.em,{children:"Autofix:"})," The function is renamed with a $ prefix. Any references to this\nname in this module are also always renamed."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"function $invalidFunction() {\n  return $getRoot();\n}\nfunction $callsInvalidFunction() {\n  return $invalidFunction();\n}\n"})}),"\n",(0,a.jsx)(n.h4,{id:"rename--deprecate-autofix",children:"Rename & deprecate autofix"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"export function exportedInvalidFunction() {\n  return $getRoot();\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.em,{children:"Autofix:"})," The exported function is renamed with a $ prefix. The previous name\nis also exported and marked deprecated, because automatic renaming of\nreferences to that name is limited to the module's scope."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"export function $exportedInvalidFunction() {\n  return $getRoot();\n}\n/** @deprecated renamed to {@link $exportedInvalidFunction} by @lexical/eslint-plugin rules-of-lexical */\nexport const exportedInvalidFunction = $exportedInvalidFunction;\n"})}),"\n",(0,a.jsx)(n.h4,{id:"rename-scope-conflict",children:"Rename scope conflict"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"import {$getRoot} from 'lexical';\nfunction InvalidComponent() {\n  const [editor] = useLexicalComposerContext();\n  const getRoot = useCallback(() => $getRoot(), []);\n  return (<button onClick={() => editor.update(() => getRoot())} />);\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.em,{children:"Autofix:"})," The function is renamed with a $ prefix and _ suffix since the suggested name was already in scope."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"import {$getRoot} from 'lexical';\nfunction InvalidComponent() {\n  const [editor] = useLexicalComposerContext();\n  const $getRoot_ = useCallback(() => $getRoot(), []);\n  return (<button onClick={() => editor.update(() => $getRoot_())} />);\n}\n"})})]})}function u(e={}){let{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},22840:function(e,n,i){i.d(n,{Z:()=>o,a:()=>s});var l=i(2784);let a={},t=l.createContext(a);function s(e){let n=l.useContext(t);return l.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),l.createElement(t.Provider,{value:n},e.children)}}}]);