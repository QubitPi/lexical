"use strict";(self.webpackChunk_lexical_website=self.webpackChunk_lexical_website||[]).push([["1620"],{1874:function(e,n,a){a.r(n),a.d(n,{frontMatter:()=>o,default:()=>h,contentTitle:()=>i,assets:()=>r,toc:()=>l,metadata:()=>t});var t=JSON.parse('{"id":"concepts/commands","title":"Commands","description":"Commands are a very powerful feature of Lexical that lets you register listeners for events like KEYENTERCOMMAND or KEYTABCOMMAND and contextually react to them wherever & however you\'d like.","source":"@site/docs/concepts/commands.md","sourceDirName":"concepts","slug":"/concepts/commands","permalink":"/docs/concepts/commands","draft":false,"unlisted":false,"editUrl":"https://github.com/QubitPi/lexical/tree/main/packages/lexical-website/docs/concepts/commands.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Node Transforms","permalink":"/docs/concepts/transforms"},"next":{"title":"Selection","permalink":"/docs/concepts/selection"}}'),s=a(52322),c=a(22840);let o={},i="Commands",r={},l=[{value:"<code>createCommand(...)</code>",id:"createcommand",level:2},{value:"<code>editor.dispatchCommand(...)</code>",id:"editordispatchcommand",level:2},{value:"<code>editor.registerCommand(...)</code>",id:"editorregistercommand",level:2}];function d(e){let n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,c.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"commands",children:"Commands"})}),"\n",(0,s.jsxs)(n.p,{children:["Commands are a very powerful feature of Lexical that lets you register listeners for events like ",(0,s.jsx)(n.code,{children:"KEY_ENTER_COMMAND"})," or ",(0,s.jsx)(n.code,{children:"KEY_TAB_COMMAND"})," and contextually react to them ",(0,s.jsx)(n.em,{children:"wherever"})," & ",(0,s.jsx)(n.em,{children:"however"})," you'd like."]}),"\n",(0,s.jsxs)(n.p,{children:["This pattern is useful for building ",(0,s.jsx)(n.a,{href:"https://github.com/facebook/lexical/blob/main/packages/lexical-playground/src/plugins/ToolbarPlugin/index.tsx",children:(0,s.jsx)(n.code,{children:"Toolbars"})})," or complex ",(0,s.jsx)(n.code,{children:"Plugins"})," and ",(0,s.jsx)(n.code,{children:"Nodes"})," such as the ",(0,s.jsx)(n.a,{href:"https://github.com/facebook/lexical/tree/main/packages/lexical-table",children:(0,s.jsx)(n.code,{children:"TablePlugin"})})," which require special handling for ",(0,s.jsx)(n.code,{children:"selection"}),", ",(0,s.jsx)(n.code,{children:"keyboard events"}),", and more."]}),"\n",(0,s.jsxs)(n.p,{children:["When registering a ",(0,s.jsx)(n.code,{children:"command"})," you supply a ",(0,s.jsx)(n.code,{children:"priority"})," and can return ",(0,s.jsx)(n.code,{children:"true"})," to mark it as \"handled\", which stops other listeners from receiving the event. If a command isn't handled explicitly by you, it's likely handled by default in the ",(0,s.jsx)(n.a,{href:"https://github.com/facebook/lexical/blob/main/packages/lexical-rich-text/src/index.ts",children:(0,s.jsx)(n.code,{children:"RichTextPlugin"})})," or the ",(0,s.jsx)(n.a,{href:"https://github.com/facebook/lexical/blob/main/packages/lexical-plain-text/src/index.ts",children:(0,s.jsx)(n.code,{children:"PlainTextPlugin"})}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"createcommand",children:(0,s.jsx)(n.code,{children:"createCommand(...)"})}),"\n",(0,s.jsxs)(n.p,{children:["You can view all of the existing commands in ",(0,s.jsx)(n.a,{href:"https://github.com/facebook/lexical/blob/main/packages/lexical/src/LexicalCommands.ts",children:(0,s.jsx)(n.code,{children:"LexicalCommands.ts"})}),", but if you need a custom command for your own use case check out the typed ",(0,s.jsx)(n.code,{children:"createCommand(...)"})," function."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const HELLO_WORLD_COMMAND: LexicalCommand<string> = createCommand();\n\neditor.dispatchCommand(HELLO_WORLD_COMMAND, 'Hello World!');\n\neditor.registerCommand(\n  HELLO_WORLD_COMMAND,\n  (payload: string) => {\n    console.log(payload); // Hello World!\n    return false;\n  },\n  COMMAND_PRIORITY_LOW,\n);\n"})}),"\n",(0,s.jsx)(n.h2,{id:"editordispatchcommand",children:(0,s.jsx)(n.code,{children:"editor.dispatchCommand(...)"})}),"\n",(0,s.jsxs)(n.p,{children:["Commands can be dispatched from anywhere you have access to the ",(0,s.jsx)(n.code,{children:"editor"})," such as a Toolbar Button, an event listener, or a Plugin, but most of the core commands are dispatched from ",(0,s.jsx)(n.a,{href:"https://github.com/facebook/lexical/blob/main/packages/lexical/src/LexicalEvents.ts",children:(0,s.jsx)(n.code,{children:"LexicalEvents.ts"})}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Calling ",(0,s.jsx)(n.code,{children:"dispatchCommand"})," will implicitly call ",(0,s.jsx)(n.code,{children:"editor.update"})," to trigger its command listeners if it was not called from inside ",(0,s.jsx)(n.code,{children:"editor.update"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"editor.dispatchCommand(command, payload);\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"payload"}),"s are typed via the ",(0,s.jsx)(n.code,{children:"createCommand(...)"})," API, but they're usually a DOM ",(0,s.jsx)(n.code,{children:"event"})," for commands dispatched from an event listener."]}),"\n",(0,s.jsxs)(n.p,{children:["Here are some real examples from ",(0,s.jsx)(n.a,{href:"https://github.com/facebook/lexical/blob/main/packages/lexical/src/LexicalEvents.ts",children:(0,s.jsx)(n.code,{children:"LexicalEvents.ts"})}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"editor.dispatchCommand(KEY_ARROW_LEFT_COMMAND, event);\n// ...\neditor.dispatchCommand(FORMAT_TEXT_COMMAND, 'italic');\n"})}),"\n",(0,s.jsxs)(n.p,{children:["And another example from the ",(0,s.jsx)(n.a,{href:"https://github.com/facebook/lexical/blob/main/packages/lexical-playground/src/plugins/ToolbarPlugin/index.tsx",children:(0,s.jsx)(n.code,{children:"ToolbarPlugin"})})," in our Playground."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const formatBulletList = () => {\n  editor.dispatchCommand(INSERT_UNORDERED_LIST_COMMAND);\n};\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Which is later handled in ",(0,s.jsx)(n.a,{href:"https://github.com/facebook/lexical/blob/main/packages/lexical-list/src/index.ts",children:(0,s.jsx)(n.code,{children:"registerList"})})," to insert the list into the editor."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"editor.registerCommand(\n  INSERT_UNORDERED_LIST_COMMAND,\n  () => {\n    insertList(editor, 'ul');\n    return true;\n  },\n  COMMAND_PRIORITY_LOW,\n);\n"})}),"\n",(0,s.jsx)(n.h2,{id:"editorregistercommand",children:(0,s.jsx)(n.code,{children:"editor.registerCommand(...)"})}),"\n",(0,s.jsxs)(n.p,{children:["You can register a command from anywhere you have access to the ",(0,s.jsx)(n.code,{children:"editor"})," object, but it's important that you remember to clean up the listener with its remove listener callback when it's no longer needed."]}),"\n",(0,s.jsxs)(n.p,{children:["The command listener will always be called from an ",(0,s.jsx)(n.code,{children:"editor.update"}),", so you may use dollar functions. You should not use\n",(0,s.jsx)(n.code,{children:"editor.update"})," (and ",(0,s.jsx)(n.em,{children:"never"})," call ",(0,s.jsx)(n.code,{children:"editor.read"}),") synchronously from within a command listener. It is safe to call\n",(0,s.jsx)(n.code,{children:"editor.getEditorState().read"})," if you need to read the previous state after updates have already been made."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const removeListener = editor.registerCommand(\n  COMMAND,\n  (payload) => boolean, // Return true to stop propagation.\n  priority,\n);\n// ...\nremoveListener(); // Cleans up the listener.\n"})}),"\n",(0,s.jsxs)(n.p,{children:["A common pattern for easy clean-up is returning a ",(0,s.jsx)(n.code,{children:"registerCommand"})," call within a React ",(0,s.jsx)(n.code,{children:"useEffect"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"useEffect(() => {\n  return editor.registerCommand(\n    TOGGLE_LINK_COMMAND,\n    (payload) => {\n      const url: string | null = payload;\n      setLink(url);\n      return true;\n    },\n    COMMAND_PRIORITY_EDITOR,\n  );\n}, [editor]);\n"})}),"\n",(0,s.jsxs)(n.p,{children:["And as seen above and below, ",(0,s.jsx)(n.code,{children:"registerCommand"}),"'s callback can return ",(0,s.jsx)(n.code,{children:"true"})," to signal to the other listeners that the command has been handled and propagation will be stopped."]}),"\n",(0,s.jsxs)(n.p,{children:["Here's a simplified example of handling a ",(0,s.jsx)(n.code,{children:"KEY_TAB_COMMAND"})," from the ",(0,s.jsx)(n.a,{href:"https://github.com/facebook/lexical/blob/main/packages/lexical-react/src/LexicalTabIndentationPlugin.tsx",children:(0,s.jsx)(n.code,{children:"TabIndentationPlugin"})}),", which is used to dispatch a ",(0,s.jsx)(n.code,{children:"OUTDENT_CONTENT_COMMAND"})," or ",(0,s.jsx)(n.code,{children:"INDENT_CONTENT_COMMAND"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"editor.registerCommand(\n  KEY_TAB_COMMAND,\n  (payload) => {\n    const event: KeyboardEvent = payload;\n    event.preventDefault();\n    return editor.dispatchCommand(\n      event.shiftKey ? OUTDENT_CONTENT_COMMAND : INDENT_CONTENT_COMMAND,\n    );\n  },\n  COMMAND_PRIORITY_EDITOR,\n);\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Note that the same ",(0,s.jsx)(n.code,{children:"KEY_TAB_COMMAND"})," command is registered by ",(0,s.jsx)(n.a,{href:"https://github.com/facebook/lexical/blob/main/packages/lexical-table/src/LexicalTableSelectionHelpers.ts",children:(0,s.jsx)(n.code,{children:"LexicalTableSelectionHelpers.ts"})}),", which handles moving focus to the next or previous cell within a ",(0,s.jsx)(n.code,{children:"TableNode"}),", but the priority is the highest it can be (",(0,s.jsx)(n.code,{children:"COMMAND_PRIORITY_CRITICAL"}),") because this behavior is very important."]})]})}function h(e={}){let{wrapper:n}={...(0,c.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},22840:function(e,n,a){a.d(n,{Z:()=>i,a:()=>o});var t=a(2784);let s={},c=t.createContext(s);function o(e){let n=t.useContext(c);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(c.Provider,{value:n},e.children)}}}]);