"use strict";(self.webpackChunk_lexical_website=self.webpackChunk_lexical_website||[]).push([[9150],{876:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>c});var n=a(2784);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function d(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var p=n.createContext({}),o=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},s=function(e){var t=o(e.components);return n.createElement(p.Provider,{value:t},e.children)},m="mdxType",k={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},N=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,i=e.originalType,p=e.parentName,s=d(e,["components","mdxType","originalType","parentName"]),m=o(a),N=l,c=m["".concat(p,".").concat(N)]||m[N]||k[N]||i;return a?n.createElement(c,r(r({ref:t},s),{},{components:a})):n.createElement(c,r({ref:t},s))}));function c(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=a.length,r=new Array(i);r[0]=N;var d={};for(var p in t)hasOwnProperty.call(t,p)&&(d[p]=t[p]);d.originalType=e,d[m]="string"==typeof e?e:l,r[1]=d;for(var o=2;o<i;o++)r[o]=a[o];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}N.displayName="MDXCreateElement"},733:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>k,frontMatter:()=>i,metadata:()=>d,toc:()=>o});var n=a(7896),l=(a(2784),a(876));const i={id:"lexical_utils",title:"Module: @lexical/utils",sidebar_label:"@lexical/utils",sidebar_position:0,custom_edit_url:null},r=void 0,d={unversionedId:"api/modules/lexical_utils",id:"api/modules/lexical_utils",title:"Module: @lexical/utils",description:"References",source:"@site/docs/api/modules/lexical_utils.md",sourceDirName:"api/modules",slug:"/api/modules/lexical_utils",permalink:"/lexical/docs/api/modules/lexical_utils",draft:!1,editUrl:null,tags:[],version:"current",sidebarPosition:0,frontMatter:{id:"lexical_utils",title:"Module: @lexical/utils",sidebar_label:"@lexical/utils",sidebar_position:0,custom_edit_url:null},sidebar:"api",previous:{title:"@lexical/text",permalink:"/lexical/docs/api/modules/lexical_text"},next:{title:"@lexical/yjs",permalink:"/lexical/docs/api/modules/lexical_yjs"}},p={},o=[{value:"References",id:"references",level:2},{value:"$splitNode",id:"splitnode",level:3},{value:"isHTMLAnchorElement",id:"ishtmlanchorelement",level:3},{value:"isHTMLElement",id:"ishtmlelement",level:3},{value:"Type Aliases",id:"type-aliases",level:2},{value:"DFSNode",id:"dfsnode",level:3},{value:"Defined in",id:"defined-in",level:4},{value:"DOMNodeToLexicalConversion",id:"domnodetolexicalconversion",level:3},{value:"Type declaration",id:"type-declaration",level:4},{value:"Parameters",id:"parameters",level:5},{value:"Returns",id:"returns",level:5},{value:"Defined in",id:"defined-in-1",level:4},{value:"DOMNodeToLexicalConversionMap",id:"domnodetolexicalconversionmap",level:3},{value:"Defined in",id:"defined-in-2",level:4},{value:"Functions",id:"functions",level:2},{value:"$dfs",id:"dfs",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Defined in",id:"defined-in-3",level:4},{value:"$filter",id:"filter",level:3},{value:"Type parameters",id:"type-parameters",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-2",level:4},{value:"Defined in",id:"defined-in-4",level:4},{value:"$findMatchingParent",id:"findmatchingparent",level:3},{value:"Type parameters",id:"type-parameters-1",level:4},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-3",level:4},{value:"Defined in",id:"defined-in-5",level:4},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-4",level:4},{value:"Defined in",id:"defined-in-6",level:4},{value:"$getNearestBlockElementAncestorOrThrow",id:"getnearestblockelementancestororthrow",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-5",level:4},{value:"Defined in",id:"defined-in-7",level:4},{value:"$getNearestNodeOfType",id:"getnearestnodeoftype",level:3},{value:"Type parameters",id:"type-parameters-2",level:4},{value:"Parameters",id:"parameters-6",level:4},{value:"Returns",id:"returns-6",level:4},{value:"Defined in",id:"defined-in-8",level:4},{value:"$insertFirst",id:"insertfirst",level:3},{value:"Parameters",id:"parameters-7",level:4},{value:"Returns",id:"returns-7",level:4},{value:"Defined in",id:"defined-in-9",level:4},{value:"$insertNodeToNearestRoot",id:"insertnodetonearestroot",level:3},{value:"Type parameters",id:"type-parameters-3",level:4},{value:"Parameters",id:"parameters-8",level:4},{value:"Returns",id:"returns-8",level:4},{value:"Defined in",id:"defined-in-10",level:4},{value:"$restoreEditorState",id:"restoreeditorstate",level:3},{value:"Parameters",id:"parameters-9",level:4},{value:"Returns",id:"returns-9",level:4},{value:"Defined in",id:"defined-in-11",level:4},{value:"$wrapNodeInElement",id:"wrapnodeinelement",level:3},{value:"Parameters",id:"parameters-10",level:4},{value:"Returns",id:"returns-10",level:4},{value:"Defined in",id:"defined-in-12",level:4},{value:"addClassNamesToElement",id:"addclassnamestoelement",level:3},{value:"Parameters",id:"parameters-11",level:4},{value:"Returns",id:"returns-11",level:4},{value:"Defined in",id:"defined-in-13",level:4},{value:"isMimeType",id:"ismimetype",level:3},{value:"Parameters",id:"parameters-12",level:4},{value:"Returns",id:"returns-12",level:4},{value:"Defined in",id:"defined-in-14",level:4},{value:"markSelection",id:"markselection",level:3},{value:"Parameters",id:"parameters-13",level:4},{value:"Returns",id:"returns-13",level:4},{value:"Returns",id:"returns-14",level:5},{value:"Defined in",id:"defined-in-15",level:4},{value:"mediaFileReader",id:"mediafilereader",level:3},{value:"Parameters",id:"parameters-14",level:4},{value:"Returns",id:"returns-15",level:4},{value:"Defined in",id:"defined-in-16",level:4},{value:"mergeRegister",id:"mergeregister",level:3},{value:"Parameters",id:"parameters-15",level:4},{value:"Returns",id:"returns-16",level:4},{value:"Returns",id:"returns-17",level:5},{value:"Defined in",id:"defined-in-17",level:4},{value:"objectKlassEquals",id:"objectklassequals",level:3},{value:"Type parameters",id:"type-parameters-4",level:4},{value:"Parameters",id:"parameters-16",level:4},{value:"Returns",id:"returns-18",level:4},{value:"Defined in",id:"defined-in-18",level:4},{value:"positionNodeOnRange",id:"positionnodeonrange",level:3},{value:"Parameters",id:"parameters-17",level:4},{value:"Returns",id:"returns-19",level:4},{value:"Returns",id:"returns-20",level:5},{value:"Defined in",id:"defined-in-19",level:4},{value:"registerNestedElementResolver",id:"registernestedelementresolver",level:3},{value:"Type parameters",id:"type-parameters-5",level:4},{value:"Parameters",id:"parameters-18",level:4},{value:"Returns",id:"returns-21",level:4},{value:"Returns",id:"returns-22",level:5},{value:"Defined in",id:"defined-in-20",level:4},{value:"removeClassNamesFromElement",id:"removeclassnamesfromelement",level:3},{value:"Parameters",id:"parameters-19",level:4},{value:"Returns",id:"returns-23",level:4},{value:"Defined in",id:"defined-in-21",level:4}],s={toc:o},m="wrapper";function k(e){let{components:t,...a}=e;return(0,l.kt)(m,(0,n.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"references"},"References"),(0,l.kt)("h3",{id:"splitnode"},"$splitNode"),(0,l.kt)("p",null,"Re-exports ",(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/modules/lexical#$splitnode"},"$splitNode")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"ishtmlanchorelement"},"isHTMLAnchorElement"),(0,l.kt)("p",null,"Re-exports ",(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/modules/lexical#ishtmlanchorelement"},"isHTMLAnchorElement")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"ishtmlelement"},"isHTMLElement"),(0,l.kt)("p",null,"Re-exports ",(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/modules/lexical#ishtmlelement"},"isHTMLElement")),(0,l.kt)("h2",{id:"type-aliases"},"Type Aliases"),(0,l.kt)("h3",{id:"dfsnode"},"DFSNode"),(0,l.kt)("p",null,"\u01ac ",(0,l.kt)("strong",{parentName:"p"},"DFSNode"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"Readonly"),"<{ ",(0,l.kt)("inlineCode",{parentName:"p"},"depth"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"number")," ; ",(0,l.kt)("inlineCode",{parentName:"p"},"node"),": ",(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.LexicalNode"},(0,l.kt)("inlineCode",{parentName:"a"},"LexicalNode")),"  }",">"),(0,l.kt)("h4",{id:"defined-in"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/QubitPi/lexical/blob/eb83ce9/packages/lexical-utils/src/index.ts#L35"},"lexical-utils/src/index.ts:35")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"domnodetolexicalconversion"},"DOMNodeToLexicalConversion"),(0,l.kt)("p",null,"\u01ac ",(0,l.kt)("strong",{parentName:"p"},"DOMNodeToLexicalConversion"),": (",(0,l.kt)("inlineCode",{parentName:"p"},"element"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"Node"),") => ",(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.LexicalNode"},(0,l.kt)("inlineCode",{parentName:"a"},"LexicalNode"))),(0,l.kt)("h4",{id:"type-declaration"},"Type declaration"),(0,l.kt)("p",null,"\u25b8 (",(0,l.kt)("inlineCode",{parentName:"p"},"element"),"): ",(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.LexicalNode"},(0,l.kt)("inlineCode",{parentName:"a"},"LexicalNode"))),(0,l.kt)("h5",{id:"parameters"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"element")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"Node"))))),(0,l.kt)("h5",{id:"returns"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.LexicalNode"},(0,l.kt)("inlineCode",{parentName:"a"},"LexicalNode"))),(0,l.kt)("h4",{id:"defined-in-1"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/QubitPi/lexical/blob/eb83ce9/packages/lexical-utils/src/index.ts#L249"},"lexical-utils/src/index.ts:249")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"domnodetolexicalconversionmap"},"DOMNodeToLexicalConversionMap"),(0,l.kt)("p",null,"\u01ac ",(0,l.kt)("strong",{parentName:"p"},"DOMNodeToLexicalConversionMap"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"Record"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/modules/lexical_utils#domnodetolexicalconversion"},(0,l.kt)("inlineCode",{parentName:"a"},"DOMNodeToLexicalConversion")),">"),(0,l.kt)("h4",{id:"defined-in-2"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/QubitPi/lexical/blob/eb83ce9/packages/lexical-utils/src/index.ts#L251"},"lexical-utils/src/index.ts:251")),(0,l.kt)("h2",{id:"functions"},"Functions"),(0,l.kt)("h3",{id:"dfs"},"$dfs"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"$dfs"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"startingNode?"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"endingNode?"),"): ",(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/modules/lexical_utils#dfsnode"},(0,l.kt)("inlineCode",{parentName:"a"},"DFSNode")),"[]"),(0,l.kt)("p",null,'"Depth-First Search" starts at the root/top node of a tree and goes as far as it can down a branch end\nbefore backtracking and finding a new path. Consider solving a maze by hugging either wall, moving down a\nbranch until you hit a dead-end (leaf) and backtracking to find the nearest branching path and repeat.\nIt will then return all the nodes found in the search in an array of objects.'),(0,l.kt)("h4",{id:"parameters-1"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"startingNode?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/classes/lexical.LexicalNode"},(0,l.kt)("inlineCode",{parentName:"a"},"LexicalNode"))),(0,l.kt)("td",{parentName:"tr",align:"left"},"The node to start the search, if ommitted, it will start at the root node.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"endingNode?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/classes/lexical.LexicalNode"},(0,l.kt)("inlineCode",{parentName:"a"},"LexicalNode"))),(0,l.kt)("td",{parentName:"tr",align:"left"},"The node to end the search, if ommitted, it will find all descendants of the startingNode.")))),(0,l.kt)("h4",{id:"returns-1"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/modules/lexical_utils#dfsnode"},(0,l.kt)("inlineCode",{parentName:"a"},"DFSNode")),"[]"),(0,l.kt)("p",null,"An array of objects of all the nodes found by the search, including their depth into the tree.\n{depth: number, node: LexicalNode} It will always return at least 1 node (the ending node) so long as it exists"),(0,l.kt)("h4",{id:"defined-in-3"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/QubitPi/lexical/blob/eb83ce9/packages/lexical-utils/src/index.ts#L151"},"lexical-utils/src/index.ts:151")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"filter"},"$filter"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"$filter"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,l.kt)("inlineCode",{parentName:"p"},"nodes"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"filterFn"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"T"),"[]"),(0,l.kt)("p",null,"Filter the nodes"),(0,l.kt)("h4",{id:"type-parameters"},"Type parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"T"))))),(0,l.kt)("h4",{id:"parameters-2"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"nodes")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/classes/lexical.LexicalNode"},(0,l.kt)("inlineCode",{parentName:"a"},"LexicalNode")),"[]"),(0,l.kt)("td",{parentName:"tr",align:"left"},"Array of nodes that needs to be filtered")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"filterFn")),(0,l.kt)("td",{parentName:"tr",align:"left"},"(",(0,l.kt)("inlineCode",{parentName:"td"},"node"),": ",(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/classes/lexical.LexicalNode"},(0,l.kt)("inlineCode",{parentName:"a"},"LexicalNode")),") => ",(0,l.kt)("inlineCode",{parentName:"td"},"null")," ","|"," ",(0,l.kt)("inlineCode",{parentName:"td"},"T")),(0,l.kt)("td",{parentName:"tr",align:"left"},"A filter function that returns node if the current node satisfies the condition otherwise null")))),(0,l.kt)("h4",{id:"returns-2"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"T"),"[]"),(0,l.kt)("p",null,"Array of filtered nodes"),(0,l.kt)("h4",{id:"defined-in-4"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/QubitPi/lexical/blob/eb83ce9/packages/lexical-utils/src/index.ts#L503"},"lexical-utils/src/index.ts:503")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"findmatchingparent"},"$findMatchingParent"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"$findMatchingParent"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,l.kt)("inlineCode",{parentName:"p"},"startingNode"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"findFn"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"null")," ","|"," ",(0,l.kt)("inlineCode",{parentName:"p"},"T")),(0,l.kt)("p",null,"Starts with a node and moves up the tree (toward the root node) to find a matching node based on\nthe search parameters of the findFn. (Consider JavaScripts' .find() function where a testing function must be\npassed as an argument. eg. if( (node) => node.__type === 'div') ) return true; otherwise return false"),(0,l.kt)("h4",{id:"type-parameters-1"},"Type parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"T")),(0,l.kt)("td",{parentName:"tr",align:"left"},"extends ",(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/classes/lexical.LexicalNode"},(0,l.kt)("inlineCode",{parentName:"a"},"LexicalNode")))))),(0,l.kt)("h4",{id:"parameters-3"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"startingNode")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/classes/lexical.LexicalNode"},(0,l.kt)("inlineCode",{parentName:"a"},"LexicalNode"))),(0,l.kt)("td",{parentName:"tr",align:"left"},"The node where the search starts.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"findFn")),(0,l.kt)("td",{parentName:"tr",align:"left"},"(",(0,l.kt)("inlineCode",{parentName:"td"},"node"),": ",(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/classes/lexical.LexicalNode"},(0,l.kt)("inlineCode",{parentName:"a"},"LexicalNode")),") => node is T"),(0,l.kt)("td",{parentName:"tr",align:"left"},"A testing function that returns true if the current node satisfies the testing parameters.")))),(0,l.kt)("h4",{id:"returns-3"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"null")," ","|"," ",(0,l.kt)("inlineCode",{parentName:"p"},"T")),(0,l.kt)("p",null,"A parent node that matches the findFn parameters, or null if one wasn't found."),(0,l.kt)("h4",{id:"defined-in-5"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/QubitPi/lexical/blob/eb83ce9/packages/lexical-utils/src/index.ts#L265"},"lexical-utils/src/index.ts:265")),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"$findMatchingParent"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"startingNode"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"findFn"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"null")," ","|"," ",(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.LexicalNode"},(0,l.kt)("inlineCode",{parentName:"a"},"LexicalNode"))),(0,l.kt)("p",null,"Starts with a node and moves up the tree (toward the root node) to find a matching node based on\nthe search parameters of the findFn. (Consider JavaScripts' .find() function where a testing function must be\npassed as an argument. eg. if( (node) => node.__type === 'div') ) return true; otherwise return false"),(0,l.kt)("h4",{id:"parameters-4"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"startingNode")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/classes/lexical.LexicalNode"},(0,l.kt)("inlineCode",{parentName:"a"},"LexicalNode"))),(0,l.kt)("td",{parentName:"tr",align:"left"},"The node where the search starts.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"findFn")),(0,l.kt)("td",{parentName:"tr",align:"left"},"(",(0,l.kt)("inlineCode",{parentName:"td"},"node"),": ",(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/classes/lexical.LexicalNode"},(0,l.kt)("inlineCode",{parentName:"a"},"LexicalNode")),") => ",(0,l.kt)("inlineCode",{parentName:"td"},"boolean")),(0,l.kt)("td",{parentName:"tr",align:"left"},"A testing function that returns true if the current node satisfies the testing parameters.")))),(0,l.kt)("h4",{id:"returns-4"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"null")," ","|"," ",(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.LexicalNode"},(0,l.kt)("inlineCode",{parentName:"a"},"LexicalNode"))),(0,l.kt)("p",null,"A parent node that matches the findFn parameters, or null if one wasn't found."),(0,l.kt)("h4",{id:"defined-in-6"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/QubitPi/lexical/blob/eb83ce9/packages/lexical-utils/src/index.ts#L269"},"lexical-utils/src/index.ts:269")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"getnearestblockelementancestororthrow"},"$getNearestBlockElementAncestorOrThrow"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"$getNearestBlockElementAncestorOrThrow"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"startNode"),"): ",(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.ElementNode"},(0,l.kt)("inlineCode",{parentName:"a"},"ElementNode"))),(0,l.kt)("p",null,"Returns the element node of the nearest ancestor, otherwise throws an error."),(0,l.kt)("h4",{id:"parameters-5"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"startNode")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/classes/lexical.LexicalNode"},(0,l.kt)("inlineCode",{parentName:"a"},"LexicalNode"))),(0,l.kt)("td",{parentName:"tr",align:"left"},"The starting node of the search")))),(0,l.kt)("h4",{id:"returns-5"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.ElementNode"},(0,l.kt)("inlineCode",{parentName:"a"},"ElementNode"))),(0,l.kt)("p",null,"The ancestor node found"),(0,l.kt)("h4",{id:"defined-in-7"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/QubitPi/lexical/blob/eb83ce9/packages/lexical-utils/src/index.ts#L232"},"lexical-utils/src/index.ts:232")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"getnearestnodeoftype"},"$getNearestNodeOfType"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"$getNearestNodeOfType"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,l.kt)("inlineCode",{parentName:"p"},"node"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"klass"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"T")," ","|"," ",(0,l.kt)("inlineCode",{parentName:"p"},"null")),(0,l.kt)("p",null,"Takes a node and traverses up its ancestors (toward the root node)\nin order to find a specific type of node."),(0,l.kt)("h4",{id:"type-parameters-2"},"Type parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"T")),(0,l.kt)("td",{parentName:"tr",align:"left"},"extends ",(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/classes/lexical.ElementNode"},(0,l.kt)("inlineCode",{parentName:"a"},"ElementNode")))))),(0,l.kt)("h4",{id:"parameters-6"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"node")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/classes/lexical.LexicalNode"},(0,l.kt)("inlineCode",{parentName:"a"},"LexicalNode"))),(0,l.kt)("td",{parentName:"tr",align:"left"},"the node to begin searching.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"klass")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/modules/lexical#klass"},(0,l.kt)("inlineCode",{parentName:"a"},"Klass")),"<",(0,l.kt)("inlineCode",{parentName:"td"},"T"),">"),(0,l.kt)("td",{parentName:"tr",align:"left"},"an instance of the type of node to look for.")))),(0,l.kt)("h4",{id:"returns-6"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"T")," ","|"," ",(0,l.kt)("inlineCode",{parentName:"p"},"null")),(0,l.kt)("p",null,"the node of type klass that was passed, or null if none exist."),(0,l.kt)("h4",{id:"defined-in-8"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/QubitPi/lexical/blob/eb83ce9/packages/lexical-utils/src/index.ts#L210"},"lexical-utils/src/index.ts:210")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"insertfirst"},"$insertFirst"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"$insertFirst"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"parent"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"node"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("p",null,"Appends the node before the first child of the parent node"),(0,l.kt)("h4",{id:"parameters-7"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"parent")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/classes/lexical.ElementNode"},(0,l.kt)("inlineCode",{parentName:"a"},"ElementNode"))),(0,l.kt)("td",{parentName:"tr",align:"left"},"A parent node")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"node")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/classes/lexical.LexicalNode"},(0,l.kt)("inlineCode",{parentName:"a"},"LexicalNode"))),(0,l.kt)("td",{parentName:"tr",align:"left"},"Node that needs to be appended")))),(0,l.kt)("h4",{id:"returns-7"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("h4",{id:"defined-in-9"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/QubitPi/lexical/blob/eb83ce9/packages/lexical-utils/src/index.ts#L521"},"lexical-utils/src/index.ts:521")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"insertnodetonearestroot"},"$insertNodeToNearestRoot"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"$insertNodeToNearestRoot"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,l.kt)("inlineCode",{parentName:"p"},"node"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"T")),(0,l.kt)("p",null,"If the selected insertion area is the root/shadow root node (see ",(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/modules/lexical#$isrootorshadowroot"},"$isRootOrShadowRoot"),"),\nthe node will be appended there, otherwise, it will be inserted before the insertion area.\nIf there is no selection where the node is to be inserted, it will be appended after any current nodes\nwithin the tree, as a child of the root node. A paragraph node will then be added after the inserted node and selected."),(0,l.kt)("h4",{id:"type-parameters-3"},"Type parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"T")),(0,l.kt)("td",{parentName:"tr",align:"left"},"extends ",(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/classes/lexical.LexicalNode"},(0,l.kt)("inlineCode",{parentName:"a"},"LexicalNode")))))),(0,l.kt)("h4",{id:"parameters-8"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"node")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"T")),(0,l.kt)("td",{parentName:"tr",align:"left"},"The node to be inserted")))),(0,l.kt)("h4",{id:"returns-8"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"T")),(0,l.kt)("p",null,"The node after its insertion"),(0,l.kt)("h4",{id:"defined-in-10"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/QubitPi/lexical/blob/eb83ce9/packages/lexical-utils/src/index.ts#L414"},"lexical-utils/src/index.ts:414")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"restoreeditorstate"},"$restoreEditorState"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"$restoreEditorState"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"editor"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"editorState"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("p",null,"Clones the editor and marks it as dirty to be reconciled. If there was a selection,\nit would be set back to its previous state, or null otherwise."),(0,l.kt)("h4",{id:"parameters-9"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"editor")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/classes/lexical.LexicalEditor"},(0,l.kt)("inlineCode",{parentName:"a"},"LexicalEditor"))),(0,l.kt)("td",{parentName:"tr",align:"left"},"The lexical editor")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"editorState")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/classes/lexical.EditorState"},(0,l.kt)("inlineCode",{parentName:"a"},"EditorState"))),(0,l.kt)("td",{parentName:"tr",align:"left"},"The editor's state")))),(0,l.kt)("h4",{id:"returns-9"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("h4",{id:"defined-in-11"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/QubitPi/lexical/blob/eb83ce9/packages/lexical-utils/src/index.ts#L380"},"lexical-utils/src/index.ts:380")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"wrapnodeinelement"},"$wrapNodeInElement"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"$wrapNodeInElement"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"node"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"createElementNode"),"): ",(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.ElementNode"},(0,l.kt)("inlineCode",{parentName:"a"},"ElementNode"))),(0,l.kt)("p",null,"Wraps the node into another node created from a createElementNode function, eg. $createParagraphNode"),(0,l.kt)("h4",{id:"parameters-10"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"node")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/classes/lexical.LexicalNode"},(0,l.kt)("inlineCode",{parentName:"a"},"LexicalNode"))),(0,l.kt)("td",{parentName:"tr",align:"left"},"Node to be wrapped.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"createElementNode")),(0,l.kt)("td",{parentName:"tr",align:"left"},"() => ",(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/classes/lexical.ElementNode"},(0,l.kt)("inlineCode",{parentName:"a"},"ElementNode"))),(0,l.kt)("td",{parentName:"tr",align:"left"},"Creates a new lexical element to wrap the to-be-wrapped node and returns it.")))),(0,l.kt)("h4",{id:"returns-10"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.ElementNode"},(0,l.kt)("inlineCode",{parentName:"a"},"ElementNode"))),(0,l.kt)("p",null,"A new lexical element with the previous node appended within (as a child, including its children)."),(0,l.kt)("h4",{id:"defined-in-12"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/QubitPi/lexical/blob/eb83ce9/packages/lexical-utils/src/index.ts#L469"},"lexical-utils/src/index.ts:469")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"addclassnamestoelement"},"addClassNamesToElement"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"addClassNamesToElement"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"element"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"...classNames"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("p",null,"Takes an HTML element and adds the classNames passed within an array,\nignoring any non-string types. A space can be used to add multiple classes\neg. addClassNamesToElement(element, ","['element-inner active', true, null]",")\nwill add both 'element-inner' and 'active' as classes to that element."),(0,l.kt)("h4",{id:"parameters-11"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"element")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"HTMLElement")),(0,l.kt)("td",{parentName:"tr",align:"left"},"The element in which the classes are added")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"...classNames")),(0,l.kt)("td",{parentName:"tr",align:"left"},"(",(0,l.kt)("inlineCode",{parentName:"td"},"undefined")," ","|"," ",(0,l.kt)("inlineCode",{parentName:"td"},"null")," ","|"," ",(0,l.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,l.kt)("inlineCode",{parentName:"td"},"boolean"),")[]"),(0,l.kt)("td",{parentName:"tr",align:"left"},"An array defining the class names to add to the element")))),(0,l.kt)("h4",{id:"returns-11"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("h4",{id:"defined-in-13"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/QubitPi/lexical/blob/eb83ce9/packages/lexical-utils/src/index.ts#L48"},"lexical-utils/src/index.ts:48")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"ismimetype"},"isMimeType"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"isMimeType"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"file"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"acceptableMimeTypes"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"Returns true if the file type matches the types passed within the acceptableMimeTypes array, false otherwise.\nThe types passed must be strings and are CASE-SENSITIVE.\neg. if file is of type 'text' and acceptableMimeTypes = ","['TEXT', 'IMAGE']"," the function will return false."),(0,l.kt)("h4",{id:"parameters-12"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"file")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"File")),(0,l.kt)("td",{parentName:"tr",align:"left"},"The file you want to type check.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"acceptableMimeTypes")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"string"),"[]"),(0,l.kt)("td",{parentName:"tr",align:"left"},"An array of strings of types which the file is checked against.")))),(0,l.kt)("h4",{id:"returns-12"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"true if the file is an acceptable mime type, false otherwise."),(0,l.kt)("h4",{id:"defined-in-14"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/QubitPi/lexical/blob/eb83ce9/packages/lexical-utils/src/index.ts#L87"},"lexical-utils/src/index.ts:87")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"markselection"},"markSelection"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"markSelection"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"editor"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"onReposition?"),"): () => ",(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("h4",{id:"parameters-13"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"editor")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/classes/lexical.LexicalEditor"},(0,l.kt)("inlineCode",{parentName:"a"},"LexicalEditor")))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"onReposition?")),(0,l.kt)("td",{parentName:"tr",align:"left"},"(",(0,l.kt)("inlineCode",{parentName:"td"},"node"),": ",(0,l.kt)("inlineCode",{parentName:"td"},"HTMLElement"),"[]) => ",(0,l.kt)("inlineCode",{parentName:"td"},"void"))))),(0,l.kt)("h4",{id:"returns-13"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"fn")),(0,l.kt)("p",null,"\u25b8 (): ",(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("h5",{id:"returns-14"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("h4",{id:"defined-in-15"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/QubitPi/lexical/blob/eb83ce9/packages/lexical-utils/src/markSelection.ts#L23"},"lexical-utils/src/markSelection.ts:23")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"mediafilereader"},"mediaFileReader"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"mediaFileReader"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"files"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"acceptableMimeTypes"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"Promise"),"<{ ",(0,l.kt)("inlineCode",{parentName:"p"},"file"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"File")," ; ",(0,l.kt)("inlineCode",{parentName:"p"},"result"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"string"),"  }[]",">"),(0,l.kt)("p",null,"Lexical File Reader with:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"MIME type support"),(0,l.kt)("li",{parentName:"ol"},"batched results (HistoryPlugin compatibility)"),(0,l.kt)("li",{parentName:"ol"},"Order aware (respects the order when multiple Files are passed)")),(0,l.kt)("p",null,"const filesResult = await mediaFileReader(files, ","['image/']",");\nfilesResult.forEach(file => editor.dispatchCommand('INSERT_IMAGE', {\nsrc: file.result,\n}));"),(0,l.kt)("h4",{id:"parameters-14"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"files")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"File"),"[]")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"acceptableMimeTypes")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"string"),"[]")))),(0,l.kt)("h4",{id:"returns-15"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Promise"),"<{ ",(0,l.kt)("inlineCode",{parentName:"p"},"file"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"File")," ; ",(0,l.kt)("inlineCode",{parentName:"p"},"result"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"string"),"  }[]",">"),(0,l.kt)("h4",{id:"defined-in-16"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/QubitPi/lexical/blob/eb83ce9/packages/lexical-utils/src/index.ts#L110"},"lexical-utils/src/index.ts:110")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"mergeregister"},"mergeRegister"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"mergeRegister"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"...func"),"): () => ",(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("p",null,"Returns a function that will execute all functions passed when called. It is generally used\nto register multiple lexical listeners and then tear them down with a single function call, such\nas React's useEffect hook."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"useEffect(() => {\n  return mergeRegister(\n    editor.registerCommand(...registerCommand1 logic),\n    editor.registerCommand(...registerCommand2 logic),\n    editor.registerCommand(...registerCommand3 logic)\n  )\n}, [editor])\n")),(0,l.kt)("p",null,"In this case, useEffect is returning the function returned by mergeRegister as a cleanup\nfunction to be executed after either the useEffect runs again (due to one of its dependencies\nupdating) or the component it resides in unmounts.\nNote the functions don't neccesarily need to be in an array as all arguements\nare considered to be the func argument and spread from there."),(0,l.kt)("h4",{id:"parameters-15"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"...func")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"Func"),"[]"),(0,l.kt)("td",{parentName:"tr",align:"left"},"An array of functions meant to be executed by the returned function.")))),(0,l.kt)("h4",{id:"returns-16"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"fn")),(0,l.kt)("p",null,"the function which executes all the passed register command functions."),(0,l.kt)("p",null,"\u25b8 (): ",(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("h5",{id:"returns-17"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("h4",{id:"defined-in-17"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/QubitPi/lexical/blob/eb83ce9/packages/lexical-utils/src/mergeRegister.ts#L33"},"lexical-utils/src/mergeRegister.ts:33")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"objectklassequals"},"objectKlassEquals"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"objectKlassEquals"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,l.kt)("inlineCode",{parentName:"p"},"object"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"objectClass"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("h4",{id:"type-parameters-4"},"Type parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"T"))))),(0,l.kt)("h4",{id:"parameters-16"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"object")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"unknown")),(0,l.kt)("td",{parentName:"tr",align:"left"},"= The instance of the type")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"objectClass")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"ObjectKlass"),"<",(0,l.kt)("inlineCode",{parentName:"td"},"T"),">"),(0,l.kt)("td",{parentName:"tr",align:"left"},"= The class of the type")))),(0,l.kt)("h4",{id:"returns-18"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"Whether the object is has the same Klass of the objectClass, ignoring the difference across window (e.g. different iframs)"),(0,l.kt)("h4",{id:"defined-in-18"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/QubitPi/lexical/blob/eb83ce9/packages/lexical-utils/src/index.ts#L487"},"lexical-utils/src/index.ts:487")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"positionnodeonrange"},"positionNodeOnRange"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"positionNodeOnRange"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"editor"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"range"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"onReposition"),"): () => ",(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("h4",{id:"parameters-17"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"editor")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/classes/lexical.LexicalEditor"},(0,l.kt)("inlineCode",{parentName:"a"},"LexicalEditor")))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"range")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"Range"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"onReposition")),(0,l.kt)("td",{parentName:"tr",align:"left"},"(",(0,l.kt)("inlineCode",{parentName:"td"},"node"),": ",(0,l.kt)("inlineCode",{parentName:"td"},"HTMLElement"),"[]) => ",(0,l.kt)("inlineCode",{parentName:"td"},"void"))))),(0,l.kt)("h4",{id:"returns-19"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"fn")),(0,l.kt)("p",null,"\u25b8 (): ",(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("h5",{id:"returns-20"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("h4",{id:"defined-in-19"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/QubitPi/lexical/blob/eb83ce9/packages/lexical-utils/src/positionNodeOnRange.ts#L23"},"lexical-utils/src/positionNodeOnRange.ts:23")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"registernestedelementresolver"},"registerNestedElementResolver"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"registerNestedElementResolver"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"N"),">","(",(0,l.kt)("inlineCode",{parentName:"p"},"editor"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"targetNode"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"cloneNode"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"handleOverlap"),"): () => ",(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("p",null,"Attempts to resolve nested element nodes of the same type into a single node of that type.\nIt is generally used for marks/commenting"),(0,l.kt)("h4",{id:"type-parameters-5"},"Type parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"N")),(0,l.kt)("td",{parentName:"tr",align:"left"},"extends ",(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/classes/lexical.ElementNode"},(0,l.kt)("inlineCode",{parentName:"a"},"ElementNode")))))),(0,l.kt)("h4",{id:"parameters-18"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"editor")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/classes/lexical.LexicalEditor"},(0,l.kt)("inlineCode",{parentName:"a"},"LexicalEditor"))),(0,l.kt)("td",{parentName:"tr",align:"left"},"The lexical editor")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"targetNode")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/modules/lexical#klass"},(0,l.kt)("inlineCode",{parentName:"a"},"Klass")),"<",(0,l.kt)("inlineCode",{parentName:"td"},"N"),">"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The target for the nested element to be extracted from.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"cloneNode")),(0,l.kt)("td",{parentName:"tr",align:"left"},"(",(0,l.kt)("inlineCode",{parentName:"td"},"from"),": ",(0,l.kt)("inlineCode",{parentName:"td"},"N"),") => ",(0,l.kt)("inlineCode",{parentName:"td"},"N")),(0,l.kt)("td",{parentName:"tr",align:"left"},"See $createMarkNode")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"handleOverlap")),(0,l.kt)("td",{parentName:"tr",align:"left"},"(",(0,l.kt)("inlineCode",{parentName:"td"},"from"),": ",(0,l.kt)("inlineCode",{parentName:"td"},"N"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"to"),": ",(0,l.kt)("inlineCode",{parentName:"td"},"N"),") => ",(0,l.kt)("inlineCode",{parentName:"td"},"void")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Handles any overlap between the node to extract and the targetNode")))),(0,l.kt)("h4",{id:"returns-21"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"fn")),(0,l.kt)("p",null,"The lexical editor"),(0,l.kt)("p",null,"\u25b8 (): ",(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("h5",{id:"returns-22"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("h4",{id:"defined-in-20"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/QubitPi/lexical/blob/eb83ce9/packages/lexical-utils/src/index.ts#L299"},"lexical-utils/src/index.ts:299")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"removeclassnamesfromelement"},"removeClassNamesFromElement"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"removeClassNamesFromElement"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"element"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"...classNames"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("p",null,"Takes an HTML element and removes the classNames passed within an array,\nignoring any non-string types. A space can be used to remove multiple classes\neg. removeClassNamesFromElement(element, ","['active small', true, null]",")\nwill remove both the 'active' and 'small' classes from that element."),(0,l.kt)("h4",{id:"parameters-19"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"element")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"HTMLElement")),(0,l.kt)("td",{parentName:"tr",align:"left"},"The element in which the classes are removed")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"...classNames")),(0,l.kt)("td",{parentName:"tr",align:"left"},"(",(0,l.kt)("inlineCode",{parentName:"td"},"undefined")," ","|"," ",(0,l.kt)("inlineCode",{parentName:"td"},"null")," ","|"," ",(0,l.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,l.kt)("inlineCode",{parentName:"td"},"boolean"),")[]"),(0,l.kt)("td",{parentName:"tr",align:"left"},"An array defining the class names to remove from the element")))),(0,l.kt)("h4",{id:"returns-23"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("h4",{id:"defined-in-21"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/QubitPi/lexical/blob/eb83ce9/packages/lexical-utils/src/index.ts#L68"},"lexical-utils/src/index.ts:68")))}k.isMDXComponent=!0}}]);