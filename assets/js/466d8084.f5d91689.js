"use strict";(self.webpackChunk_lexical_website=self.webpackChunk_lexical_website||[]).push([["1377"],{3921:function(e,i,n){n.r(i),n.d(i,{frontMatter:()=>c,default:()=>h,contentTitle:()=>d,assets:()=>s,toc:()=>a,metadata:()=>l});var l=JSON.parse('{"id":"api/interfaces/lexical.CaretRange","title":"Interface: CaretRange<D>","description":"lexical.CaretRange","source":"@site/docs/api/interfaces/lexical.CaretRange.md","sourceDirName":"api/interfaces","slug":"/api/interfaces/lexical.CaretRange","permalink":"/docs/api/interfaces/lexical.CaretRange","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","frontMatter":{"id":"lexical.CaretRange","title":"Interface: CaretRange<D>","custom_edit_url":null},"sidebar":"api","previous":{"title":"BaseSelection","permalink":"/docs/api/interfaces/lexical.BaseSelection"},"next":{"title":"ChildCaret","permalink":"/docs/api/interfaces/lexical.ChildCaret"}}'),r=n(52322),t=n(22840);let c={id:"lexical.CaretRange",title:"Interface: CaretRange<D>",custom_edit_url:null},d=void 0,s={},a=[{value:"Type parameters",id:"type-parameters",level:2},{value:"Hierarchy",id:"hierarchy",level:2},{value:"Properties",id:"properties",level:2},{value:"anchor",id:"anchor",level:3},{value:"Defined in",id:"defined-in",level:4},{value:"direction",id:"direction",level:3},{value:"Defined in",id:"defined-in-1",level:4},{value:"focus",id:"focus",level:3},{value:"Defined in",id:"defined-in-2",level:4},{value:"getTextSlices",id:"gettextslices",level:3},{value:"Type declaration",id:"type-declaration",level:4},{value:"Returns",id:"returns",level:5},{value:"Defined in",id:"defined-in-3",level:4},{value:"isCollapsed",id:"iscollapsed",level:3},{value:"Type declaration",id:"type-declaration-1",level:4},{value:"Returns",id:"returns-1",level:5},{value:"Defined in",id:"defined-in-4",level:4},{value:"iterNodeCarets",id:"iternodecarets",level:3},{value:"Type declaration",id:"type-declaration-2",level:4},{value:"Parameters",id:"parameters",level:5},{value:"Returns",id:"returns-2",level:5},{value:"Defined in",id:"defined-in-5",level:4},{value:"type",id:"type",level:3},{value:"Defined in",id:"defined-in-6",level:4},{value:"Methods",id:"methods",level:2},{value:"[iterator]",id:"iterator",level:3},{value:"Returns",id:"returns-3",level:4},{value:"Inherited from",id:"inherited-from",level:4},{value:"Defined in",id:"defined-in-7",level:4}];function o(e){let i={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",h5:"h5",hr:"hr",li:"li",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.a,{href:"/docs/api/modules/lexical",children:"lexical"}),".CaretRange"]}),"\n",(0,r.jsx)(i.p,{children:"A RangeSelection expressed as a pair of Carets"}),"\n",(0,r.jsx)(i.h2,{id:"type-parameters",children:"Type parameters"}),"\n",(0,r.jsxs)(i.table,{children:[(0,r.jsx)(i.thead,{children:(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,r.jsx)(i.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,r.jsx)(i.tbody,{children:(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{style:{textAlign:"left"},children:(0,r.jsx)(i.code,{children:"D"})}),(0,r.jsxs)(i.td,{style:{textAlign:"left"},children:["extends ",(0,r.jsx)(i.a,{href:"/docs/api/modules/lexical#caretdirection",children:(0,r.jsx)(i.code,{children:"CaretDirection"})})," = ",(0,r.jsx)(i.a,{href:"/docs/api/modules/lexical#caretdirection",children:(0,r.jsx)(i.code,{children:"CaretDirection"})})]})]})})]}),"\n",(0,r.jsx)(i.h2,{id:"hierarchy",children:"Hierarchy"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:["\n",(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.code,{children:"Iterable"}),"<",(0,r.jsx)(i.a,{href:"/docs/api/modules/lexical#nodecaret",children:(0,r.jsx)(i.code,{children:"NodeCaret"})}),"<",(0,r.jsx)(i.code,{children:"D"}),">>"]}),"\n",(0,r.jsxs)(i.p,{children:["\u21B3 ",(0,r.jsx)(i.strong,{children:(0,r.jsx)(i.code,{children:"CaretRange"})})]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(i.h2,{id:"properties",children:"Properties"}),"\n",(0,r.jsx)(i.h3,{id:"anchor",children:"anchor"}),"\n",(0,r.jsxs)(i.p,{children:["\u2022 ",(0,r.jsx)(i.strong,{children:"anchor"}),": ",(0,r.jsx)(i.a,{href:"/docs/api/modules/lexical#pointcaret",children:(0,r.jsx)(i.code,{children:"PointCaret"})}),"<",(0,r.jsx)(i.code,{children:"D"}),">"]}),"\n",(0,r.jsx)(i.h4,{id:"defined-in",children:"Defined in"}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L99",children:"packages/lexical/src/caret/LexicalCaret.ts:99"})}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsx)(i.h3,{id:"direction",children:"direction"}),"\n",(0,r.jsxs)(i.p,{children:["\u2022 ",(0,r.jsx)(i.code,{children:"Readonly"})," ",(0,r.jsx)(i.strong,{children:"direction"}),": ",(0,r.jsx)(i.code,{children:"D"})]}),"\n",(0,r.jsx)(i.h4,{id:"defined-in-1",children:"Defined in"}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L98",children:"packages/lexical/src/caret/LexicalCaret.ts:98"})}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsx)(i.h3,{id:"focus",children:"focus"}),"\n",(0,r.jsxs)(i.p,{children:["\u2022 ",(0,r.jsx)(i.strong,{children:"focus"}),": ",(0,r.jsx)(i.a,{href:"/docs/api/modules/lexical#pointcaret",children:(0,r.jsx)(i.code,{children:"PointCaret"})}),"<",(0,r.jsx)(i.code,{children:"D"}),">"]}),"\n",(0,r.jsx)(i.h4,{id:"defined-in-2",children:"Defined in"}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L100",children:"packages/lexical/src/caret/LexicalCaret.ts:100"})}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsx)(i.h3,{id:"gettextslices",children:"getTextSlices"}),"\n",(0,r.jsxs)(i.p,{children:["\u2022 ",(0,r.jsx)(i.strong,{children:"getTextSlices"}),": () => ",(0,r.jsx)(i.a,{href:"/docs/api/modules/lexical#textpointcaretslicetuple",children:(0,r.jsx)(i.code,{children:"TextPointCaretSliceTuple"})}),"<",(0,r.jsx)(i.code,{children:"D"}),">"]}),"\n",(0,r.jsx)(i.p,{children:"There are between zero and two non-null TextSliceCarets for a CaretRange.\nNote that when anchor and focus share an origin node the second element\nwill be null because the slice is entirely represented by the first element."}),"\n",(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.code,{children:"[slice, slice]"}),": anchor and focus are TextPointCaret with distinct origin nodes\n",(0,r.jsx)(i.code,{children:"[slice, null]"}),": anchor is a TextPointCaret\n",(0,r.jsx)(i.code,{children:"[null, slice]"}),": focus is a TextPointCaret\n",(0,r.jsx)(i.code,{children:"[null, null]"}),": Neither anchor nor focus are TextPointCarets"]}),"\n",(0,r.jsx)(i.h4,{id:"type-declaration",children:"Type declaration"}),"\n",(0,r.jsxs)(i.p,{children:["\u25B8 (): ",(0,r.jsx)(i.a,{href:"/docs/api/modules/lexical#textpointcaretslicetuple",children:(0,r.jsx)(i.code,{children:"TextPointCaretSliceTuple"})}),"<",(0,r.jsx)(i.code,{children:"D"}),">"]}),"\n",(0,r.jsx)(i.h5,{id:"returns",children:"Returns"}),"\n",(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.a,{href:"/docs/api/modules/lexical#textpointcaretslicetuple",children:(0,r.jsx)(i.code,{children:"TextPointCaretSliceTuple"})}),"<",(0,r.jsx)(i.code,{children:"D"}),">"]}),"\n",(0,r.jsx)(i.h4,{id:"defined-in-3",children:"Defined in"}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L122",children:"packages/lexical/src/caret/LexicalCaret.ts:122"})}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsx)(i.h3,{id:"iscollapsed",children:"isCollapsed"}),"\n",(0,r.jsxs)(i.p,{children:["\u2022 ",(0,r.jsx)(i.strong,{children:"isCollapsed"}),": () => ",(0,r.jsx)(i.code,{children:"boolean"})]}),"\n",(0,r.jsx)(i.p,{children:"Return true if anchor and focus are the same caret"}),"\n",(0,r.jsx)(i.h4,{id:"type-declaration-1",children:"Type declaration"}),"\n",(0,r.jsxs)(i.p,{children:["\u25B8 (): ",(0,r.jsx)(i.code,{children:"boolean"})]}),"\n",(0,r.jsx)(i.h5,{id:"returns-1",children:"Returns"}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.code,{children:"boolean"})}),"\n",(0,r.jsx)(i.h4,{id:"defined-in-4",children:"Defined in"}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L102",children:"packages/lexical/src/caret/LexicalCaret.ts:102"})}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsx)(i.h3,{id:"iternodecarets",children:"iterNodeCarets"}),"\n",(0,r.jsxs)(i.p,{children:["\u2022 ",(0,r.jsx)(i.strong,{children:"iterNodeCarets"}),": (",(0,r.jsx)(i.code,{children:"rootMode?"}),": ",(0,r.jsx)(i.a,{href:"/docs/api/modules/lexical#rootmode",children:(0,r.jsx)(i.code,{children:"RootMode"})}),") => ",(0,r.jsx)(i.code,{children:"IterableIterator"}),"<",(0,r.jsx)(i.a,{href:"/docs/api/modules/lexical#nodecaret",children:(0,r.jsx)(i.code,{children:"NodeCaret"})}),"<",(0,r.jsx)(i.code,{children:"D"}),">>"]}),"\n",(0,r.jsx)(i.p,{children:"Iterate the carets between anchor and focus in a pre-order fashion, note\nthat this does not include any text slices represented by the anchor and/or\nfocus. Those are accessed separately from getTextSlices."}),"\n",(0,r.jsx)(i.p,{children:"An ElementNode origin will be yielded as a ChildCaret on enter,\nand a SiblingCaret on leave."}),"\n",(0,r.jsx)(i.h4,{id:"type-declaration-2",children:"Type declaration"}),"\n",(0,r.jsxs)(i.p,{children:["\u25B8 (",(0,r.jsx)(i.code,{children:"rootMode?"}),"): ",(0,r.jsx)(i.code,{children:"IterableIterator"}),"<",(0,r.jsx)(i.a,{href:"/docs/api/modules/lexical#nodecaret",children:(0,r.jsx)(i.code,{children:"NodeCaret"})}),"<",(0,r.jsx)(i.code,{children:"D"}),">>"]}),"\n",(0,r.jsx)(i.h5,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(i.table,{children:[(0,r.jsx)(i.thead,{children:(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,r.jsx)(i.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,r.jsx)(i.tbody,{children:(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{style:{textAlign:"left"},children:(0,r.jsx)(i.code,{children:"rootMode?"})}),(0,r.jsx)(i.td,{style:{textAlign:"left"},children:(0,r.jsx)(i.a,{href:"/docs/api/modules/lexical#rootmode",children:(0,r.jsx)(i.code,{children:"RootMode"})})})]})})]}),"\n",(0,r.jsx)(i.h5,{id:"returns-2",children:"Returns"}),"\n",(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.code,{children:"IterableIterator"}),"<",(0,r.jsx)(i.a,{href:"/docs/api/modules/lexical#nodecaret",children:(0,r.jsx)(i.code,{children:"NodeCaret"})}),"<",(0,r.jsx)(i.code,{children:"D"}),">>"]}),"\n",(0,r.jsx)(i.h4,{id:"defined-in-5",children:"Defined in"}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L111",children:"packages/lexical/src/caret/LexicalCaret.ts:111"})}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsx)(i.h3,{id:"type",children:"type"}),"\n",(0,r.jsxs)(i.p,{children:["\u2022 ",(0,r.jsx)(i.code,{children:"Readonly"})," ",(0,r.jsx)(i.strong,{children:"type"}),": ",(0,r.jsx)(i.code,{children:'"node-caret-range"'})]}),"\n",(0,r.jsx)(i.h4,{id:"defined-in-6",children:"Defined in"}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L97",children:"packages/lexical/src/caret/LexicalCaret.ts:97"})}),"\n",(0,r.jsx)(i.h2,{id:"methods",children:"Methods"}),"\n",(0,r.jsx)(i.h3,{id:"iterator",children:"[iterator]"}),"\n",(0,r.jsxs)(i.p,{children:["\u25B8 ",(0,r.jsx)(i.strong,{children:"[iterator]"}),"(): ",(0,r.jsx)(i.code,{children:"Iterator"}),"<",(0,r.jsx)(i.a,{href:"/docs/api/modules/lexical#nodecaret",children:(0,r.jsx)(i.code,{children:"NodeCaret"})}),"<",(0,r.jsx)(i.code,{children:"D"}),">, ",(0,r.jsx)(i.code,{children:"any"}),", ",(0,r.jsx)(i.code,{children:"undefined"}),">"]}),"\n",(0,r.jsx)(i.h4,{id:"returns-3",children:"Returns"}),"\n",(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.code,{children:"Iterator"}),"<",(0,r.jsx)(i.a,{href:"/docs/api/modules/lexical#nodecaret",children:(0,r.jsx)(i.code,{children:"NodeCaret"})}),"<",(0,r.jsx)(i.code,{children:"D"}),">, ",(0,r.jsx)(i.code,{children:"any"}),", ",(0,r.jsx)(i.code,{children:"undefined"}),">"]}),"\n",(0,r.jsx)(i.h4,{id:"inherited-from",children:"Inherited from"}),"\n",(0,r.jsx)(i.p,{children:"Iterable.[iterator]"}),"\n",(0,r.jsx)(i.h4,{id:"defined-in-7",children:"Defined in"}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/node_modules/typescript/lib/lib.es2015.iterable.d.ts#L49",children:"node_modules/typescript/lib/lib.es2015.iterable.d.ts:49"})})]})}function h(e={}){let{wrapper:i}={...(0,t.a)(),...e.components};return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},22840:function(e,i,n){n.d(i,{Z:()=>d,a:()=>c});var l=n(2784);let r={},t=l.createContext(r);function c(e){let i=l.useContext(t);return l.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function d(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),l.createElement(t.Provider,{value:i},e.children)}}}]);