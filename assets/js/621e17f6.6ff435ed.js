"use strict";(self.webpackChunk_lexical_website=self.webpackChunk_lexical_website||[]).push([["2024"],{75382:function(e,l,i){i.r(l),i.d(l,{frontMatter:()=>d,default:()=>x,contentTitle:()=>r,assets:()=>c,toc:()=>a,metadata:()=>s});var s=JSON.parse('{"id":"api/classes/lexical_list.ListNode","title":"Class: ListNode","description":"@lexical/list.ListNode","source":"@site/docs/api/classes/lexical_list.ListNode.md","sourceDirName":"api/classes","slug":"/api/classes/lexical_list.ListNode","permalink":"/lexical/docs/api/classes/lexical_list.ListNode","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","frontMatter":{"id":"lexical_list.ListNode","title":"Class: ListNode","custom_edit_url":null},"sidebar":"api","previous":{"title":"ListItemNode","permalink":"/lexical/docs/api/classes/lexical_list.ListItemNode"},"next":{"title":"MarkNode","permalink":"/lexical/docs/api/classes/lexical_mark.MarkNode"}}'),t=i(52322),n=i(22840);let d={id:"lexical_list.ListNode",title:"Class: ListNode",custom_edit_url:null},r=void 0,c={},a=[{value:"Hierarchy",id:"hierarchy",level:2},{value:"Constructors",id:"constructors",level:2},{value:"constructor",id:"constructor",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Overrides",id:"overrides",level:4},{value:"Defined in",id:"defined-in",level:4},{value:"Methods",id:"methods",level:2},{value:"afterCloneFrom",id:"afterclonefrom",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Overrides",id:"overrides-1",level:4},{value:"Defined in",id:"defined-in-1",level:4},{value:"canBeEmpty",id:"canbeempty",level:3},{value:"Returns",id:"returns-2",level:4},{value:"Overrides",id:"overrides-2",level:4},{value:"Defined in",id:"defined-in-2",level:4},{value:"canIndent",id:"canindent",level:3},{value:"Returns",id:"returns-3",level:4},{value:"Overrides",id:"overrides-3",level:4},{value:"Defined in",id:"defined-in-3",level:4},{value:"createDOM",id:"createdom",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-4",level:4},{value:"Overrides",id:"overrides-4",level:4},{value:"Defined in",id:"defined-in-4",level:4},{value:"exportDOM",id:"exportdom",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-5",level:4},{value:"Overrides",id:"overrides-5",level:4},{value:"Defined in",id:"defined-in-5",level:4},{value:"exportJSON",id:"exportjson",level:3},{value:"Returns",id:"returns-6",level:4},{value:"Overrides",id:"overrides-6",level:4},{value:"Defined in",id:"defined-in-6",level:4},{value:"extractWithChild",id:"extractwithchild",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-7",level:4},{value:"Overrides",id:"overrides-7",level:4},{value:"Defined in",id:"defined-in-7",level:4},{value:"getListType",id:"getlisttype",level:3},{value:"Returns",id:"returns-8",level:4},{value:"Defined in",id:"defined-in-8",level:4},{value:"getStart",id:"getstart",level:3},{value:"Returns",id:"returns-9",level:4},{value:"Defined in",id:"defined-in-9",level:4},{value:"getTag",id:"gettag",level:3},{value:"Returns",id:"returns-10",level:4},{value:"Defined in",id:"defined-in-10",level:4},{value:"setListType",id:"setlisttype",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-11",level:4},{value:"Defined in",id:"defined-in-11",level:4},{value:"setStart",id:"setstart",level:3},{value:"Parameters",id:"parameters-6",level:4},{value:"Returns",id:"returns-12",level:4},{value:"Defined in",id:"defined-in-12",level:4},{value:"splice",id:"splice",level:3},{value:"Parameters",id:"parameters-7",level:4},{value:"Returns",id:"returns-13",level:4},{value:"Overrides",id:"overrides-8",level:4},{value:"Defined in",id:"defined-in-13",level:4},{value:"updateDOM",id:"updatedom",level:3},{value:"Parameters",id:"parameters-8",level:4},{value:"Returns",id:"returns-14",level:4},{value:"Overrides",id:"overrides-9",level:4},{value:"Defined in",id:"defined-in-14",level:4},{value:"updateFromJSON",id:"updatefromjson",level:3},{value:"Parameters",id:"parameters-9",level:4},{value:"Returns",id:"returns-15",level:4},{value:"Overrides",id:"overrides-10",level:4},{value:"Defined in",id:"defined-in-15",level:4}];function h(e){let l={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,n.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(l.p,{children:[(0,t.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical_list",children:"@lexical/list"}),".ListNode"]}),"\n",(0,t.jsx)(l.h2,{id:"hierarchy",children:"Hierarchy"}),"\n",(0,t.jsxs)(l.ul,{children:["\n",(0,t.jsxs)(l.li,{children:["\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:(0,t.jsx)(l.code,{children:"ElementNode"})})}),"\n",(0,t.jsxs)(l.p,{children:["\u21B3 ",(0,t.jsx)(l.strong,{children:(0,t.jsx)(l.code,{children:"ListNode"})})]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(l.h2,{id:"constructors",children:"Constructors"}),"\n",(0,t.jsx)(l.h3,{id:"constructor",children:"constructor"}),"\n",(0,t.jsxs)(l.p,{children:["\u2022 ",(0,t.jsx)(l.strong,{children:"new ListNode"}),"(",(0,t.jsx)(l.code,{children:"listType?"}),", ",(0,t.jsx)(l.code,{children:"start?"}),", ",(0,t.jsx)(l.code,{children:"key?"}),"): ",(0,t.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical_list.ListNode",children:(0,t.jsx)(l.code,{children:"ListNode"})})]}),"\n",(0,t.jsx)(l.h4,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsxs)(l.table,{children:[(0,t.jsx)(l.thead,{children:(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Default value"})]})}),(0,t.jsxs)(l.tbody,{children:[(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"listType"})}),(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical_list#listtype",children:(0,t.jsx)(l.code,{children:"ListType"})})}),(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"'number'"})})]}),(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"start"})}),(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"number"})}),(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"1"})})]}),(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"key?"})}),(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"string"})}),(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"undefined"})})]})]})]}),"\n",(0,t.jsx)(l.h4,{id:"returns",children:"Returns"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical_list.ListNode",children:(0,t.jsx)(l.code,{children:"ListNode"})})}),"\n",(0,t.jsx)(l.h4,{id:"overrides",children:"Overrides"}),"\n",(0,t.jsxs)(l.p,{children:[(0,t.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,t.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode#constructor",children:"constructor"})]}),"\n",(0,t.jsx)(l.h4,{id:"defined-in",children:"Defined in"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-list/src/LexicalListNode.ts#L83",children:"packages/lexical-list/src/LexicalListNode.ts:83"})}),"\n",(0,t.jsx)(l.h2,{id:"methods",children:"Methods"}),"\n",(0,t.jsx)(l.h3,{id:"afterclonefrom",children:"afterCloneFrom"}),"\n",(0,t.jsxs)(l.p,{children:["\u25B8 ",(0,t.jsx)(l.strong,{children:"afterCloneFrom"}),"(",(0,t.jsx)(l.code,{children:"prevNode"}),"): ",(0,t.jsx)(l.code,{children:"void"})]}),"\n",(0,t.jsxs)(l.p,{children:["Perform any state updates on the clone of prevNode that are not already\nhandled by the constructor call in the static clone method. If you have\nstate to update in your clone that is not handled directly by the\nconstructor, it is advisable to override this method but it is required\nto include a call to ",(0,t.jsx)(l.code,{children:"super.afterCloneFrom(prevNode)"})," in your\nimplementation. This is only intended to be called by\n",(0,t.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#clonewithproperties",children:"$cloneWithProperties"})," function or via a super call."]}),"\n",(0,t.jsx)(l.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,t.jsxs)(l.table,{children:[(0,t.jsx)(l.thead,{children:(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,t.jsx)(l.tbody,{children:(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"prevNode"})}),(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"this"})})]})})]}),"\n",(0,t.jsx)(l.h4,{id:"returns-1",children:"Returns"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.code,{children:"void"})}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.strong,{children:(0,t.jsx)(l.code,{children:"Example"})})}),"\n",(0,t.jsx)(l.pre,{children:(0,t.jsx)(l.code,{className:"language-ts",children:"class ClassesTextNode extends TextNode {\n  // Not shown: static getType, static importJSON, exportJSON, createDOM, updateDOM\n  __classes = new Set<string>();\n  static clone(node: ClassesTextNode): ClassesTextNode {\n    // The inherited TextNode constructor is used here, so\n    // classes is not set by this method.\n    return new ClassesTextNode(node.__text, node.__key);\n  }\n  afterCloneFrom(node: this): void {\n    // This calls TextNode.afterCloneFrom and LexicalNode.afterCloneFrom\n    // for necessary state updates\n    super.afterCloneFrom(node);\n    this.__addClasses(node.__classes);\n  }\n  // This method is a private implementation detail, it is not\n  // suitable for the public API because it does not call getWritable\n  __addClasses(classNames: Iterable<string>): this {\n    for (const className of classNames) {\n      this.__classes.add(className);\n    }\n    return this;\n  }\n  addClass(...classNames: string[]): this {\n    return this.getWritable().__addClasses(classNames);\n  }\n  removeClass(...classNames: string[]): this {\n    const node = this.getWritable();\n    for (const className of classNames) {\n      this.__classes.delete(className);\n    }\n    return this;\n  }\n  getClasses(): Set<string> {\n    return this.getLatest().__classes;\n  }\n}\n"})}),"\n",(0,t.jsx)(l.h4,{id:"overrides-1",children:"Overrides"}),"\n",(0,t.jsxs)(l.p,{children:[(0,t.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,t.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode#afterclonefrom",children:"afterCloneFrom"})]}),"\n",(0,t.jsx)(l.h4,{id:"defined-in-1",children:"Defined in"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-list/src/LexicalListNode.ts#L91",children:"packages/lexical-list/src/LexicalListNode.ts:91"})}),"\n",(0,t.jsx)(l.hr,{}),"\n",(0,t.jsx)(l.h3,{id:"canbeempty",children:"canBeEmpty"}),"\n",(0,t.jsxs)(l.p,{children:["\u25B8 ",(0,t.jsx)(l.strong,{children:"canBeEmpty"}),"(): ",(0,t.jsx)(l.code,{children:"false"})]}),"\n",(0,t.jsx)(l.h4,{id:"returns-2",children:"Returns"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.code,{children:"false"})}),"\n",(0,t.jsx)(l.h4,{id:"overrides-2",children:"Overrides"}),"\n",(0,t.jsxs)(l.p,{children:[(0,t.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,t.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode#canbeempty",children:"canBeEmpty"})]}),"\n",(0,t.jsx)(l.h4,{id:"defined-in-2",children:"Defined in"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-list/src/LexicalListNode.ts#L180",children:"packages/lexical-list/src/LexicalListNode.ts:180"})}),"\n",(0,t.jsx)(l.hr,{}),"\n",(0,t.jsx)(l.h3,{id:"canindent",children:"canIndent"}),"\n",(0,t.jsxs)(l.p,{children:["\u25B8 ",(0,t.jsx)(l.strong,{children:"canIndent"}),"(): ",(0,t.jsx)(l.code,{children:"false"})]}),"\n",(0,t.jsx)(l.h4,{id:"returns-3",children:"Returns"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.code,{children:"false"})}),"\n",(0,t.jsx)(l.h4,{id:"overrides-3",children:"Overrides"}),"\n",(0,t.jsxs)(l.p,{children:[(0,t.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,t.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode#canindent",children:"canIndent"})]}),"\n",(0,t.jsx)(l.h4,{id:"defined-in-3",children:"Defined in"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-list/src/LexicalListNode.ts#L184",children:"packages/lexical-list/src/LexicalListNode.ts:184"})}),"\n",(0,t.jsx)(l.hr,{}),"\n",(0,t.jsx)(l.h3,{id:"createdom",children:"createDOM"}),"\n",(0,t.jsxs)(l.p,{children:["\u25B8 ",(0,t.jsx)(l.strong,{children:"createDOM"}),"(",(0,t.jsx)(l.code,{children:"config"}),", ",(0,t.jsx)(l.code,{children:"_editor?"}),"): ",(0,t.jsx)(l.code,{children:"HTMLElement"})]}),"\n",(0,t.jsx)(l.p,{children:"Called during the reconciliation process to determine which nodes\nto insert into the DOM for this Lexical Node."}),"\n",(0,t.jsx)(l.p,{children:"This method must return exactly one HTMLElement. Nested elements are not supported."}),"\n",(0,t.jsx)(l.p,{children:"Do not attempt to update the Lexical EditorState during this phase of the update lifecycle."}),"\n",(0,t.jsx)(l.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,t.jsxs)(l.table,{children:[(0,t.jsx)(l.thead,{children:(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,t.jsxs)(l.tbody,{children:[(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"config"})}),(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorconfig",children:(0,t.jsx)(l.code,{children:"EditorConfig"})})}),(0,t.jsx)(l.td,{style:{textAlign:"left"},children:"allows access to things like the EditorTheme (to apply classes) during reconciliation."})]}),(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"_editor?"})}),(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalEditor",children:(0,t.jsx)(l.code,{children:"LexicalEditor"})})}),(0,t.jsx)(l.td,{style:{textAlign:"left"},children:"allows access to the editor for context during reconciliation."})]})]})]}),"\n",(0,t.jsx)(l.h4,{id:"returns-4",children:"Returns"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.code,{children:"HTMLElement"})}),"\n",(0,t.jsx)(l.h4,{id:"overrides-4",children:"Overrides"}),"\n",(0,t.jsxs)(l.p,{children:[(0,t.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,t.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode#createdom",children:"createDOM"})]}),"\n",(0,t.jsx)(l.h4,{id:"defined-in-4",children:"Defined in"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-list/src/LexicalListNode.ts#L125",children:"packages/lexical-list/src/LexicalListNode.ts:125"})}),"\n",(0,t.jsx)(l.hr,{}),"\n",(0,t.jsx)(l.h3,{id:"exportdom",children:"exportDOM"}),"\n",(0,t.jsxs)(l.p,{children:["\u25B8 ",(0,t.jsx)(l.strong,{children:"exportDOM"}),"(",(0,t.jsx)(l.code,{children:"editor"}),"): ",(0,t.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#domexportoutput",children:(0,t.jsx)(l.code,{children:"DOMExportOutput"})})]}),"\n",(0,t.jsxs)(l.p,{children:["Controls how the this node is serialized to HTML. This is important for\ncopy and paste between Lexical and non-Lexical editors, or Lexical editors with different namespaces,\nin which case the primary transfer format is HTML. It's also important if you're serializing\nto HTML for any other reason via ",(0,t.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical_html#generatehtmlfromnodes",children:"$generateHtmlFromNodes"}),". You could\nalso use this method to build your own HTML renderer."]}),"\n",(0,t.jsx)(l.h4,{id:"parameters-3",children:"Parameters"}),"\n",(0,t.jsxs)(l.table,{children:[(0,t.jsx)(l.thead,{children:(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,t.jsx)(l.tbody,{children:(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"editor"})}),(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalEditor",children:(0,t.jsx)(l.code,{children:"LexicalEditor"})})})]})})]}),"\n",(0,t.jsx)(l.h4,{id:"returns-5",children:"Returns"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#domexportoutput",children:(0,t.jsx)(l.code,{children:"DOMExportOutput"})})}),"\n",(0,t.jsx)(l.h4,{id:"overrides-5",children:"Overrides"}),"\n",(0,t.jsxs)(l.p,{children:[(0,t.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,t.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode#exportdom",children:"exportDOM"})]}),"\n",(0,t.jsx)(l.h4,{id:"defined-in-5",children:"Defined in"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-list/src/LexicalListNode.ts#L156",children:"packages/lexical-list/src/LexicalListNode.ts:156"})}),"\n",(0,t.jsx)(l.hr,{}),"\n",(0,t.jsx)(l.h3,{id:"exportjson",children:"exportJSON"}),"\n",(0,t.jsxs)(l.p,{children:["\u25B8 ",(0,t.jsx)(l.strong,{children:"exportJSON"}),"(): ",(0,t.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical_list#serializedlistnode",children:(0,t.jsx)(l.code,{children:"SerializedListNode"})})]}),"\n",(0,t.jsxs)(l.p,{children:["Controls how the this node is serialized to JSON. This is important for\ncopy and paste between Lexical editors sharing the same namespace. It's also important\nif you're serializing to JSON for persistent storage somewhere.\nSee ",(0,t.jsx)(l.a,{href:"https://lexical.dev/docs/concepts/serialization#lexical---html",children:"Serialization & Deserialization"}),"."]}),"\n",(0,t.jsx)(l.h4,{id:"returns-6",children:"Returns"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical_list#serializedlistnode",children:(0,t.jsx)(l.code,{children:"SerializedListNode"})})}),"\n",(0,t.jsx)(l.h4,{id:"overrides-6",children:"Overrides"}),"\n",(0,t.jsxs)(l.p,{children:[(0,t.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,t.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode#exportjson",children:"exportJSON"})]}),"\n",(0,t.jsx)(l.h4,{id:"defined-in-6",children:"Defined in"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-list/src/LexicalListNode.ts#L171",children:"packages/lexical-list/src/LexicalListNode.ts:171"})}),"\n",(0,t.jsx)(l.hr,{}),"\n",(0,t.jsx)(l.h3,{id:"extractwithchild",children:"extractWithChild"}),"\n",(0,t.jsxs)(l.p,{children:["\u25B8 ",(0,t.jsx)(l.strong,{children:"extractWithChild"}),"(",(0,t.jsx)(l.code,{children:"child"}),"): ",(0,t.jsx)(l.code,{children:"boolean"})]}),"\n",(0,t.jsx)(l.h4,{id:"parameters-4",children:"Parameters"}),"\n",(0,t.jsxs)(l.table,{children:[(0,t.jsx)(l.thead,{children:(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,t.jsx)(l.tbody,{children:(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"child"})}),(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,t.jsx)(l.code,{children:"LexicalNode"})})})]})})]}),"\n",(0,t.jsx)(l.h4,{id:"returns-7",children:"Returns"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.code,{children:"boolean"})}),"\n",(0,t.jsx)(l.h4,{id:"overrides-7",children:"Overrides"}),"\n",(0,t.jsxs)(l.p,{children:[(0,t.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,t.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode#extractwithchild",children:"extractWithChild"})]}),"\n",(0,t.jsx)(l.h4,{id:"defined-in-7",children:"Defined in"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-list/src/LexicalListNode.ts#L210",children:"packages/lexical-list/src/LexicalListNode.ts:210"})}),"\n",(0,t.jsx)(l.hr,{}),"\n",(0,t.jsx)(l.h3,{id:"getlisttype",children:"getListType"}),"\n",(0,t.jsxs)(l.p,{children:["\u25B8 ",(0,t.jsx)(l.strong,{children:"getListType"}),"(): ",(0,t.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical_list#listtype",children:(0,t.jsx)(l.code,{children:"ListType"})})]}),"\n",(0,t.jsx)(l.h4,{id:"returns-8",children:"Returns"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical_list#listtype",children:(0,t.jsx)(l.code,{children:"ListType"})})}),"\n",(0,t.jsx)(l.h4,{id:"defined-in-8",children:"Defined in"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-list/src/LexicalListNode.ts#L109",children:"packages/lexical-list/src/LexicalListNode.ts:109"})}),"\n",(0,t.jsx)(l.hr,{}),"\n",(0,t.jsx)(l.h3,{id:"getstart",children:"getStart"}),"\n",(0,t.jsxs)(l.p,{children:["\u25B8 ",(0,t.jsx)(l.strong,{children:"getStart"}),"(): ",(0,t.jsx)(l.code,{children:"number"})]}),"\n",(0,t.jsx)(l.h4,{id:"returns-9",children:"Returns"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.code,{children:"number"})}),"\n",(0,t.jsx)(l.h4,{id:"defined-in-9",children:"Defined in"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-list/src/LexicalListNode.ts#L113",children:"packages/lexical-list/src/LexicalListNode.ts:113"})}),"\n",(0,t.jsx)(l.hr,{}),"\n",(0,t.jsx)(l.h3,{id:"gettag",children:"getTag"}),"\n",(0,t.jsxs)(l.p,{children:["\u25B8 ",(0,t.jsx)(l.strong,{children:"getTag"}),"(): ",(0,t.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical_list#listnodetagtype",children:(0,t.jsx)(l.code,{children:"ListNodeTagType"})})]}),"\n",(0,t.jsx)(l.h4,{id:"returns-10",children:"Returns"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical_list#listnodetagtype",children:(0,t.jsx)(l.code,{children:"ListNodeTagType"})})}),"\n",(0,t.jsx)(l.h4,{id:"defined-in-10",children:"Defined in"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-list/src/LexicalListNode.ts#L98",children:"packages/lexical-list/src/LexicalListNode.ts:98"})}),"\n",(0,t.jsx)(l.hr,{}),"\n",(0,t.jsx)(l.h3,{id:"setlisttype",children:"setListType"}),"\n",(0,t.jsxs)(l.p,{children:["\u25B8 ",(0,t.jsx)(l.strong,{children:"setListType"}),"(",(0,t.jsx)(l.code,{children:"type"}),"): ",(0,t.jsx)(l.code,{children:"this"})]}),"\n",(0,t.jsx)(l.h4,{id:"parameters-5",children:"Parameters"}),"\n",(0,t.jsxs)(l.table,{children:[(0,t.jsx)(l.thead,{children:(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,t.jsx)(l.tbody,{children:(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"type"})}),(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical_list#listtype",children:(0,t.jsx)(l.code,{children:"ListType"})})})]})})]}),"\n",(0,t.jsx)(l.h4,{id:"returns-11",children:"Returns"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.code,{children:"this"})}),"\n",(0,t.jsx)(l.h4,{id:"defined-in-11",children:"Defined in"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-list/src/LexicalListNode.ts#L102",children:"packages/lexical-list/src/LexicalListNode.ts:102"})}),"\n",(0,t.jsx)(l.hr,{}),"\n",(0,t.jsx)(l.h3,{id:"setstart",children:"setStart"}),"\n",(0,t.jsxs)(l.p,{children:["\u25B8 ",(0,t.jsx)(l.strong,{children:"setStart"}),"(",(0,t.jsx)(l.code,{children:"start"}),"): ",(0,t.jsx)(l.code,{children:"this"})]}),"\n",(0,t.jsx)(l.h4,{id:"parameters-6",children:"Parameters"}),"\n",(0,t.jsxs)(l.table,{children:[(0,t.jsx)(l.thead,{children:(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,t.jsx)(l.tbody,{children:(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"start"})}),(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"number"})})]})})]}),"\n",(0,t.jsx)(l.h4,{id:"returns-12",children:"Returns"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.code,{children:"this"})}),"\n",(0,t.jsx)(l.h4,{id:"defined-in-12",children:"Defined in"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-list/src/LexicalListNode.ts#L117",children:"packages/lexical-list/src/LexicalListNode.ts:117"})}),"\n",(0,t.jsx)(l.hr,{}),"\n",(0,t.jsx)(l.h3,{id:"splice",children:"splice"}),"\n",(0,t.jsxs)(l.p,{children:["\u25B8 ",(0,t.jsx)(l.strong,{children:"splice"}),"(",(0,t.jsx)(l.code,{children:"start"}),", ",(0,t.jsx)(l.code,{children:"deleteCount"}),", ",(0,t.jsx)(l.code,{children:"nodesToInsert"}),"): ",(0,t.jsx)(l.code,{children:"this"})]}),"\n",(0,t.jsx)(l.h4,{id:"parameters-7",children:"Parameters"}),"\n",(0,t.jsxs)(l.table,{children:[(0,t.jsx)(l.thead,{children:(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,t.jsxs)(l.tbody,{children:[(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"start"})}),(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"number"})})]}),(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"deleteCount"})}),(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"number"})})]}),(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"nodesToInsert"})}),(0,t.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,t.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalNode",children:(0,t.jsx)(l.code,{children:"LexicalNode"})}),"[]"]})]})]})]}),"\n",(0,t.jsx)(l.h4,{id:"returns-13",children:"Returns"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.code,{children:"this"})}),"\n",(0,t.jsx)(l.h4,{id:"overrides-8",children:"Overrides"}),"\n",(0,t.jsxs)(l.p,{children:[(0,t.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,t.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode#splice",children:"splice"})]}),"\n",(0,t.jsx)(l.h4,{id:"defined-in-13",children:"Defined in"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-list/src/LexicalListNode.ts#L188",children:"packages/lexical-list/src/LexicalListNode.ts:188"})}),"\n",(0,t.jsx)(l.hr,{}),"\n",(0,t.jsx)(l.h3,{id:"updatedom",children:"updateDOM"}),"\n",(0,t.jsxs)(l.p,{children:["\u25B8 ",(0,t.jsx)(l.strong,{children:"updateDOM"}),"(",(0,t.jsx)(l.code,{children:"prevNode"}),", ",(0,t.jsx)(l.code,{children:"dom"}),", ",(0,t.jsx)(l.code,{children:"config"}),"): ",(0,t.jsx)(l.code,{children:"boolean"})]}),"\n",(0,t.jsx)(l.p,{children:"Called when a node changes and should update the DOM\nin whatever way is necessary to make it align with any changes that might\nhave happened during the update."}),"\n",(0,t.jsx)(l.p,{children:'Returning "true" here will cause lexical to unmount and recreate the DOM node\n(by calling createDOM). You would need to do this if the element tag changes,\nfor instance.'}),"\n",(0,t.jsx)(l.h4,{id:"parameters-8",children:"Parameters"}),"\n",(0,t.jsxs)(l.table,{children:[(0,t.jsx)(l.thead,{children:(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,t.jsxs)(l.tbody,{children:[(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"prevNode"})}),(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"this"})})]}),(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"dom"})}),(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"HTMLElement"})})]}),(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"config"})}),(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorconfig",children:(0,t.jsx)(l.code,{children:"EditorConfig"})})})]})]})]}),"\n",(0,t.jsx)(l.h4,{id:"returns-14",children:"Returns"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.code,{children:"boolean"})}),"\n",(0,t.jsx)(l.h4,{id:"overrides-9",children:"Overrides"}),"\n",(0,t.jsxs)(l.p,{children:[(0,t.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,t.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode#updatedom",children:"updateDOM"})]}),"\n",(0,t.jsx)(l.h4,{id:"defined-in-14",children:"Defined in"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-list/src/LexicalListNode.ts#L139",children:"packages/lexical-list/src/LexicalListNode.ts:139"})}),"\n",(0,t.jsx)(l.hr,{}),"\n",(0,t.jsx)(l.h3,{id:"updatefromjson",children:"updateFromJSON"}),"\n",(0,t.jsxs)(l.p,{children:["\u25B8 ",(0,t.jsx)(l.strong,{children:"updateFromJSON"}),"(",(0,t.jsx)(l.code,{children:"serializedNode"}),"): ",(0,t.jsx)(l.code,{children:"this"})]}),"\n",(0,t.jsx)(l.p,{children:"Update this LexicalNode instance from serialized JSON. It's recommended\nto implement as much logic as possible in this method instead of the\nstatic importJSON method, so that the functionality can be inherited in subclasses."}),"\n",(0,t.jsx)(l.p,{children:"The LexicalUpdateJSON utility type should be used to ignore any type, version,\nor children properties in the JSON so that the extended JSON from subclasses\nare acceptable parameters for the super call."}),"\n",(0,t.jsx)(l.p,{children:"If overridden, this method must call super."}),"\n",(0,t.jsx)(l.h4,{id:"parameters-9",children:"Parameters"}),"\n",(0,t.jsxs)(l.table,{children:[(0,t.jsx)(l.thead,{children:(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,t.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,t.jsx)(l.tbody,{children:(0,t.jsxs)(l.tr,{children:[(0,t.jsx)(l.td,{style:{textAlign:"left"},children:(0,t.jsx)(l.code,{children:"serializedNode"})}),(0,t.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,t.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#lexicalupdatejson",children:(0,t.jsx)(l.code,{children:"LexicalUpdateJSON"})}),"<",(0,t.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical_list#serializedlistnode",children:(0,t.jsx)(l.code,{children:"SerializedListNode"})}),">"]})]})})]}),"\n",(0,t.jsx)(l.h4,{id:"returns-15",children:"Returns"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.code,{children:"this"})}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.strong,{children:(0,t.jsx)(l.code,{children:"Example"})})}),"\n",(0,t.jsx)(l.pre,{children:(0,t.jsx)(l.code,{className:"language-ts",children:"class MyTextNode extends TextNode {\n  // ...\n  static importJSON(serializedNode: SerializedMyTextNode): MyTextNode {\n    return $createMyTextNode()\n      .updateFromJSON(serializedNode);\n  }\n  updateFromJSON(\n    serializedNode: LexicalUpdateJSON<SerializedMyTextNode>,\n  ): this {\n    return super.updateFromJSON(serializedNode)\n      .setMyProperty(serializedNode.myProperty);\n  }\n}\n"})}),"\n",(0,t.jsx)(l.h4,{id:"overrides-10",children:"Overrides"}),"\n",(0,t.jsxs)(l.p,{children:[(0,t.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,t.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode#updatefromjson",children:"updateFromJSON"})]}),"\n",(0,t.jsx)(l.h4,{id:"defined-in-15",children:"Defined in"}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-list/src/LexicalListNode.ts#L149",children:"packages/lexical-list/src/LexicalListNode.ts:149"})})]})}function x(e={}){let{wrapper:l}={...(0,n.a)(),...e.components};return l?(0,t.jsx)(l,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},22840:function(e,l,i){i.d(l,{Z:()=>r,a:()=>d});var s=i(2784);let t={},n=s.createContext(t);function d(e){let l=s.useContext(n);return s.useMemo(function(){return"function"==typeof e?e(l):{...l,...e}},[l,e])}function r(e){let l;return l=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),s.createElement(n.Provider,{value:l},e.children)}}}]);