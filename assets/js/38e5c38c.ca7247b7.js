"use strict";(self.webpackChunk_lexical_website=self.webpackChunk_lexical_website||[]).push([["7981"],{88675:function(e,n,r){r.r(n),r.d(n,{frontMatter:()=>a,default:()=>m,contentTitle:()=>o,assets:()=>l,toc:()=>c,metadata:()=>t});var t=JSON.parse('{"id":"packages/lexical-markdown","title":"@lexical/markdown","description":"See API Documentation","source":"@site/docs/packages/lexical-markdown.md","sourceDirName":"packages","slug":"/packages/lexical-markdown","permalink":"/docs/packages/lexical-markdown","draft":false,"unlisted":false,"editUrl":"https://github.com/QubitPi/lexical/tree/main/packages/lexical-markdown/README.md","tags":[],"version":"current","frontMatter":{"custom_edit_url":"https://github.com/QubitPi/lexical/tree/main/packages/lexical-markdown/README.md"},"sidebar":"docs","previous":{"title":"@lexical/mark","permalink":"/docs/packages/lexical-mark"},"next":{"title":"@lexical/offset","permalink":"/docs/packages/lexical-offset"}}'),s=r(52322),i=r(22840);let a={custom_edit_url:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-markdown/README.md"},o="@lexical/markdown",l={},c=[{value:"Import and export",id:"import-and-export",level:2},{value:"Shortcuts",id:"shortcuts",level:2},{value:"Transformers",id:"transformers",level:2}];function d(e){let n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"lexicalmarkdown",children:(0,s.jsx)(n.code,{children:"@lexical/markdown"})})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://lexical.dev/docs/api/modules/lexical_markdown",children:(0,s.jsx)(n.img,{src:"https://lexical.dev/img/see-api-documentation.svg",alt:"See API Documentation"})})}),"\n",(0,s.jsx)(n.p,{children:"This package contains markdown helpers for Lexical: import, export and shortcuts."}),"\n",(0,s.jsx)(n.h2,{id:"import-and-export",children:"Import and export"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import {\n  $convertFromMarkdownString,\n  $convertToMarkdownString,\n  TRANSFORMERS,\n} from '@lexical/markdown';\n\neditor.update(() => {\n  const markdown = $convertToMarkdownString(TRANSFORMERS);\n  ...\n});\n\neditor.update(() => {\n  $convertFromMarkdownString(markdown, TRANSFORMERS);\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["It can also be used for initializing editor's state from markdown string. Here's an example with react ",(0,s.jsx)(n.code,{children:"<RichTextPlugin>"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"<LexicalComposer initialConfig={{\n  editorState: () => $convertFromMarkdownString(markdown, TRANSFORMERS)\n}}>\n  <RichTextPlugin />\n</LexicalComposer>\n"})}),"\n",(0,s.jsx)(n.h2,{id:"shortcuts",children:"Shortcuts"}),"\n",(0,s.jsxs)(n.p,{children:["Can use ",(0,s.jsx)(n.code,{children:"<MarkdownShortcutPlugin>"})," if using React"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"import { TRANSFORMERS } from '@lexical/markdown';\nimport {MarkdownShortcutPlugin} from '@lexical/react/LexicalMarkdownShortcutPlugin';\n\n<LexicalComposer>\n  <MarkdownShortcutPlugin transformers={TRANSFORMERS} />\n</LexicalComposer>\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Or ",(0,s.jsx)(n.code,{children:"registerMarkdownShortcuts"})," to register it manually:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import {\n  registerMarkdownShortcuts,\n  TRANSFORMERS,\n} from '@lexical/markdown';\n\nconst editor = createEditor(...);\nregisterMarkdownShortcuts(editor, TRANSFORMERS);\n"})}),"\n",(0,s.jsx)(n.h2,{id:"transformers",children:"Transformers"}),"\n",(0,s.jsxs)(n.p,{children:["Markdown functionality relies on transformers configuration. It's an array of objects that define how certain text or nodes\nare processed during import, export or while typing. ",(0,s.jsx)(n.code,{children:"@lexical/markdown"})," package provides set of built-in transformers:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// Element transformers\nUNORDERED_LIST\nCODE\nHEADING\nORDERED_LIST\nQUOTE\n\n// Text format transformers\nBOLD_ITALIC_STAR\nBOLD_ITALIC_UNDERSCORE\nBOLD_STAR\nBOLD_UNDERSCORE\nINLINE_CODE\nITALIC_STAR\nITALIC_UNDERSCORE\nSTRIKETHROUGH\n\n// Text match transformers\nLINK\n"})}),"\n",(0,s.jsx)(n.p,{children:"And bundles of commonly used transformers:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"TRANSFORMERS"})," - all built-in transformers"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ELEMENT_TRANSFORMERS"})," - all built-in element transformers"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"MULTILINE_ELEMENT_TRANSFORMERS"})," - all built-in multiline element transformers"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"TEXT_FORMAT_TRANSFORMERS"})," - all built-in text format transformers"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"TEXT_MATCH_TRANSFORMERS"})," - all built-in text match transformers"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Transformers are explicitly passed to markdown API allowing application-specific subset of markdown or custom transformers."}),"\n",(0,s.jsx)(n.p,{children:"There're three types of transformers:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Element transformer"})," handles top level elements (lists, headings, quotes, tables or code blocks)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Text format transformer"})," applies text range formats defined in ",(0,s.jsx)(n.code,{children:"TextFormatType"})," (bold, italic, underline, strikethrough, code, subscript and superscript)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Text match transformer"})," relies on matching leaf text node content"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["See ",(0,s.jsx)(n.code,{children:"MarkdownTransformers.js"})," for transformer implementation examples"]})]})}function m(e={}){let{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},22840:function(e,n,r){r.d(n,{Z:()=>o,a:()=>a});var t=r(2784);let s={},i=t.createContext(s);function a(e){let n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);