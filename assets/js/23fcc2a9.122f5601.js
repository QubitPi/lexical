"use strict";(self.webpackChunk_lexical_website=self.webpackChunk_lexical_website||[]).push([["8123"],{73324:function(e,i,l){l.r(i),l.d(i,{frontMatter:()=>d,default:()=>x,contentTitle:()=>s,assets:()=>t,toc:()=>a,metadata:()=>n});var n=JSON.parse('{"id":"api/interfaces/lexical.BaseCaret","title":"Interface: BaseCaret<T, D, Type>","description":"lexical.BaseCaret","source":"@site/docs/api/interfaces/lexical.BaseCaret.md","sourceDirName":"api/interfaces","slug":"/api/interfaces/lexical.BaseCaret","permalink":"/docs/api/interfaces/lexical.BaseCaret","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","frontMatter":{"id":"lexical.BaseCaret","title":"Interface: BaseCaret<T, D, Type>","custom_edit_url":null},"sidebar":"api","previous":{"title":"TableSelection","permalink":"/docs/api/classes/lexical_table.TableSelection"},"next":{"title":"BaseSelection","permalink":"/docs/api/interfaces/lexical.BaseSelection"}}'),r=l(52322),c=l(22840);let d={id:"lexical.BaseCaret",title:"Interface: BaseCaret<T, D, Type>",custom_edit_url:null},s=void 0,t={},a=[{value:"Type parameters",id:"type-parameters",level:2},{value:"Hierarchy",id:"hierarchy",level:2},{value:"Properties",id:"properties",level:2},{value:"direction",id:"direction",level:3},{value:"Defined in",id:"defined-in",level:4},{value:"getAdjacentCaret",id:"getadjacentcaret",level:3},{value:"Type declaration",id:"type-declaration",level:4},{value:"Returns",id:"returns",level:5},{value:"Defined in",id:"defined-in-1",level:4},{value:"getNodeAtCaret",id:"getnodeatcaret",level:3},{value:"Type declaration",id:"type-declaration-1",level:4},{value:"Returns",id:"returns-1",level:5},{value:"Defined in",id:"defined-in-2",level:4},{value:"getParentAtCaret",id:"getparentatcaret",level:3},{value:"Type declaration",id:"type-declaration-2",level:4},{value:"Returns",id:"returns-2",level:5},{value:"Defined in",id:"defined-in-3",level:4},{value:"getSiblingCaret",id:"getsiblingcaret",level:3},{value:"Type declaration",id:"type-declaration-3",level:4},{value:"Returns",id:"returns-3",level:5},{value:"Defined in",id:"defined-in-4",level:4},{value:"insert",id:"insert",level:3},{value:"Type declaration",id:"type-declaration-4",level:4},{value:"Parameters",id:"parameters",level:5},{value:"Returns",id:"returns-4",level:5},{value:"Defined in",id:"defined-in-5",level:4},{value:"origin",id:"origin",level:3},{value:"Defined in",id:"defined-in-6",level:4},{value:"remove",id:"remove",level:3},{value:"Type declaration",id:"type-declaration-5",level:4},{value:"Returns",id:"returns-5",level:5},{value:"Defined in",id:"defined-in-7",level:4},{value:"replaceOrInsert",id:"replaceorinsert",level:3},{value:"Type declaration",id:"type-declaration-6",level:4},{value:"Parameters",id:"parameters-1",level:5},{value:"Returns",id:"returns-6",level:5},{value:"Defined in",id:"defined-in-8",level:4},{value:"splice",id:"splice",level:3},{value:"Type declaration",id:"type-declaration-7",level:4},{value:"Parameters",id:"parameters-2",level:5},{value:"Returns",id:"returns-7",level:5},{value:"Defined in",id:"defined-in-9",level:4},{value:"type",id:"type",level:3},{value:"Defined in",id:"defined-in-10",level:4}];function h(e){let i={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",h5:"h5",hr:"hr",li:"li",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,c.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.a,{href:"/docs/api/modules/lexical",children:"lexical"}),".BaseCaret"]}),"\n",(0,r.jsx)(i.h2,{id:"type-parameters",children:"Type parameters"}),"\n",(0,r.jsxs)(i.table,{children:[(0,r.jsx)(i.thead,{children:(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,r.jsx)(i.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,r.jsxs)(i.tbody,{children:[(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{style:{textAlign:"left"},children:(0,r.jsx)(i.code,{children:"T"})}),(0,r.jsxs)(i.td,{style:{textAlign:"left"},children:["extends ",(0,r.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,r.jsx)(i.code,{children:"LexicalNode"})})]})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{style:{textAlign:"left"},children:(0,r.jsx)(i.code,{children:"D"})}),(0,r.jsxs)(i.td,{style:{textAlign:"left"},children:["extends ",(0,r.jsx)(i.a,{href:"/docs/api/modules/lexical#caretdirection",children:(0,r.jsx)(i.code,{children:"CaretDirection"})})]})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{style:{textAlign:"left"},children:(0,r.jsx)(i.code,{children:"Type"})}),(0,r.jsx)(i.td,{style:{textAlign:"left"},children:(0,r.jsx)(i.code,{children:"Type"})})]})]})]}),"\n",(0,r.jsx)(i.h2,{id:"hierarchy",children:"Hierarchy"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:["\n",(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.code,{children:"Iterable"}),"<",(0,r.jsx)(i.a,{href:"/docs/api/interfaces/lexical.SiblingCaret",children:(0,r.jsx)(i.code,{children:"SiblingCaret"})}),"<",(0,r.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,r.jsx)(i.code,{children:"LexicalNode"})}),", ",(0,r.jsx)(i.code,{children:"D"}),">>"]}),"\n",(0,r.jsxs)(i.p,{children:["\u21B3 ",(0,r.jsx)(i.strong,{children:(0,r.jsx)(i.code,{children:"BaseCaret"})})]}),"\n",(0,r.jsxs)(i.p,{children:["\u21B3\u21B3 ",(0,r.jsx)(i.a,{href:"/docs/api/interfaces/lexical.ChildCaret",children:(0,r.jsx)(i.code,{children:"ChildCaret"})})]}),"\n",(0,r.jsxs)(i.p,{children:["\u21B3\u21B3 ",(0,r.jsx)(i.a,{href:"/docs/api/interfaces/lexical.SiblingCaret",children:(0,r.jsx)(i.code,{children:"SiblingCaret"})})]}),"\n",(0,r.jsxs)(i.p,{children:["\u21B3\u21B3 ",(0,r.jsx)(i.a,{href:"/docs/api/interfaces/lexical.TextPointCaret",children:(0,r.jsx)(i.code,{children:"TextPointCaret"})})]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(i.h2,{id:"properties",children:"Properties"}),"\n",(0,r.jsx)(i.h3,{id:"direction",children:"direction"}),"\n",(0,r.jsxs)(i.p,{children:["\u2022 ",(0,r.jsx)(i.code,{children:"Readonly"})," ",(0,r.jsx)(i.strong,{children:"direction"}),": ",(0,r.jsx)(i.code,{children:"D"})]}),"\n",(0,r.jsx)(i.p,{children:"next if pointing at the next sibling or first child, previous if pointing at the previous sibling or last child"}),"\n",(0,r.jsx)(i.h4,{id:"defined-in",children:"Defined in"}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L57",children:"packages/lexical/src/caret/LexicalCaret.ts:57"})}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsx)(i.h3,{id:"getadjacentcaret",children:"getAdjacentCaret"}),"\n",(0,r.jsxs)(i.p,{children:["\u2022 ",(0,r.jsx)(i.strong,{children:"getAdjacentCaret"}),": () => ",(0,r.jsx)(i.code,{children:"null"})," | ",(0,r.jsx)(i.a,{href:"/docs/api/interfaces/lexical.SiblingCaret",children:(0,r.jsx)(i.code,{children:"SiblingCaret"})}),"<",(0,r.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,r.jsx)(i.code,{children:"LexicalNode"})}),", ",(0,r.jsx)(i.code,{children:"D"}),">"]}),"\n",(0,r.jsx)(i.p,{children:"Get a new SiblingCaret from getNodeAtCaret() in the same direction."}),"\n",(0,r.jsx)(i.h4,{id:"type-declaration",children:"Type declaration"}),"\n",(0,r.jsxs)(i.p,{children:["\u25B8 (): ",(0,r.jsx)(i.code,{children:"null"})," | ",(0,r.jsx)(i.a,{href:"/docs/api/interfaces/lexical.SiblingCaret",children:(0,r.jsx)(i.code,{children:"SiblingCaret"})}),"<",(0,r.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,r.jsx)(i.code,{children:"LexicalNode"})}),", ",(0,r.jsx)(i.code,{children:"D"}),">"]}),"\n",(0,r.jsx)(i.h5,{id:"returns",children:"Returns"}),"\n",(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.code,{children:"null"})," | ",(0,r.jsx)(i.a,{href:"/docs/api/interfaces/lexical.SiblingCaret",children:(0,r.jsx)(i.code,{children:"SiblingCaret"})}),"<",(0,r.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,r.jsx)(i.code,{children:"LexicalNode"})}),", ",(0,r.jsx)(i.code,{children:"D"}),">"]}),"\n",(0,r.jsx)(i.h4,{id:"defined-in-1",children:"Defined in"}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L63",children:"packages/lexical/src/caret/LexicalCaret.ts:63"})}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsx)(i.h3,{id:"getnodeatcaret",children:"getNodeAtCaret"}),"\n",(0,r.jsxs)(i.p,{children:["\u2022 ",(0,r.jsx)(i.strong,{children:"getNodeAtCaret"}),": () => ",(0,r.jsx)(i.code,{children:"null"})," | ",(0,r.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,r.jsx)(i.code,{children:"LexicalNode"})})]}),"\n",(0,r.jsx)(i.p,{children:"Get the node connected to the origin in the caret's direction, or null if there is no node"}),"\n",(0,r.jsx)(i.h4,{id:"type-declaration-1",children:"Type declaration"}),"\n",(0,r.jsxs)(i.p,{children:["\u25B8 (): ",(0,r.jsx)(i.code,{children:"null"})," | ",(0,r.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,r.jsx)(i.code,{children:"LexicalNode"})})]}),"\n",(0,r.jsx)(i.h5,{id:"returns-1",children:"Returns"}),"\n",(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.code,{children:"null"})," | ",(0,r.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,r.jsx)(i.code,{children:"LexicalNode"})})]}),"\n",(0,r.jsx)(i.h4,{id:"defined-in-2",children:"Defined in"}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L61",children:"packages/lexical/src/caret/LexicalCaret.ts:61"})}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsx)(i.h3,{id:"getparentatcaret",children:"getParentAtCaret"}),"\n",(0,r.jsxs)(i.p,{children:["\u2022 ",(0,r.jsx)(i.strong,{children:"getParentAtCaret"}),": () => ",(0,r.jsx)(i.code,{children:"null"})," | ",(0,r.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode",children:(0,r.jsx)(i.code,{children:"ElementNode"})})]}),"\n",(0,r.jsxs)(i.p,{children:["Get the ElementNode that is the logical parent (",(0,r.jsx)(i.code,{children:"origin"})," for ",(0,r.jsx)(i.code,{children:"ChildCaret"}),", ",(0,r.jsx)(i.code,{children:"origin.getParent()"})," for ",(0,r.jsx)(i.code,{children:"SiblingCaret"}),")"]}),"\n",(0,r.jsx)(i.h4,{id:"type-declaration-2",children:"Type declaration"}),"\n",(0,r.jsxs)(i.p,{children:["\u25B8 (): ",(0,r.jsx)(i.code,{children:"null"})," | ",(0,r.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode",children:(0,r.jsx)(i.code,{children:"ElementNode"})})]}),"\n",(0,r.jsx)(i.h5,{id:"returns-2",children:"Returns"}),"\n",(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.code,{children:"null"})," | ",(0,r.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode",children:(0,r.jsx)(i.code,{children:"ElementNode"})})]}),"\n",(0,r.jsx)(i.h4,{id:"defined-in-3",children:"Defined in"}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L59",children:"packages/lexical/src/caret/LexicalCaret.ts:59"})}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsx)(i.h3,{id:"getsiblingcaret",children:"getSiblingCaret"}),"\n",(0,r.jsxs)(i.p,{children:["\u2022 ",(0,r.jsx)(i.strong,{children:"getSiblingCaret"}),": () => ",(0,r.jsx)(i.a,{href:"/docs/api/interfaces/lexical.SiblingCaret",children:(0,r.jsx)(i.code,{children:"SiblingCaret"})}),"<",(0,r.jsx)(i.code,{children:"T"}),", ",(0,r.jsx)(i.code,{children:"D"}),">"]}),"\n",(0,r.jsx)(i.p,{children:"Get a new SiblingCaret with this same node"}),"\n",(0,r.jsx)(i.h4,{id:"type-declaration-3",children:"Type declaration"}),"\n",(0,r.jsxs)(i.p,{children:["\u25B8 (): ",(0,r.jsx)(i.a,{href:"/docs/api/interfaces/lexical.SiblingCaret",children:(0,r.jsx)(i.code,{children:"SiblingCaret"})}),"<",(0,r.jsx)(i.code,{children:"T"}),", ",(0,r.jsx)(i.code,{children:"D"}),">"]}),"\n",(0,r.jsx)(i.h5,{id:"returns-3",children:"Returns"}),"\n",(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.a,{href:"/docs/api/interfaces/lexical.SiblingCaret",children:(0,r.jsx)(i.code,{children:"SiblingCaret"})}),"<",(0,r.jsx)(i.code,{children:"T"}),", ",(0,r.jsx)(i.code,{children:"D"}),">"]}),"\n",(0,r.jsx)(i.h4,{id:"defined-in-4",children:"Defined in"}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L67",children:"packages/lexical/src/caret/LexicalCaret.ts:67"})}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsx)(i.h3,{id:"insert",children:"insert"}),"\n",(0,r.jsxs)(i.p,{children:["\u2022 ",(0,r.jsx)(i.strong,{children:"insert"}),": (",(0,r.jsx)(i.code,{children:"node"}),": ",(0,r.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,r.jsx)(i.code,{children:"LexicalNode"})}),") => ",(0,r.jsx)(i.code,{children:"this"})]}),"\n",(0,r.jsxs)(i.p,{children:["Insert a node connected to origin in this direction (before the node that this caret is pointing towards, if any existed).\nFor a ",(0,r.jsx)(i.code,{children:"SiblingCaret"})," this is ",(0,r.jsx)(i.code,{children:"origin.insertAfter(node)"})," for next, or ",(0,r.jsx)(i.code,{children:"origin.insertBefore(node)"})," for previous.\nFor a ",(0,r.jsx)(i.code,{children:"ChildCaret"})," this is ",(0,r.jsx)(i.code,{children:"origin.splice(0, 0, [node])"})," for next or ",(0,r.jsx)(i.code,{children:"origin.append(node)"})," for previous."]}),"\n",(0,r.jsx)(i.h4,{id:"type-declaration-4",children:"Type declaration"}),"\n",(0,r.jsxs)(i.p,{children:["\u25B8 (",(0,r.jsx)(i.code,{children:"node"}),"): ",(0,r.jsx)(i.code,{children:"this"})]}),"\n",(0,r.jsx)(i.h5,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(i.table,{children:[(0,r.jsx)(i.thead,{children:(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,r.jsx)(i.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,r.jsx)(i.tbody,{children:(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{style:{textAlign:"left"},children:(0,r.jsx)(i.code,{children:"node"})}),(0,r.jsx)(i.td,{style:{textAlign:"left"},children:(0,r.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,r.jsx)(i.code,{children:"LexicalNode"})})})]})})]}),"\n",(0,r.jsx)(i.h5,{id:"returns-4",children:"Returns"}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.code,{children:"this"})}),"\n",(0,r.jsx)(i.h4,{id:"defined-in-5",children:"Defined in"}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L75",children:"packages/lexical/src/caret/LexicalCaret.ts:75"})}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsx)(i.h3,{id:"origin",children:"origin"}),"\n",(0,r.jsxs)(i.p,{children:["\u2022 ",(0,r.jsx)(i.code,{children:"Readonly"})," ",(0,r.jsx)(i.strong,{children:"origin"}),": ",(0,r.jsx)(i.code,{children:"T"})]}),"\n",(0,r.jsx)(i.p,{children:"The origin node of this caret, typically this is what you will use in traversals"}),"\n",(0,r.jsx)(i.h4,{id:"defined-in-6",children:"Defined in"}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L53",children:"packages/lexical/src/caret/LexicalCaret.ts:53"})}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsx)(i.h3,{id:"remove",children:"remove"}),"\n",(0,r.jsxs)(i.p,{children:["\u2022 ",(0,r.jsx)(i.strong,{children:"remove"}),": () => ",(0,r.jsx)(i.code,{children:"this"})]}),"\n",(0,r.jsx)(i.p,{children:"Remove the getNodeAtCaret() node that this caret is pointing towards, if it exists"}),"\n",(0,r.jsx)(i.h4,{id:"type-declaration-5",children:"Type declaration"}),"\n",(0,r.jsxs)(i.p,{children:["\u25B8 (): ",(0,r.jsx)(i.code,{children:"this"})]}),"\n",(0,r.jsx)(i.h5,{id:"returns-5",children:"Returns"}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.code,{children:"this"})}),"\n",(0,r.jsx)(i.h4,{id:"defined-in-7",children:"Defined in"}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L69",children:"packages/lexical/src/caret/LexicalCaret.ts:69"})}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsx)(i.h3,{id:"replaceorinsert",children:"replaceOrInsert"}),"\n",(0,r.jsxs)(i.p,{children:["\u2022 ",(0,r.jsx)(i.strong,{children:"replaceOrInsert"}),": (",(0,r.jsx)(i.code,{children:"node"}),": ",(0,r.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,r.jsx)(i.code,{children:"LexicalNode"})}),", ",(0,r.jsx)(i.code,{children:"includeChildren?"}),": ",(0,r.jsx)(i.code,{children:"boolean"}),") => ",(0,r.jsx)(i.code,{children:"this"})]}),"\n",(0,r.jsx)(i.p,{children:"If getNodeAtCaret() is not null then replace it with node, otherwise insert node"}),"\n",(0,r.jsx)(i.h4,{id:"type-declaration-6",children:"Type declaration"}),"\n",(0,r.jsxs)(i.p,{children:["\u25B8 (",(0,r.jsx)(i.code,{children:"node"}),", ",(0,r.jsx)(i.code,{children:"includeChildren?"}),"): ",(0,r.jsx)(i.code,{children:"this"})]}),"\n",(0,r.jsx)(i.h5,{id:"parameters-1",children:"Parameters"}),"\n",(0,r.jsxs)(i.table,{children:[(0,r.jsx)(i.thead,{children:(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,r.jsx)(i.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,r.jsxs)(i.tbody,{children:[(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{style:{textAlign:"left"},children:(0,r.jsx)(i.code,{children:"node"})}),(0,r.jsx)(i.td,{style:{textAlign:"left"},children:(0,r.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,r.jsx)(i.code,{children:"LexicalNode"})})})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{style:{textAlign:"left"},children:(0,r.jsx)(i.code,{children:"includeChildren?"})}),(0,r.jsx)(i.td,{style:{textAlign:"left"},children:(0,r.jsx)(i.code,{children:"boolean"})})]})]})]}),"\n",(0,r.jsx)(i.h5,{id:"returns-6",children:"Returns"}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.code,{children:"this"})}),"\n",(0,r.jsx)(i.h4,{id:"defined-in-8",children:"Defined in"}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L77",children:"packages/lexical/src/caret/LexicalCaret.ts:77"})}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsx)(i.h3,{id:"splice",children:"splice"}),"\n",(0,r.jsxs)(i.p,{children:["\u2022 ",(0,r.jsx)(i.strong,{children:"splice"}),": (",(0,r.jsx)(i.code,{children:"deleteCount"}),": ",(0,r.jsx)(i.code,{children:"number"}),", ",(0,r.jsx)(i.code,{children:"nodes"}),": ",(0,r.jsx)(i.code,{children:"Iterable"}),"<",(0,r.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,r.jsx)(i.code,{children:"LexicalNode"})}),">, ",(0,r.jsx)(i.code,{children:"nodesDirection?"}),": ",(0,r.jsx)(i.a,{href:"/docs/api/modules/lexical#caretdirection",children:(0,r.jsx)(i.code,{children:"CaretDirection"})}),") => ",(0,r.jsx)(i.code,{children:"this"})]}),"\n",(0,r.jsx)(i.p,{children:"Splice an iterable (typically an Array) of nodes into this location."}),"\n",(0,r.jsx)(i.h4,{id:"type-declaration-7",children:"Type declaration"}),"\n",(0,r.jsxs)(i.p,{children:["\u25B8 (",(0,r.jsx)(i.code,{children:"deleteCount"}),", ",(0,r.jsx)(i.code,{children:"nodes"}),", ",(0,r.jsx)(i.code,{children:"nodesDirection?"}),"): ",(0,r.jsx)(i.code,{children:"this"})]}),"\n",(0,r.jsx)(i.h5,{id:"parameters-2",children:"Parameters"}),"\n",(0,r.jsxs)(i.table,{children:[(0,r.jsx)(i.thead,{children:(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,r.jsx)(i.th,{style:{textAlign:"left"},children:"Type"}),(0,r.jsx)(i.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,r.jsxs)(i.tbody,{children:[(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{style:{textAlign:"left"},children:(0,r.jsx)(i.code,{children:"deleteCount"})}),(0,r.jsx)(i.td,{style:{textAlign:"left"},children:(0,r.jsx)(i.code,{children:"number"})}),(0,r.jsx)(i.td,{style:{textAlign:"left"},children:"The number of existing nodes to replace or delete"})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{style:{textAlign:"left"},children:(0,r.jsx)(i.code,{children:"nodes"})}),(0,r.jsxs)(i.td,{style:{textAlign:"left"},children:[(0,r.jsx)(i.code,{children:"Iterable"}),"<",(0,r.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,r.jsx)(i.code,{children:"LexicalNode"})}),">"]}),(0,r.jsx)(i.td,{style:{textAlign:"left"},children:"An iterable of nodes that will be inserted in this location, using replace instead of insert for the first deleteCount nodes"})]}),(0,r.jsxs)(i.tr,{children:[(0,r.jsx)(i.td,{style:{textAlign:"left"},children:(0,r.jsx)(i.code,{children:"nodesDirection?"})}),(0,r.jsx)(i.td,{style:{textAlign:"left"},children:(0,r.jsx)(i.a,{href:"/docs/api/modules/lexical#caretdirection",children:(0,r.jsx)(i.code,{children:"CaretDirection"})})}),(0,r.jsx)(i.td,{style:{textAlign:"left"},children:"The direction of the nodes iterable, defaults to 'next'"})]})]})]}),"\n",(0,r.jsx)(i.h5,{id:"returns-7",children:"Returns"}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.code,{children:"this"})}),"\n",(0,r.jsx)(i.h4,{id:"defined-in-9",children:"Defined in"}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L85",children:"packages/lexical/src/caret/LexicalCaret.ts:85"})}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsx)(i.h3,{id:"type",children:"type"}),"\n",(0,r.jsxs)(i.p,{children:["\u2022 ",(0,r.jsx)(i.code,{children:"Readonly"})," ",(0,r.jsx)(i.strong,{children:"type"}),": ",(0,r.jsx)(i.code,{children:"Type"})]}),"\n",(0,r.jsx)(i.p,{children:"sibling for a SiblingCaret (pointing at the next or previous sibling) or child for a ChildCaret (pointing at the first or last child)"}),"\n",(0,r.jsx)(i.h4,{id:"defined-in-10",children:"Defined in"}),"\n",(0,r.jsx)(i.p,{children:(0,r.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L55",children:"packages/lexical/src/caret/LexicalCaret.ts:55"})})]})}function x(e={}){let{wrapper:i}={...(0,c.a)(),...e.components};return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},22840:function(e,i,l){l.d(i,{Z:()=>s,a:()=>d});var n=l(2784);let r={},c=n.createContext(r);function d(e){let i=n.useContext(c);return n.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function s(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),n.createElement(c.Provider,{value:i},e.children)}}}]);