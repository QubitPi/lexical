"use strict";(self.webpackChunk_lexical_website=self.webpackChunk_lexical_website||[]).push([["8075"],{73503:function(e,l,i){i.r(l),i.d(l,{frontMatter:()=>r,default:()=>o,contentTitle:()=>t,assets:()=>c,toc:()=>a,metadata:()=>s});var s=JSON.parse('{"id":"api/classes/lexical_table.TableRowNode","title":"Class: TableRowNode","description":"@lexical/table.TableRowNode","source":"@site/docs/api/classes/lexical_table.TableRowNode.md","sourceDirName":"api/classes","slug":"/api/classes/lexical_table.TableRowNode","permalink":"/docs/api/classes/lexical_table.TableRowNode","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","frontMatter":{"id":"lexical_table.TableRowNode","title":"Class: TableRowNode","custom_edit_url":null},"sidebar":"api","previous":{"title":"TableObserver","permalink":"/docs/api/classes/lexical_table.TableObserver"},"next":{"title":"TableSelection","permalink":"/docs/api/classes/lexical_table.TableSelection"}}'),n=i(52322),d=i(22840);let r={id:"lexical_table.TableRowNode",title:"Class: TableRowNode",custom_edit_url:null},t=void 0,c={},a=[{value:"Hierarchy",id:"hierarchy",level:2},{value:"Constructors",id:"constructors",level:2},{value:"constructor",id:"constructor",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Overrides",id:"overrides",level:4},{value:"Defined in",id:"defined-in",level:4},{value:"Methods",id:"methods",level:2},{value:"canBeEmpty",id:"canbeempty",level:3},{value:"Returns",id:"returns-1",level:4},{value:"Overrides",id:"overrides-1",level:4},{value:"Defined in",id:"defined-in-1",level:4},{value:"canIndent",id:"canindent",level:3},{value:"Returns",id:"returns-2",level:4},{value:"Overrides",id:"overrides-2",level:4},{value:"Defined in",id:"defined-in-2",level:4},{value:"createDOM",id:"createdom",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-3",level:4},{value:"Overrides",id:"overrides-3",level:4},{value:"Defined in",id:"defined-in-3",level:4},{value:"exportJSON",id:"exportjson",level:3},{value:"Returns",id:"returns-4",level:4},{value:"Overrides",id:"overrides-4",level:4},{value:"Defined in",id:"defined-in-4",level:4},{value:"extractWithChild",id:"extractwithchild",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-5",level:4},{value:"Overrides",id:"overrides-5",level:4},{value:"Defined in",id:"defined-in-5",level:4},{value:"getHeight",id:"getheight",level:3},{value:"Returns",id:"returns-6",level:4},{value:"Defined in",id:"defined-in-6",level:4},{value:"isShadowRoot",id:"isshadowroot",level:3},{value:"Returns",id:"returns-7",level:4},{value:"Overrides",id:"overrides-6",level:4},{value:"Defined in",id:"defined-in-7",level:4},{value:"setHeight",id:"setheight",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-8",level:4},{value:"Defined in",id:"defined-in-8",level:4},{value:"updateDOM",id:"updatedom",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-9",level:4},{value:"Overrides",id:"overrides-7",level:4},{value:"Defined in",id:"defined-in-9",level:4},{value:"updateFromJSON",id:"updatefromjson",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-10",level:4},{value:"Overrides",id:"overrides-8",level:4},{value:"Defined in",id:"defined-in-10",level:4},{value:"clone",id:"clone",level:3},{value:"Parameters",id:"parameters-6",level:4},{value:"Returns",id:"returns-11",level:4},{value:"Overrides",id:"overrides-9",level:4},{value:"Defined in",id:"defined-in-11",level:4},{value:"getType",id:"gettype",level:3},{value:"Returns",id:"returns-12",level:4},{value:"Overrides",id:"overrides-10",level:4},{value:"Defined in",id:"defined-in-12",level:4},{value:"importDOM",id:"importdom",level:3},{value:"Returns",id:"returns-13",level:4},{value:"Overrides",id:"overrides-11",level:4},{value:"Defined in",id:"defined-in-13",level:4},{value:"importJSON",id:"importjson",level:3},{value:"Parameters",id:"parameters-7",level:4},{value:"Returns",id:"returns-14",level:4},{value:"Overrides",id:"overrides-12",level:4},{value:"Defined in",id:"defined-in-14",level:4}];function h(e){let l={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,d.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/modules/lexical_table",children:"@lexical/table"}),".TableRowNode"]}),"\n",(0,n.jsx)(l.h2,{id:"hierarchy",children:"Hierarchy"}),"\n",(0,n.jsxs)(l.ul,{children:["\n",(0,n.jsxs)(l.li,{children:["\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode",children:(0,n.jsx)(l.code,{children:"ElementNode"})})}),"\n",(0,n.jsxs)(l.p,{children:["\u21B3 ",(0,n.jsx)(l.strong,{children:(0,n.jsx)(l.code,{children:"TableRowNode"})})]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(l.h2,{id:"constructors",children:"Constructors"}),"\n",(0,n.jsx)(l.h3,{id:"constructor",children:"constructor"}),"\n",(0,n.jsxs)(l.p,{children:["\u2022 ",(0,n.jsx)(l.strong,{children:"new TableRowNode"}),"(",(0,n.jsx)(l.code,{children:"height?"}),", ",(0,n.jsx)(l.code,{children:"key?"}),"): ",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical_table.TableRowNode",children:(0,n.jsx)(l.code,{children:"TableRowNode"})})]}),"\n",(0,n.jsx)(l.h4,{id:"parameters",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsxs)(l.tbody,{children:[(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"height?"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"number"})})]}),(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"key?"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"string"})})]})]})]}),"\n",(0,n.jsx)(l.h4,{id:"returns",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical_table.TableRowNode",children:(0,n.jsx)(l.code,{children:"TableRowNode"})})}),"\n",(0,n.jsx)(l.h4,{id:"overrides",children:"Overrides"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode#constructor",children:"constructor"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-table/src/LexicalTableRowNode.ts#L67",children:"packages/lexical-table/src/LexicalTableRowNode.ts:67"})}),"\n",(0,n.jsx)(l.h2,{id:"methods",children:"Methods"}),"\n",(0,n.jsx)(l.h3,{id:"canbeempty",children:"canBeEmpty"}),"\n",(0,n.jsxs)(l.p,{children:["\u25B8 ",(0,n.jsx)(l.strong,{children:"canBeEmpty"}),"(): ",(0,n.jsx)(l.code,{children:"false"})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-1",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"false"})}),"\n",(0,n.jsx)(l.h4,{id:"overrides-1",children:"Overrides"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode#canbeempty",children:"canBeEmpty"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-1",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-table/src/LexicalTableRowNode.ts#L118",children:"packages/lexical-table/src/LexicalTableRowNode.ts:118"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"canindent",children:"canIndent"}),"\n",(0,n.jsxs)(l.p,{children:["\u25B8 ",(0,n.jsx)(l.strong,{children:"canIndent"}),"(): ",(0,n.jsx)(l.code,{children:"false"})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-2",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"false"})}),"\n",(0,n.jsx)(l.h4,{id:"overrides-2",children:"Overrides"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode#canindent",children:"canIndent"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-2",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-table/src/LexicalTableRowNode.ts#L122",children:"packages/lexical-table/src/LexicalTableRowNode.ts:122"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"createdom",children:"createDOM"}),"\n",(0,n.jsxs)(l.p,{children:["\u25B8 ",(0,n.jsx)(l.strong,{children:"createDOM"}),"(",(0,n.jsx)(l.code,{children:"config"}),"): ",(0,n.jsx)(l.code,{children:"HTMLElement"})]}),"\n",(0,n.jsx)(l.p,{children:"Called during the reconciliation process to determine which nodes\nto insert into the DOM for this Lexical Node."}),"\n",(0,n.jsx)(l.p,{children:"This method must return exactly one HTMLElement. Nested elements are not supported."}),"\n",(0,n.jsx)(l.p,{children:"Do not attempt to update the Lexical EditorState during this phase of the update lifecycle."}),"\n",(0,n.jsx)(l.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,n.jsx)(l.tbody,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"config"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.a,{href:"/docs/api/modules/lexical#editorconfig",children:(0,n.jsx)(l.code,{children:"EditorConfig"})})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:"allows access to things like the EditorTheme (to apply classes) during reconciliation."})]})})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-3",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"HTMLElement"})}),"\n",(0,n.jsx)(l.h4,{id:"overrides-3",children:"Overrides"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode#createdom",children:"createDOM"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-3",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-table/src/LexicalTableRowNode.ts#L80",children:"packages/lexical-table/src/LexicalTableRowNode.ts:80"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"exportjson",children:"exportJSON"}),"\n",(0,n.jsxs)(l.p,{children:["\u25B8 ",(0,n.jsx)(l.strong,{children:"exportJSON"}),"(): ",(0,n.jsx)(l.a,{href:"/docs/api/modules/lexical_table#serializedtablerownode",children:(0,n.jsx)(l.code,{children:"SerializedTableRowNode"})})]}),"\n",(0,n.jsxs)(l.p,{children:["Controls how the this node is serialized to JSON. This is important for\ncopy and paste between Lexical editors sharing the same namespace. It's also important\nif you're serializing to JSON for persistent storage somewhere.\nSee ",(0,n.jsx)(l.a,{href:"https://lexical.dev/docs/concepts/serialization#lexical---html",children:"Serialization & Deserialization"}),"."]}),"\n",(0,n.jsx)(l.h4,{id:"returns-4",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"/docs/api/modules/lexical_table#serializedtablerownode",children:(0,n.jsx)(l.code,{children:"SerializedTableRowNode"})})}),"\n",(0,n.jsx)(l.h4,{id:"overrides-4",children:"Overrides"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode#exportjson",children:"exportJSON"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-4",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-table/src/LexicalTableRowNode.ts#L72",children:"packages/lexical-table/src/LexicalTableRowNode.ts:72"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"extractwithchild",children:"extractWithChild"}),"\n",(0,n.jsxs)(l.p,{children:["\u25B8 ",(0,n.jsx)(l.strong,{children:"extractWithChild"}),"(",(0,n.jsx)(l.code,{children:"child"}),", ",(0,n.jsx)(l.code,{children:"selection"}),", ",(0,n.jsx)(l.code,{children:"destination"}),"): ",(0,n.jsx)(l.code,{children:"boolean"})]}),"\n",(0,n.jsx)(l.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsxs)(l.tbody,{children:[(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"child"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,n.jsx)(l.code,{children:"LexicalNode"})})})]}),(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"selection"})}),(0,n.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,n.jsx)(l.code,{children:"null"})," | ",(0,n.jsx)(l.a,{href:"/docs/api/interfaces/lexical.BaseSelection",children:(0,n.jsx)(l.code,{children:"BaseSelection"})})]})]}),(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"destination"})}),(0,n.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,n.jsx)(l.code,{children:'"clone"'})," | ",(0,n.jsx)(l.code,{children:'"html"'})]})]})]})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-5",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"boolean"})}),"\n",(0,n.jsx)(l.h4,{id:"overrides-5",children:"Overrides"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode#extractwithchild",children:"extractWithChild"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-5",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-table/src/LexicalTableRowNode.ts#L92",children:"packages/lexical-table/src/LexicalTableRowNode.ts:92"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"getheight",children:"getHeight"}),"\n",(0,n.jsxs)(l.p,{children:["\u25B8 ",(0,n.jsx)(l.strong,{children:"getHeight"}),"(): ",(0,n.jsx)(l.code,{children:"undefined"})," | ",(0,n.jsx)(l.code,{children:"number"})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-6",children:"Returns"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.code,{children:"undefined"})," | ",(0,n.jsx)(l.code,{children:"number"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-6",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-table/src/LexicalTableRowNode.ts#L110",children:"packages/lexical-table/src/LexicalTableRowNode.ts:110"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"isshadowroot",children:"isShadowRoot"}),"\n",(0,n.jsxs)(l.p,{children:["\u25B8 ",(0,n.jsx)(l.strong,{children:"isShadowRoot"}),"(): ",(0,n.jsx)(l.code,{children:"boolean"})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-7",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"boolean"})}),"\n",(0,n.jsx)(l.h4,{id:"overrides-6",children:"Overrides"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode#isshadowroot",children:"isShadowRoot"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-7",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-table/src/LexicalTableRowNode.ts#L100",children:"packages/lexical-table/src/LexicalTableRowNode.ts:100"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"setheight",children:"setHeight"}),"\n",(0,n.jsxs)(l.p,{children:["\u25B8 ",(0,n.jsx)(l.strong,{children:"setHeight"}),"(",(0,n.jsx)(l.code,{children:"height?"}),"): ",(0,n.jsx)(l.code,{children:"this"})]}),"\n",(0,n.jsx)(l.h4,{id:"parameters-3",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(l.tbody,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"height?"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"number"})})]})})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-8",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"this"})}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-8",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-table/src/LexicalTableRowNode.ts#L104",children:"packages/lexical-table/src/LexicalTableRowNode.ts:104"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"updatedom",children:"updateDOM"}),"\n",(0,n.jsxs)(l.p,{children:["\u25B8 ",(0,n.jsx)(l.strong,{children:"updateDOM"}),"(",(0,n.jsx)(l.code,{children:"prevNode"}),"): ",(0,n.jsx)(l.code,{children:"boolean"})]}),"\n",(0,n.jsx)(l.p,{children:"Called when a node changes and should update the DOM\nin whatever way is necessary to make it align with any changes that might\nhave happened during the update."}),"\n",(0,n.jsx)(l.p,{children:'Returning "true" here will cause lexical to unmount and recreate the DOM node\n(by calling createDOM). You would need to do this if the element tag changes,\nfor instance.'}),"\n",(0,n.jsx)(l.h4,{id:"parameters-4",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(l.tbody,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"prevNode"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"this"})})]})})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-9",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"boolean"})}),"\n",(0,n.jsx)(l.h4,{id:"overrides-7",children:"Overrides"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode#updatedom",children:"updateDOM"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-9",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-table/src/LexicalTableRowNode.ts#L114",children:"packages/lexical-table/src/LexicalTableRowNode.ts:114"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"updatefromjson",children:"updateFromJSON"}),"\n",(0,n.jsxs)(l.p,{children:["\u25B8 ",(0,n.jsx)(l.strong,{children:"updateFromJSON"}),"(",(0,n.jsx)(l.code,{children:"serializedNode"}),"): ",(0,n.jsx)(l.code,{children:"this"})]}),"\n",(0,n.jsx)(l.p,{children:"Update this LexicalNode instance from serialized JSON. It's recommended\nto implement as much logic as possible in this method instead of the\nstatic importJSON method, so that the functionality can be inherited in subclasses."}),"\n",(0,n.jsx)(l.p,{children:"The LexicalUpdateJSON utility type should be used to ignore any type, version,\nor children properties in the JSON so that the extended JSON from subclasses\nare acceptable parameters for the super call."}),"\n",(0,n.jsx)(l.p,{children:"If overridden, this method must call super."}),"\n",(0,n.jsx)(l.h4,{id:"parameters-5",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(l.tbody,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"serializedNode"})}),(0,n.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,n.jsx)(l.a,{href:"/docs/api/modules/lexical#lexicalupdatejson",children:(0,n.jsx)(l.code,{children:"LexicalUpdateJSON"})}),"<",(0,n.jsx)(l.a,{href:"/docs/api/modules/lexical_table#serializedtablerownode",children:(0,n.jsx)(l.code,{children:"SerializedTableRowNode"})}),">"]})]})})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-10",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"this"})}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.strong,{children:(0,n.jsx)(l.code,{children:"Example"})})}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-ts",children:"class MyTextNode extends TextNode {\n  // ...\n  static importJSON(serializedNode: SerializedMyTextNode): MyTextNode {\n    return $createMyTextNode()\n      .updateFromJSON(serializedNode);\n  }\n  updateFromJSON(\n    serializedNode: LexicalUpdateJSON<SerializedMyTextNode>,\n  ): this {\n    return super.updateFromJSON(serializedNode)\n      .setMyProperty(serializedNode.myProperty);\n  }\n}\n"})}),"\n",(0,n.jsx)(l.h4,{id:"overrides-8",children:"Overrides"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode#updatefromjson",children:"updateFromJSON"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-10",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-table/src/LexicalTableRowNode.ts#L59",children:"packages/lexical-table/src/LexicalTableRowNode.ts:59"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"clone",children:"clone"}),"\n",(0,n.jsxs)(l.p,{children:["\u25B8 ",(0,n.jsx)(l.strong,{children:"clone"}),"(",(0,n.jsx)(l.code,{children:"node"}),"): ",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical_table.TableRowNode",children:(0,n.jsx)(l.code,{children:"TableRowNode"})})]}),"\n",(0,n.jsx)(l.p,{children:"Clones this node, creating a new node with a different key\nand adding it to the EditorState (but not attaching it anywhere!). All nodes must\nimplement this method."}),"\n",(0,n.jsx)(l.h4,{id:"parameters-6",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(l.tbody,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"node"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical_table.TableRowNode",children:(0,n.jsx)(l.code,{children:"TableRowNode"})})})]})})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-11",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical_table.TableRowNode",children:(0,n.jsx)(l.code,{children:"TableRowNode"})})}),"\n",(0,n.jsx)(l.h4,{id:"overrides-9",children:"Overrides"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode#clone",children:"clone"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-11",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-table/src/LexicalTableRowNode.ts#L42",children:"packages/lexical-table/src/LexicalTableRowNode.ts:42"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"gettype",children:"getType"}),"\n",(0,n.jsxs)(l.p,{children:["\u25B8 ",(0,n.jsx)(l.strong,{children:"getType"}),"(): ",(0,n.jsx)(l.code,{children:"string"})]}),"\n",(0,n.jsx)(l.p,{children:"Returns the string type of this node. Every node must\nimplement this and it MUST BE UNIQUE amongst nodes registered\non the editor."}),"\n",(0,n.jsx)(l.h4,{id:"returns-12",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"string"})}),"\n",(0,n.jsx)(l.h4,{id:"overrides-10",children:"Overrides"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode#gettype-1",children:"getType"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-12",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-table/src/LexicalTableRowNode.ts#L38",children:"packages/lexical-table/src/LexicalTableRowNode.ts:38"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"importdom",children:"importDOM"}),"\n",(0,n.jsxs)(l.p,{children:["\u25B8 ",(0,n.jsx)(l.strong,{children:"importDOM"}),"(): ",(0,n.jsx)(l.code,{children:"null"})," | ",(0,n.jsx)(l.a,{href:"/docs/api/modules/lexical#domconversionmap",children:(0,n.jsx)(l.code,{children:"DOMConversionMap"})})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-13",children:"Returns"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.code,{children:"null"})," | ",(0,n.jsx)(l.a,{href:"/docs/api/modules/lexical#domconversionmap",children:(0,n.jsx)(l.code,{children:"DOMConversionMap"})})]}),"\n",(0,n.jsx)(l.h4,{id:"overrides-11",children:"Overrides"}),"\n",(0,n.jsx)(l.p,{children:"ElementNode.importDOM"}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-13",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-table/src/LexicalTableRowNode.ts#L46",children:"packages/lexical-table/src/LexicalTableRowNode.ts:46"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"importjson",children:"importJSON"}),"\n",(0,n.jsxs)(l.p,{children:["\u25B8 ",(0,n.jsx)(l.strong,{children:"importJSON"}),"(",(0,n.jsx)(l.code,{children:"serializedNode"}),"): ",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical_table.TableRowNode",children:(0,n.jsx)(l.code,{children:"TableRowNode"})})]}),"\n",(0,n.jsxs)(l.p,{children:["Controls how the this node is deserialized from JSON. This is usually boilerplate,\nbut provides an abstraction between the node implementation and serialized interface that can\nbe important if you ever make breaking changes to a node schema (by adding or removing properties).\nSee ",(0,n.jsx)(l.a,{href:"https://lexical.dev/docs/concepts/serialization#lexical---html",children:"Serialization & Deserialization"}),"."]}),"\n",(0,n.jsx)(l.h4,{id:"parameters-7",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(l.tbody,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"serializedNode"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.a,{href:"/docs/api/modules/lexical_table#serializedtablerownode",children:(0,n.jsx)(l.code,{children:"SerializedTableRowNode"})})})]})})]}),"\n",(0,n.jsx)(l.h4,{id:"returns-14",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical_table.TableRowNode",children:(0,n.jsx)(l.code,{children:"TableRowNode"})})}),"\n",(0,n.jsx)(l.h4,{id:"overrides-12",children:"Overrides"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,n.jsx)(l.a,{href:"/docs/api/classes/lexical.ElementNode#importjson",children:"importJSON"})]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-14",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-table/src/LexicalTableRowNode.ts#L55",children:"packages/lexical-table/src/LexicalTableRowNode.ts:55"})})]})}function o(e={}){let{wrapper:l}={...(0,d.a)(),...e.components};return l?(0,n.jsx)(l,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},22840:function(e,l,i){i.d(l,{Z:()=>t,a:()=>r});var s=i(2784);let n={},d=s.createContext(n);function r(e){let l=s.useContext(d);return s.useMemo(function(){return"function"==typeof e?e(l):{...l,...e}},[l,e])}function t(e){let l;return l=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),s.createElement(d.Provider,{value:l},e.children)}}}]);