"use strict";(self.webpackChunk_lexical_website=self.webpackChunk_lexical_website||[]).push([["2109"],{53394:function(e,t,n){n.r(t),n.d(t,{frontMatter:()=>o,default:()=>h,contentTitle:()=>l,assets:()=>r,toc:()=>d,metadata:()=>a});var a=JSON.parse('{"id":"concepts/node-state","title":"NodeState","description":"The NodeState API introduced in v0.26.0 allows arbitrary state to be added","source":"@site/docs/concepts/node-state.md","sourceDirName":"concepts","slug":"/concepts/node-state","permalink":"/docs/concepts/node-state","draft":false,"unlisted":false,"editUrl":"https://github.com/QubitPi/lexical/tree/main/packages/lexical-website/docs/concepts/node-state.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Node Replacement","permalink":"/docs/concepts/node-replacement"},"next":{"title":"Key Management","permalink":"/docs/concepts/key-management"}}'),s=n(52322),i=n(22840);let o={},l="NodeState",r={},d=[{value:"Use Case",id:"use-case",level:2},{value:"Stability",id:"stability",level:2},{value:"Usage",id:"usage",level:2},{value:"createState",id:"createstate",level:3},{value:"$getState",id:"getstate",level:3},{value:"$setState",id:"setstate",level:3},{value:"Serialization",id:"serialization",level:2},{value:"Efficiency",id:"efficiency",level:2},{value:"Capabilities",id:"capabilities",level:2},{value:"Node State Style Example",id:"node-state-style-example",level:2}];function c(e){let t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"nodestate",children:"NodeState"})}),"\n",(0,s.jsx)(t.p,{children:"The NodeState API introduced in v0.26.0 allows arbitrary state to be added\nad-hoc to any node in a way that participates with reconciliation, history,\nand JSON serialization."}),"\n",(0,s.jsx)(t.h2,{id:"use-case",children:"Use Case"}),"\n",(0,s.jsx)(t.p,{children:"NodeState allows your application to define keys that can be stored on\nany node with automatic JSON support, you can even add state to the root\nnode to store document-level metadata."}),"\n",(0,s.jsx)(t.admonition,{type:"tip",children:(0,s.jsx)(t.p,{children:"You can even add node state to the RootNode to store document-level metadata,\nwhich wasn't possible at all before!"})}),"\n",(0,s.jsxs)(t.p,{children:["With a combination of NodeState and other APIs such as\n",(0,s.jsx)(t.a,{href:"/docs/concepts/listeners",children:"Listeners"})," or\n",(0,s.jsx)(t.a,{href:"/docs/concepts/transforms",children:"Transforms"})," you can\nlikely shape the editor to meet your needs without having to do much\n",(0,s.jsx)(t.a,{href:"/docs/concepts/node-replacement",children:"Node Customization"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["Even when you are subclassing nodes, using NodeState instead of additional\nproperties to store the node's data can be ",(0,s.jsx)(t.a,{href:"#efficiency",children:"more efficient"}),"\nand will save you from writing a lot of boilerplate in the constructor,\nupdateFromJSON, and exportJSON."]}),"\n",(0,s.jsx)(t.h2,{id:"stability",children:"Stability"}),"\n",(0,s.jsxs)(t.p,{children:["\uD83E\uDDEA This API is experimental, and may evolve without a long deprecation\nperiod. See also ",(0,s.jsx)(t.a,{href:"#capabilities",children:"Capabilities"})," for notes on what it\ncan and can not do out of the box today."]}),"\n",(0,s.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsx)(t.h3,{id:"createstate",children:"createState"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"/docs/api/modules/lexical#createstate",children:"createState"}),"\ncreates a\n",(0,s.jsx)(t.a,{href:"/docs/api/classes/lexical.StateConfig",children:"StateConfig"}),"\nwhich defines the key and configuration for your NodeState value."]}),"\n",(0,s.jsx)(t.p,{children:"The key must be locally unique, two distinct StateConfig must not have the\nsame string key if they are to be used on the same node."}),"\n",(0,s.jsx)(t.p,{children:"Typical usage will look something like this:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"const questionState = createState('question', {\n  parse: (v) => (typeof v === 'string' ? v : ''),\n});\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The required ",(0,s.jsx)(t.code,{children:"parse"})," function serves two purposes:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"It provides a type-safe and runtime-safe way to parse values that were\nserialized to JSON"}),"\n",(0,s.jsxs)(t.li,{children:["When called with ",(0,s.jsx)(t.code,{children:"undefined"})," (or any invalid value) it should return some\ndefault value (which may be ",(0,s.jsx)(t.code,{children:"undefined"})," or ",(0,s.jsx)(t.code,{children:"null"})," or any other value you\nchoose)"]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"In this case, the question must be a string, and the default is an\nempty string."}),"\n",(0,s.jsxs)(t.p,{children:["See the\n",(0,s.jsx)(t.a,{href:"/docs/api/modules/lexical#createstate",children:"createState"}),"\nAPI documentation for more details, there are other optional settings\nthat you may want to define particularly if the value is not a primitive\nvalue such as boolean, string, number, null, or undefined."]}),"\n",(0,s.jsx)(t.admonition,{type:"tip",children:(0,s.jsxs)(t.p,{children:["We recommend building a library of small reusable parse functions for the data\ntypes that you use, or a library that can be used to generate them such as\n",(0,s.jsx)(t.a,{href:"https://zod.dev/",children:"zod"}),",\n",(0,s.jsx)(t.a,{href:"https://arktype.io/",children:"ArkType"}),",\n",(0,s.jsx)(t.a,{href:"https://effect.website/",children:"Effect"}),",\n",(0,s.jsx)(t.a,{href:"https://valibot.dev/",children:"Valibot"}),",\netc. especially when working with non-primitive data types."]})}),"\n",(0,s.jsx)(t.h3,{id:"getstate",children:"$getState"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"/docs/api/modules/lexical#getstate",children:"$getState"})," gets the\nNodeState value from the given node, or the default if that key was never\nset on the node."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"const question = $getState(pollNode, questionState);\n"})}),"\n",(0,s.jsxs)(t.p,{children:["See also\n",(0,s.jsx)(t.a,{href:"/docs/api/modules/lexical#getstatechange",children:"$getStateChange"}),"\nif you need an efficient way to determine if the state has changed on two\nversions of the same node (typically used in updateDOM, but may be useful in\nan update listener or mutation listener)."]}),"\n",(0,s.jsx)(t.h3,{id:"setstate",children:"$setState"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"/docs/api/modules/lexical#setstate",children:"$setState"})," sets the\nNodeState value on the given node."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"const question = $setState(\n  pollNode,\n  questionState,\n  'Are you planning to use NodeState?',\n);\n"})}),"\n",(0,s.jsx)(t.admonition,{type:"tip",children:(0,s.jsxs)(t.p,{children:["The last argument is a ValueOrUpdater, just like with React's useState\nsetters. If you use an updater function and the value does not change,\nthe node and its NodeState ",(0,s.jsx)(t.em,{children:"won't"})," be marked dirty."]})}),"\n",(0,s.jsx)(t.h2,{id:"serialization",children:"Serialization"}),"\n",(0,s.jsxs)(t.p,{children:["The NodeState for a node, if any values are set to non-default values, is\nserialized to a record under a single\n",(0,s.jsx)(t.a,{href:"/docs/api/modules/lexical#node_state_key",children:"NODE_STATE_KEY"}),"\nwhich is equal to ",(0,s.jsx)(t.code,{children:"'$'"}),". In the future, it is expected that nodes will be\nable to declare required state and lift those values to the top-level of\ntheir serialized nodes\n(see ",(0,s.jsx)(t.a,{href:"https://github.com/facebook/lexical/issues/7260",children:"#7260"}),")."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'{\n  "type": "poll",\n  "$": {\n    "question": "Are you planning to use NodeState?",\n  }\n}\n'})}),"\n",(0,s.jsx)(t.admonition,{type:"tip",children:(0,s.jsxs)(t.p,{children:["By default, it is assumed that your parsed values are JSON serializable,\nbut for advanced use cases you may use values such as Date, Map, or Set\nthat need to be transformed before JSON serialization. See the\n",(0,s.jsx)(t.a,{href:"/docs/api/interfaces/lexical.StateValueConfig",children:"StateValueConfig"}),"\nAPI documentation."]})}),"\n",(0,s.jsx)(t.h2,{id:"efficiency",children:"Efficiency"}),"\n",(0,s.jsx)(t.p,{children:"NodeState uses a copy-on-write scheme to manage each node's state. If\nnone of the state has changed, then the NodeState instance will be\nshared across multiple versions of that node."}),"\n",(0,s.jsx)(t.admonition,{type:"info",children:(0,s.jsxs)(t.p,{children:["In a given reconciliation cycle, the first time a Lexical node is marked dirty\nvia ",(0,s.jsx)(t.code,{children:"getWritable"})," will create a new instance of that node. All properties\nof the previous version are set on the new instance. NodeState is stored\nas a single property, and no copying of the internal state is done\nuntil the NodeState itself is marked writable."]})}),"\n",(0,s.jsx)(t.p,{children:"When serializing to JSON, each key will only be stored if the value\nis not equal to the default value. This can save quite a lot of space\nand bandwidth."}),"\n",(0,s.jsx)(t.p,{children:"Parsing and serialization is only done at network boundaries, when\nintegrating with JSON or Yjs. When a value changes from an external\nsource, it is only parsed once the first time it is read.\nValues that do not come from external sources are not parsed, and\nvalues that are not used are never parsed."}),"\n",(0,s.jsx)(t.h2,{id:"capabilities",children:"Capabilities"}),"\n",(0,s.jsx)(t.p,{children:"Current:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Allows you to define and add state to any node"}),"\n",(0,s.jsx)(t.li,{children:"Serializes that state automatically in the node's JSON, supporting\nversioning and copy+paste"}),"\n",(0,s.jsx)(t.li,{children:"Works with the reconciler, TextNodes with differing state will not\nbe implicitly merged"}),"\n",(0,s.jsx)(t.li,{children:"@lexical/yjs support, NodeState will be automatically synchronized\nlike any other property"}),"\n",(0,s.jsx)(t.li,{children:"NodeState values that are not used will simply pass-through, making\nit a bit easier for situations where multiple configurations are used\non the same data (e.g. older and newer versions of your editor,\na different set of plugins based on context, etc.)."}),"\n",(0,s.jsxs)(t.li,{children:["Pre-registration system for nodes to declare expected state\nand serialize them as top-level properties (",(0,s.jsx)(t.code,{children:"flat"}),") with ",(0,s.jsx)(t.code,{children:"$config"}),"\n(see ",(0,s.jsx)(t.a,{href:"https://github.com/facebook/lexical/issues/7260",children:"#7260"}),")."]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Future:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Does not yet integrate directly with importDOM, createDOM or\nexportDOM (see ",(0,s.jsx)(t.a,{href:"https://github.com/facebook/lexical/issues/7259",children:"#7259"}),")"]}),"\n",(0,s.jsxs)(t.li,{children:["Does not yet support direct integration with Yjs, e.g.\nyou can not store a Y.Map as a NodeState value\n(see ",(0,s.jsx)(t.a,{href:"https://github.com/facebook/lexical/issues/7293",children:"#7293"}),")"]}),"\n",(0,s.jsxs)(t.li,{children:["There isn't yet an easy way to listen for updates to NodeState\nwithout registering listeners for every class\n(see ",(0,s.jsx)(t.a,{href:"https://github.com/facebook/lexical/pull/7321",children:"#7321"}),")"]}),"\n",(0,s.jsx)(t.li,{children:"Similarly, there isn't the equivalent of a node transform for\nNodeState. Transforms must be registered on individual node\nclasses."}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"node-state-style-example",children:"Node State Style Example"}),"\n",(0,s.jsx)(t.p,{children:"This example demonstrates an advanced use case of storing a style object on TextNode using NodeState."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.a,{href:"https://stackblitz.com/github/facebook/lexical/tree/main/examples/node-state-style?file=src/main.tsx",children:(0,s.jsx)(t.img,{src:"https://developer.stackblitz.com/img/open_in_stackblitz.svg",alt:"Open in StackBlitz"})})}),"\n",(0,s.jsx)("iframe",{width:"100%",height:"600",src:"https://stackblitz.com/github/facebook/lexical/tree/main/examples/node-state-style?embed=1&file=src%2FApp.tsx&terminalHeight=0&ctl=1&showSidebar=0&devtoolsheight=0&view=preview",sandbox:"allow-forms allow-modals allow-popups allow-popups-to-escape-sandbox allow-presentation allow-same-origin allow-scripts",title:"Node State Style Example"})]})}function h(e={}){let{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},22840:function(e,t,n){n.d(t,{Z:()=>l,a:()=>o});var a=n(2784);let s={},i=a.createContext(s);function o(e){let t=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),a.createElement(i.Provider,{value:t},e.children)}}}]);