"use strict";(self.webpackChunk_lexical_website=self.webpackChunk_lexical_website||[]).push([["5477"],{7292:function(e,l,i){i.r(l),i.d(l,{frontMatter:()=>r,default:()=>h,contentTitle:()=>c,assets:()=>t,toc:()=>a,metadata:()=>d});var d=JSON.parse('{"id":"api/classes/lexical_code.CodeNode","title":"Class: CodeNode","description":"@lexical/code.CodeNode","source":"@site/docs/api/classes/lexical_code.CodeNode.md","sourceDirName":"api/classes","slug":"/api/classes/lexical_code.CodeNode","permalink":"/lexical/docs/api/classes/lexical_code.CodeNode","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","frontMatter":{"id":"lexical_code.CodeNode","title":"Class: CodeNode","custom_edit_url":null},"sidebar":"api","previous":{"title":"CodeHighlightNode","permalink":"/lexical/docs/api/classes/lexical_code.CodeHighlightNode"},"next":{"title":"HashtagNode","permalink":"/lexical/docs/api/classes/lexical_hashtag.HashtagNode"}}'),s=i(52322),n=i(22840);let r={id:"lexical_code.CodeNode",title:"Class: CodeNode",custom_edit_url:null},c=void 0,t={},a=[{value:"Hierarchy",id:"hierarchy",level:2},{value:"Constructors",id:"constructors",level:2},{value:"constructor",id:"constructor",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Overrides",id:"overrides",level:4},{value:"Defined in",id:"defined-in",level:4},{value:"Methods",id:"methods",level:2},{value:"canIndent",id:"canindent",level:3},{value:"Returns",id:"returns-1",level:4},{value:"Overrides",id:"overrides-1",level:4},{value:"Defined in",id:"defined-in-1",level:4},{value:"collapseAtStart",id:"collapseatstart",level:3},{value:"Returns",id:"returns-2",level:4},{value:"Overrides",id:"overrides-2",level:4},{value:"Defined in",id:"defined-in-2",level:4},{value:"createDOM",id:"createdom",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-3",level:4},{value:"Overrides",id:"overrides-3",level:4},{value:"Defined in",id:"defined-in-3",level:4},{value:"exportDOM",id:"exportdom",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-4",level:4},{value:"Overrides",id:"overrides-4",level:4},{value:"Defined in",id:"defined-in-4",level:4},{value:"exportJSON",id:"exportjson",level:3},{value:"Returns",id:"returns-5",level:4},{value:"Overrides",id:"overrides-5",level:4},{value:"Defined in",id:"defined-in-5",level:4},{value:"getIsSyntaxHighlightSupported",id:"getissyntaxhighlightsupported",level:3},{value:"Returns",id:"returns-6",level:4},{value:"Defined in",id:"defined-in-6",level:4},{value:"getLanguage",id:"getlanguage",level:3},{value:"Returns",id:"returns-7",level:4},{value:"Defined in",id:"defined-in-7",level:4},{value:"insertNewAfter",id:"insertnewafter",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-8",level:4},{value:"Overrides",id:"overrides-6",level:4},{value:"Defined in",id:"defined-in-8",level:4},{value:"setLanguage",id:"setlanguage",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-9",level:4},{value:"Defined in",id:"defined-in-9",level:4},{value:"updateDOM",id:"updatedom",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-10",level:4},{value:"Overrides",id:"overrides-7",level:4},{value:"Defined in",id:"defined-in-10",level:4},{value:"updateFromJSON",id:"updatefromjson",level:3},{value:"Parameters",id:"parameters-6",level:4},{value:"Returns",id:"returns-11",level:4},{value:"Overrides",id:"overrides-8",level:4},{value:"Defined in",id:"defined-in-11",level:4},{value:"clone",id:"clone",level:3},{value:"Parameters",id:"parameters-7",level:4},{value:"Returns",id:"returns-12",level:4},{value:"Overrides",id:"overrides-9",level:4},{value:"Defined in",id:"defined-in-12",level:4},{value:"getType",id:"gettype",level:3},{value:"Returns",id:"returns-13",level:4},{value:"Overrides",id:"overrides-10",level:4},{value:"Defined in",id:"defined-in-13",level:4},{value:"importDOM",id:"importdom",level:3},{value:"Returns",id:"returns-14",level:4},{value:"Overrides",id:"overrides-11",level:4},{value:"Defined in",id:"defined-in-14",level:4},{value:"importJSON",id:"importjson",level:3},{value:"Parameters",id:"parameters-8",level:4},{value:"Returns",id:"returns-15",level:4},{value:"Overrides",id:"overrides-12",level:4},{value:"Defined in",id:"defined-in-15",level:4}];function o(e){let l={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,n.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(l.p,{children:[(0,s.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical_code",children:"@lexical/code"}),".CodeNode"]}),"\n",(0,s.jsx)(l.h2,{id:"hierarchy",children:"Hierarchy"}),"\n",(0,s.jsxs)(l.ul,{children:["\n",(0,s.jsxs)(l.li,{children:["\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:(0,s.jsx)(l.code,{children:"ElementNode"})})}),"\n",(0,s.jsxs)(l.p,{children:["\u21B3 ",(0,s.jsx)(l.strong,{children:(0,s.jsx)(l.code,{children:"CodeNode"})})]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(l.h2,{id:"constructors",children:"Constructors"}),"\n",(0,s.jsx)(l.h3,{id:"constructor",children:"constructor"}),"\n",(0,s.jsxs)(l.p,{children:["\u2022 ",(0,s.jsx)(l.strong,{children:"new CodeNode"}),"(",(0,s.jsx)(l.code,{children:"language?"}),", ",(0,s.jsx)(l.code,{children:"key?"}),"): ",(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical_code.CodeNode",children:(0,s.jsx)(l.code,{children:"CodeNode"})})]}),"\n",(0,s.jsx)(l.h4,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,s.jsxs)(l.tbody,{children:[(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"language?"})}),(0,s.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,s.jsx)(l.code,{children:"null"})," | ",(0,s.jsx)(l.code,{children:"string"})]})]}),(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"key?"})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"string"})})]})]})]}),"\n",(0,s.jsx)(l.h4,{id:"returns",children:"Returns"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical_code.CodeNode",children:(0,s.jsx)(l.code,{children:"CodeNode"})})}),"\n",(0,s.jsx)(l.h4,{id:"overrides",children:"Overrides"}),"\n",(0,s.jsxs)(l.p,{children:[(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode#constructor",children:"constructor"})]}),"\n",(0,s.jsx)(l.h4,{id:"defined-in",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-code/src/CodeNode.ts#L104",children:"packages/lexical-code/src/CodeNode.ts:104"})}),"\n",(0,s.jsx)(l.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(l.h3,{id:"canindent",children:"canIndent"}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 ",(0,s.jsx)(l.strong,{children:"canIndent"}),"(): ",(0,s.jsx)(l.code,{children:"false"})]}),"\n",(0,s.jsx)(l.h4,{id:"returns-1",children:"Returns"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.code,{children:"false"})}),"\n",(0,s.jsx)(l.h4,{id:"overrides-1",children:"Overrides"}),"\n",(0,s.jsxs)(l.p,{children:[(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode#canindent",children:"canIndent"})]}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-1",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-code/src/CodeNode.ts#L326",children:"packages/lexical-code/src/CodeNode.ts:326"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"collapseatstart",children:"collapseAtStart"}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 ",(0,s.jsx)(l.strong,{children:"collapseAtStart"}),"(): ",(0,s.jsx)(l.code,{children:"boolean"})]}),"\n",(0,s.jsx)(l.h4,{id:"returns-2",children:"Returns"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.code,{children:"boolean"})}),"\n",(0,s.jsx)(l.h4,{id:"overrides-2",children:"Overrides"}),"\n",(0,s.jsxs)(l.p,{children:[(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode#collapseatstart",children:"collapseAtStart"})]}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-2",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-code/src/CodeNode.ts#L330",children:"packages/lexical-code/src/CodeNode.ts:330"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"createdom",children:"createDOM"}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 ",(0,s.jsx)(l.strong,{children:"createDOM"}),"(",(0,s.jsx)(l.code,{children:"config"}),"): ",(0,s.jsx)(l.code,{children:"HTMLElement"})]}),"\n",(0,s.jsx)(l.p,{children:"Called during the reconciliation process to determine which nodes\nto insert into the DOM for this Lexical Node."}),"\n",(0,s.jsx)(l.p,{children:"This method must return exactly one HTMLElement. Nested elements are not supported."}),"\n",(0,s.jsx)(l.p,{children:"Do not attempt to update the Lexical EditorState during this phase of the update lifecycle."}),"\n",(0,s.jsx)(l.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,s.jsx)(l.tbody,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"config"})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorconfig",children:(0,s.jsx)(l.code,{children:"EditorConfig"})})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:"allows access to things like the EditorTheme (to apply classes) during reconciliation."})]})})]}),"\n",(0,s.jsx)(l.h4,{id:"returns-3",children:"Returns"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.code,{children:"HTMLElement"})}),"\n",(0,s.jsx)(l.h4,{id:"overrides-3",children:"Overrides"}),"\n",(0,s.jsxs)(l.p,{children:[(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode#createdom",children:"createDOM"})]}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-3",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-code/src/CodeNode.ts#L111",children:"packages/lexical-code/src/CodeNode.ts:111"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"exportdom",children:"exportDOM"}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 ",(0,s.jsx)(l.strong,{children:"exportDOM"}),"(",(0,s.jsx)(l.code,{children:"editor"}),"): ",(0,s.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#domexportoutput",children:(0,s.jsx)(l.code,{children:"DOMExportOutput"})})]}),"\n",(0,s.jsxs)(l.p,{children:["Controls how the this node is serialized to HTML. This is important for\ncopy and paste between Lexical and non-Lexical editors, or Lexical editors with different namespaces,\nin which case the primary transfer format is HTML. It's also important if you're serializing\nto HTML for any other reason via ",(0,s.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical_html#generatehtmlfromnodes",children:"$generateHtmlFromNodes"}),". You could\nalso use this method to build your own HTML renderer."]}),"\n",(0,s.jsx)(l.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,s.jsx)(l.tbody,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"editor"})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.LexicalEditor",children:(0,s.jsx)(l.code,{children:"LexicalEditor"})})})]})})]}),"\n",(0,s.jsx)(l.h4,{id:"returns-4",children:"Returns"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#domexportoutput",children:(0,s.jsx)(l.code,{children:"DOMExportOutput"})})}),"\n",(0,s.jsx)(l.h4,{id:"overrides-4",children:"Overrides"}),"\n",(0,s.jsxs)(l.p,{children:[(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode#exportdom",children:"exportDOM"})]}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-4",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-code/src/CodeNode.ts#L147",children:"packages/lexical-code/src/CodeNode.ts:147"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"exportjson",children:"exportJSON"}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 ",(0,s.jsx)(l.strong,{children:"exportJSON"}),"(): ",(0,s.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical_code#serializedcodenode",children:(0,s.jsx)(l.code,{children:"SerializedCodeNode"})})]}),"\n",(0,s.jsxs)(l.p,{children:["Controls how the this node is serialized to JSON. This is important for\ncopy and paste between Lexical editors sharing the same namespace. It's also important\nif you're serializing to JSON for persistent storage somewhere.\nSee ",(0,s.jsx)(l.a,{href:"https://lexical.dev/docs/concepts/serialization#lexical---html",children:"Serialization & Deserialization"}),"."]}),"\n",(0,s.jsx)(l.h4,{id:"returns-5",children:"Returns"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical_code#serializedcodenode",children:(0,s.jsx)(l.code,{children:"SerializedCodeNode"})})}),"\n",(0,s.jsx)(l.h4,{id:"overrides-5",children:"Overrides"}),"\n",(0,s.jsxs)(l.p,{children:[(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode#exportjson",children:"exportJSON"})]}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-5",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-code/src/CodeNode.ts#L239",children:"packages/lexical-code/src/CodeNode.ts:239"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"getissyntaxhighlightsupported",children:"getIsSyntaxHighlightSupported"}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 ",(0,s.jsx)(l.strong,{children:"getIsSyntaxHighlightSupported"}),"(): ",(0,s.jsx)(l.code,{children:"boolean"})]}),"\n",(0,s.jsx)(l.h4,{id:"returns-6",children:"Returns"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.code,{children:"boolean"})}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-6",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-code/src/CodeNode.ts#L350",children:"packages/lexical-code/src/CodeNode.ts:350"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"getlanguage",children:"getLanguage"}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 ",(0,s.jsx)(l.strong,{children:"getLanguage"}),"(): ",(0,s.jsx)(l.code,{children:"undefined"})," | ",(0,s.jsx)(l.code,{children:"null"})," | ",(0,s.jsx)(l.code,{children:"string"})]}),"\n",(0,s.jsx)(l.h4,{id:"returns-7",children:"Returns"}),"\n",(0,s.jsxs)(l.p,{children:[(0,s.jsx)(l.code,{children:"undefined"})," | ",(0,s.jsx)(l.code,{children:"null"})," | ",(0,s.jsx)(l.code,{children:"string"})]}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-7",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-code/src/CodeNode.ts#L346",children:"packages/lexical-code/src/CodeNode.ts:346"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"insertnewafter",children:"insertNewAfter"}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 ",(0,s.jsx)(l.strong,{children:"insertNewAfter"}),"(",(0,s.jsx)(l.code,{children:"selection"}),", ",(0,s.jsx)(l.code,{children:"restoreSelection?"}),"): ",(0,s.jsx)(l.code,{children:"null"})," | ",(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.TabNode",children:(0,s.jsx)(l.code,{children:"TabNode"})})," | ",(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ParagraphNode",children:(0,s.jsx)(l.code,{children:"ParagraphNode"})})," | ",(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical_code.CodeHighlightNode",children:(0,s.jsx)(l.code,{children:"CodeHighlightNode"})})]}),"\n",(0,s.jsx)(l.h4,{id:"parameters-3",children:"Parameters"}),"\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Type"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Default value"})]})}),(0,s.jsxs)(l.tbody,{children:[(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"selection"})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.RangeSelection",children:(0,s.jsx)(l.code,{children:"RangeSelection"})})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"undefined"})})]}),(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"restoreSelection"})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"boolean"})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"true"})})]})]})]}),"\n",(0,s.jsx)(l.h4,{id:"returns-8",children:"Returns"}),"\n",(0,s.jsxs)(l.p,{children:[(0,s.jsx)(l.code,{children:"null"})," | ",(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.TabNode",children:(0,s.jsx)(l.code,{children:"TabNode"})})," | ",(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ParagraphNode",children:(0,s.jsx)(l.code,{children:"ParagraphNode"})})," | ",(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical_code.CodeHighlightNode",children:(0,s.jsx)(l.code,{children:"CodeHighlightNode"})})]}),"\n",(0,s.jsx)(l.h4,{id:"overrides-6",children:"Overrides"}),"\n",(0,s.jsxs)(l.p,{children:[(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode#insertnewafter",children:"insertNewAfter"})]}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-8",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-code/src/CodeNode.ts#L247",children:"packages/lexical-code/src/CodeNode.ts:247"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"setlanguage",children:"setLanguage"}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 ",(0,s.jsx)(l.strong,{children:"setLanguage"}),"(",(0,s.jsx)(l.code,{children:"language"}),"): ",(0,s.jsx)(l.code,{children:"this"})]}),"\n",(0,s.jsx)(l.h4,{id:"parameters-4",children:"Parameters"}),"\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,s.jsx)(l.tbody,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"language"})}),(0,s.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,s.jsx)(l.code,{children:"undefined"})," | ",(0,s.jsx)(l.code,{children:"null"})," | ",(0,s.jsx)(l.code,{children:"string"})]})]})})]}),"\n",(0,s.jsx)(l.h4,{id:"returns-9",children:"Returns"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.code,{children:"this"})}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-9",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-code/src/CodeNode.ts#L338",children:"packages/lexical-code/src/CodeNode.ts:338"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"updatedom",children:"updateDOM"}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 ",(0,s.jsx)(l.strong,{children:"updateDOM"}),"(",(0,s.jsx)(l.code,{children:"prevNode"}),", ",(0,s.jsx)(l.code,{children:"dom"}),", ",(0,s.jsx)(l.code,{children:"config"}),"): ",(0,s.jsx)(l.code,{children:"boolean"})]}),"\n",(0,s.jsx)(l.p,{children:"Called when a node changes and should update the DOM\nin whatever way is necessary to make it align with any changes that might\nhave happened during the update."}),"\n",(0,s.jsx)(l.p,{children:'Returning "true" here will cause lexical to unmount and recreate the DOM node\n(by calling createDOM). You would need to do this if the element tag changes,\nfor instance.'}),"\n",(0,s.jsx)(l.h4,{id:"parameters-5",children:"Parameters"}),"\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,s.jsxs)(l.tbody,{children:[(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"prevNode"})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"this"})})]}),(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"dom"})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"HTMLElement"})})]}),(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"config"})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#editorconfig",children:(0,s.jsx)(l.code,{children:"EditorConfig"})})})]})]})]}),"\n",(0,s.jsx)(l.h4,{id:"returns-10",children:"Returns"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.code,{children:"boolean"})}),"\n",(0,s.jsx)(l.h4,{id:"overrides-7",children:"Overrides"}),"\n",(0,s.jsxs)(l.p,{children:[(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode#updatedom",children:"updateDOM"})]}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-10",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-code/src/CodeNode.ts#L125",children:"packages/lexical-code/src/CodeNode.ts:125"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"updatefromjson",children:"updateFromJSON"}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 ",(0,s.jsx)(l.strong,{children:"updateFromJSON"}),"(",(0,s.jsx)(l.code,{children:"serializedNode"}),"): ",(0,s.jsx)(l.code,{children:"this"})]}),"\n",(0,s.jsx)(l.p,{children:"Update this LexicalNode instance from serialized JSON. It's recommended\nto implement as much logic as possible in this method instead of the\nstatic importJSON method, so that the functionality can be inherited in subclasses."}),"\n",(0,s.jsx)(l.p,{children:"The LexicalUpdateJSON utility type should be used to ignore any type, version,\nor children properties in the JSON so that the extended JSON from subclasses\nare acceptable parameters for the super call."}),"\n",(0,s.jsx)(l.p,{children:"If overridden, this method must call super."}),"\n",(0,s.jsx)(l.h4,{id:"parameters-6",children:"Parameters"}),"\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,s.jsx)(l.tbody,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"serializedNode"})}),(0,s.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,s.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#lexicalupdatejson",children:(0,s.jsx)(l.code,{children:"LexicalUpdateJSON"})}),"<",(0,s.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical_code#serializedcodenode",children:(0,s.jsx)(l.code,{children:"SerializedCodeNode"})}),">"]})]})})]}),"\n",(0,s.jsx)(l.h4,{id:"returns-11",children:"Returns"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.code,{children:"this"})}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.strong,{children:(0,s.jsx)(l.code,{children:"Example"})})}),"\n",(0,s.jsx)(l.pre,{children:(0,s.jsx)(l.code,{className:"language-ts",children:"class MyTextNode extends TextNode {\n  // ...\n  static importJSON(serializedNode: SerializedMyTextNode): MyTextNode {\n    return $createMyTextNode()\n      .updateFromJSON(serializedNode);\n  }\n  updateFromJSON(\n    serializedNode: LexicalUpdateJSON<SerializedMyTextNode>,\n  ): this {\n    return super.updateFromJSON(serializedNode)\n      .setMyProperty(serializedNode.myProperty);\n  }\n}\n"})}),"\n",(0,s.jsx)(l.h4,{id:"overrides-8",children:"Overrides"}),"\n",(0,s.jsxs)(l.p,{children:[(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode#updatefromjson",children:"updateFromJSON"})]}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-11",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-code/src/CodeNode.ts#L233",children:"packages/lexical-code/src/CodeNode.ts:233"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"clone",children:"clone"}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 ",(0,s.jsx)(l.strong,{children:"clone"}),"(",(0,s.jsx)(l.code,{children:"node"}),"): ",(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical_code.CodeNode",children:(0,s.jsx)(l.code,{children:"CodeNode"})})]}),"\n",(0,s.jsx)(l.p,{children:"Clones this node, creating a new node with a different key\nand adding it to the EditorState (but not attaching it anywhere!). All nodes must\nimplement this method."}),"\n",(0,s.jsx)(l.h4,{id:"parameters-7",children:"Parameters"}),"\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,s.jsx)(l.tbody,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"node"})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical_code.CodeNode",children:(0,s.jsx)(l.code,{children:"CodeNode"})})})]})})]}),"\n",(0,s.jsx)(l.h4,{id:"returns-12",children:"Returns"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical_code.CodeNode",children:(0,s.jsx)(l.code,{children:"CodeNode"})})}),"\n",(0,s.jsx)(l.h4,{id:"overrides-9",children:"Overrides"}),"\n",(0,s.jsxs)(l.p,{children:[(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode#clone",children:"clone"})]}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-12",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-code/src/CodeNode.ts#L100",children:"packages/lexical-code/src/CodeNode.ts:100"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"gettype",children:"getType"}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 ",(0,s.jsx)(l.strong,{children:"getType"}),"(): ",(0,s.jsx)(l.code,{children:"string"})]}),"\n",(0,s.jsx)(l.p,{children:"Returns the string type of this node. Every node must\nimplement this and it MUST BE UNIQUE amongst nodes registered\non the editor."}),"\n",(0,s.jsx)(l.h4,{id:"returns-13",children:"Returns"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.code,{children:"string"})}),"\n",(0,s.jsx)(l.h4,{id:"overrides-10",children:"Overrides"}),"\n",(0,s.jsxs)(l.p,{children:[(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode#gettype-1",children:"getType"})]}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-13",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-code/src/CodeNode.ts#L96",children:"packages/lexical-code/src/CodeNode.ts:96"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"importdom",children:"importDOM"}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 ",(0,s.jsx)(l.strong,{children:"importDOM"}),"(): ",(0,s.jsx)(l.code,{children:"null"})," | ",(0,s.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#domconversionmap",children:(0,s.jsx)(l.code,{children:"DOMConversionMap"})})]}),"\n",(0,s.jsx)(l.h4,{id:"returns-14",children:"Returns"}),"\n",(0,s.jsxs)(l.p,{children:[(0,s.jsx)(l.code,{children:"null"})," | ",(0,s.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#domconversionmap",children:(0,s.jsx)(l.code,{children:"DOMConversionMap"})})]}),"\n",(0,s.jsx)(l.h4,{id:"overrides-11",children:"Overrides"}),"\n",(0,s.jsx)(l.p,{children:"ElementNode.importDOM"}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-14",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-code/src/CodeNode.ts#L162",children:"packages/lexical-code/src/CodeNode.ts:162"})}),"\n",(0,s.jsx)(l.hr,{}),"\n",(0,s.jsx)(l.h3,{id:"importjson",children:"importJSON"}),"\n",(0,s.jsxs)(l.p,{children:["\u25B8 ",(0,s.jsx)(l.strong,{children:"importJSON"}),"(",(0,s.jsx)(l.code,{children:"serializedNode"}),"): ",(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical_code.CodeNode",children:(0,s.jsx)(l.code,{children:"CodeNode"})})]}),"\n",(0,s.jsxs)(l.p,{children:["Controls how the this node is deserialized from JSON. This is usually boilerplate,\nbut provides an abstraction between the node implementation and serialized interface that can\nbe important if you ever make breaking changes to a node schema (by adding or removing properties).\nSee ",(0,s.jsx)(l.a,{href:"https://lexical.dev/docs/concepts/serialization#lexical---html",children:"Serialization & Deserialization"}),"."]}),"\n",(0,s.jsx)(l.h4,{id:"parameters-8",children:"Parameters"}),"\n",(0,s.jsxs)(l.table,{children:[(0,s.jsx)(l.thead,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,s.jsx)(l.tbody,{children:(0,s.jsxs)(l.tr,{children:[(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.code,{children:"serializedNode"})}),(0,s.jsx)(l.td,{style:{textAlign:"left"},children:(0,s.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical_code#serializedcodenode",children:(0,s.jsx)(l.code,{children:"SerializedCodeNode"})})})]})})]}),"\n",(0,s.jsx)(l.h4,{id:"returns-15",children:"Returns"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical_code.CodeNode",children:(0,s.jsx)(l.code,{children:"CodeNode"})})}),"\n",(0,s.jsx)(l.h4,{id:"overrides-12",children:"Overrides"}),"\n",(0,s.jsxs)(l.p,{children:[(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,s.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode#importjson",children:"importJSON"})]}),"\n",(0,s.jsx)(l.h4,{id:"defined-in-15",children:"Defined in"}),"\n",(0,s.jsx)(l.p,{children:(0,s.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-code/src/CodeNode.ts#L229",children:"packages/lexical-code/src/CodeNode.ts:229"})})]})}function h(e={}){let{wrapper:l}={...(0,n.a)(),...e.components};return l?(0,s.jsx)(l,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},22840:function(e,l,i){i.d(l,{Z:()=>c,a:()=>r});var d=i(2784);let s={},n=d.createContext(s);function r(e){let l=d.useContext(n);return d.useMemo(function(){return"function"==typeof e?e(l):{...l,...e}},[l,e])}function c(e){let l;return l=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),d.createElement(n.Provider,{value:l},e.children)}}}]);