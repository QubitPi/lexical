"use strict";(self.webpackChunk_lexical_website=self.webpackChunk_lexical_website||[]).push([["2469"],{72978:function(e,n,t){t.r(n),t.d(n,{frontMatter:()=>o,default:()=>h,contentTitle:()=>c,assets:()=>l,toc:()=>r,metadata:()=>i});var i=JSON.parse('{"id":"packages/lexical-html","title":"@lexical/html","description":"See API Documentation","source":"@site/docs/packages/lexical-html.md","sourceDirName":"packages","slug":"/packages/lexical-html","permalink":"/docs/packages/lexical-html","draft":false,"unlisted":false,"editUrl":"https://github.com/QubitPi/lexical/tree/main/packages/lexical-html/README.md","tags":[],"version":"current","frontMatter":{"custom_edit_url":"https://github.com/QubitPi/lexical/tree/main/packages/lexical-html/README.md"},"sidebar":"docs","previous":{"title":"@lexical/history","permalink":"/docs/packages/lexical-history"},"next":{"title":"@lexical/link","permalink":"/docs/packages/lexical-link"}}'),a=t(52322),s=t(22840);let o={custom_edit_url:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-html/README.md"},c="@lexical/html",l={},r=[{value:"Exporting",id:"exporting",level:3},{value:"Importing",id:"importing",level:3}];function d(e){let n={a:"a",code:"code",h1:"h1",h3:"h3",header:"header",img:"img",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"lexicalhtml",children:(0,a.jsx)(n.code,{children:"@lexical/html"})})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"https://lexical.dev/docs/api/modules/lexical_html",children:(0,a.jsx)(n.img,{src:"https://lexical.dev/img/see-api-documentation.svg",alt:"See API Documentation"})})}),"\n",(0,a.jsx)(n.h1,{id:"html",children:"HTML"}),"\n",(0,a.jsxs)(n.p,{children:["This package exports utility functions for converting ",(0,a.jsx)(n.code,{children:"Lexical"})," -> ",(0,a.jsx)(n.code,{children:"HTML"})," and ",(0,a.jsx)(n.code,{children:"HTML"})," -> ",(0,a.jsx)(n.code,{children:"Lexical"}),". These same functions are also used in the ",(0,a.jsx)(n.code,{children:"lexical-clipboard"})," package for copy and paste."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"https://lexical.dev/docs/concepts/serialization",children:"Full documentation can be found here."})}),"\n",(0,a.jsx)(n.h3,{id:"exporting",children:"Exporting"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"// In a headless mode, you need to initialize a headless browser implementation such as JSDom.\nconst dom = new JSDOM();\n// @ts-expect-error\nglobal.window = dom.window;\nglobal.document = dom.window.document;\n// You may also need to polyfill DocumentFragment or navigator in certain cases.\n\n// When converting to HTML you can pass in a selection object to narrow it\n// down to a certain part of the editor's contents.\nconst htmlString = $generateHtmlFromNodes(editor, selection | null);\n"})}),"\n",(0,a.jsx)(n.h3,{id:"importing",children:"Importing"}),"\n",(0,a.jsx)(n.p,{children:"First we need to parse the HTML string into a DOM instance."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"// In the browser you can use the native DOMParser API to parse the HTML string.\nconst parser = new DOMParser();\nconst dom = parser.parseFromString(htmlString, textHtmlMimeType);\n\n// In a headless environment you can use a package such as JSDom to parse the HTML string.\nconst dom = new JSDOM(htmlString);\n"})}),"\n",(0,a.jsx)(n.p,{children:"And once you have the DOM instance."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"const nodes = $generateNodesFromDOM(editor, dom);\n\n// Once you have the lexical nodes you can initialize an editor instance with the parsed nodes.\nconst editor = createEditor({ ...config, nodes });\n\n// Or insert them at a selection.\n$insertNodes(nodes);\n"})})]})}function h(e={}){let{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},22840:function(e,n,t){t.d(n,{Z:()=>c,a:()=>o});var i=t(2784);let a={},s=i.createContext(a);function o(e){let n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);