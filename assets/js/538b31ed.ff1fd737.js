"use strict";(self.webpackChunk_lexical_website=self.webpackChunk_lexical_website||[]).push([["6554"],{11217:function(e,t,i){i.r(t),i.d(t,{frontMatter:()=>l,default:()=>h,contentTitle:()=>c,assets:()=>o,toc:()=>r,metadata:()=>s});var s=JSON.parse('{"id":"packages/lexical-history","title":"@lexical/history","description":"See API Documentation","source":"@site/docs/packages/lexical-history.md","sourceDirName":"packages","slug":"/packages/lexical-history","permalink":"/lexical/docs/packages/lexical-history","draft":false,"unlisted":false,"editUrl":"https://github.com/QubitPi/lexical/tree/main/packages/lexical-history/README.md","tags":[],"version":"current","frontMatter":{"custom_edit_url":"https://github.com/QubitPi/lexical/tree/main/packages/lexical-history/README.md"},"sidebar":"docs","previous":{"title":"@lexical/headless","permalink":"/lexical/docs/packages/lexical-headless"},"next":{"title":"@lexical/html","permalink":"/lexical/docs/packages/lexical-html"}}'),n=i(52322),a=i(22840);let l={custom_edit_url:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-history/README.md"},c="@lexical/history",o={},r=[{value:"Methods",id:"methods",level:3},{value:"<code>registerHistory</code>",id:"registerhistory",level:4},{value:"Commands",id:"commands",level:3}];function d(e){let t={a:"a",code:"code",h1:"h1",h3:"h3",h4:"h4",header:"header",img:"img",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"lexicalhistory",children:(0,n.jsx)(t.code,{children:"@lexical/history"})})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.a,{href:"https://lexical.dev/docs/api/modules/lexical_history",children:(0,n.jsx)(t.img,{src:"https://lexical.dev/img/see-api-documentation.svg",alt:"See API Documentation"})})}),"\n",(0,n.jsx)(t.p,{children:"This package contains history helpers for Lexical."}),"\n",(0,n.jsx)(t.h3,{id:"methods",children:"Methods"}),"\n",(0,n.jsx)(t.h4,{id:"registerhistory",children:(0,n.jsx)(t.code,{children:"registerHistory"})}),"\n",(0,n.jsxs)(t.p,{children:["Registers necessary listeners to manage undo/redo history stack and related editor commands. It returns ",(0,n.jsx)(t.code,{children:"unregister"})," callback that cleans up all listeners and should be called on editor unmount."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",children:"function registerHistory(\n  editor: LexicalEditor,\n  externalHistoryState: HistoryState,\n  delay: number,\n): () => void\n"})}),"\n",(0,n.jsx)(t.h3,{id:"commands",children:"Commands"}),"\n",(0,n.jsxs)(t.p,{children:["History package handles ",(0,n.jsx)(t.code,{children:"UNDO_COMMAND"}),", ",(0,n.jsx)(t.code,{children:"REDO_COMMAND"})," and ",(0,n.jsx)(t.code,{children:"CLEAR_HISTORY_COMMAND"})," commands. It also triggers ",(0,n.jsx)(t.code,{children:"CAN_UNDO_COMMAND"})," and ",(0,n.jsx)(t.code,{children:"CAN_REDO_COMMAND"})," commands when history state is changed. These commands could be used to work with history state:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-jsx",children:"import {UNDO_COMMAND, REDO_COMMAND} from 'lexical';\n\n<Toolbar>\n  <Button onClick={() => editor.dispatchCommand(UNDO_COMMAND)}>Undo</Button>\n  <Button onClick={() => editor.dispatchCommand(REDO_COMMAND)}>Redo</Button>\n</Toolbar>;\n"})})]})}function h(e={}){let{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},22840:function(e,t,i){i.d(t,{Z:()=>c,a:()=>l});var s=i(2784);let n={},a=s.createContext(n);function l(e){let t=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:l(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);