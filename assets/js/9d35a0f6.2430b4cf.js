"use strict";(self.webpackChunk_lexical_website=self.webpackChunk_lexical_website||[]).push([["8804"],{74942:function(e,t,n){n.r(t),n.d(t,{frontMatter:()=>l,default:()=>x,contentTitle:()=>c,assets:()=>r,toc:()=>s,metadata:()=>i});var i=JSON.parse('{"id":"packages/lexical-react","title":"@lexical/react","description":"This package provides a set of components and hooks for Lexical that allow for text editing in React applications.","source":"@site/docs/packages/lexical-react.md","sourceDirName":"packages","slug":"/packages/lexical-react","permalink":"/docs/packages/lexical-react","draft":false,"unlisted":false,"editUrl":"https://github.com/QubitPi/lexical/tree/main/packages/lexical-react/README.md","tags":[],"version":"current","frontMatter":{"custom_edit_url":"https://github.com/QubitPi/lexical/tree/main/packages/lexical-react/README.md"},"sidebar":"docs","previous":{"title":"@lexical/plain-text","permalink":"/docs/packages/lexical-plain-text"},"next":{"title":"@lexical/rich-text","permalink":"/docs/packages/lexical-rich-text"}}'),a=n(52322),o=n(22840);let l={custom_edit_url:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-react/README.md"},c="@lexical/react",r={},s=[{value:"Getting started",id:"getting-started",level:2}];function d(e){let t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"lexicalreact",children:(0,a.jsx)(t.code,{children:"@lexical/react"})})}),"\n",(0,a.jsx)(t.p,{children:"This package provides a set of components and hooks for Lexical that allow for text editing in React applications."}),"\n",(0,a.jsx)(t.h2,{id:"getting-started",children:"Getting started"}),"\n",(0,a.jsxs)(t.p,{children:["Install ",(0,a.jsx)(t.code,{children:"lexical"})," and ",(0,a.jsx)(t.code,{children:"@lexical/react"}),":"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"npm install --save lexical @lexical/react\n"})}),"\n",(0,a.jsxs)(t.p,{children:["Below is an example of a basic plain text editor using ",(0,a.jsx)(t.code,{children:"lexical"})," and ",(0,a.jsx)(t.code,{children:"@lexical/react"})," (",(0,a.jsx)(t.a,{href:"https://stackblitz.com/github/facebook/lexical/tree/main/examples/react-plain-text?embed=1&file=src%2FApp.tsx&terminalHeight=0&ctl=1&showSidebar=0&devtoolsheight=0&view=preview",children:"try it yourself"}),")."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsx",children:"import {$getRoot, $getSelection} from 'lexical';\nimport {useEffect} from 'react';\n\nimport {LexicalComposer} from '@lexical/react/LexicalComposer';\nimport {PlainTextPlugin} from '@lexical/react/LexicalPlainTextPlugin';\nimport {ContentEditable} from '@lexical/react/LexicalContentEditable';\nimport {HistoryPlugin} from '@lexical/react/LexicalHistoryPlugin';\nimport {OnChangePlugin} from '@lexical/react/LexicalOnChangePlugin';\nimport {useLexicalComposerContext} from '@lexical/react/LexicalComposerContext';\n\nconst theme = {\n  // Theme styling goes here\n  ...\n}\n\n// When the editor changes, you can get notified via the\n// LexicalOnChangePlugin!\nfunction onChange(editorState) {\n  editorState.read(() => {\n    // Read the contents of the EditorState here.\n    const root = $getRoot();\n    const selection = $getSelection();\n\n    console.log(root, selection);\n  });\n}\n\n// Lexical React plugins are React components, which makes them\n// highly composable. Furthermore, you can lazy load plugins if\n// desired, so you don't pay the cost for plugins until you\n// actually use them.\nfunction MyCustomAutoFocusPlugin() {\n  const [editor] = useLexicalComposerContext();\n\n  \n\nuseEffect(() => {\n    // Focus the editor when the effect fires!\n    editor.focus();\n  }, [editor]);\n\n  return null;\n}\n\n// Catch any errors that occur during Lexical updates and log them\n// or throw them as needed. If you don't throw them, Lexical will\n// try to recover gracefully without losing user data.\nfunction onError(error) {\n  throw error;\n}\n\nfunction Editor() {\n  const initialConfig = {\n    namespace: 'MyEditor',\n    theme,\n    onError,\n  };\n\nreturn (\n    <LexicalComposer initialConfig={initialConfig}>\n      <PlainTextPlugin\n        contentEditable={\n          <ContentEditable\n            aria-placeholder={'Enter some text...'}\n            placeholder={<div>Enter some text...</div>}\n          />\n        }\n      />\n      <OnChangePlugin onChange={onChange} />\n      <HistoryPlugin />\n      <MyCustomAutoFocusPlugin />\n    </LexicalComposer>\n  );\n}\n"})})]})}function x(e={}){let{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},22840:function(e,t,n){n.d(t,{Z:()=>c,a:()=>l});var i=n(2784);let a={},o=i.createContext(a);function l(e){let t=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),i.createElement(o.Provider,{value:t},e.children)}}}]);