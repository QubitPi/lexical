"use strict";(self.webpackChunk_lexical_website=self.webpackChunk_lexical_website||[]).push([["1315"],{37410:function(e,i,l){l.r(i),l.d(i,{frontMatter:()=>d,default:()=>x,contentTitle:()=>r,assets:()=>c,toc:()=>a,metadata:()=>s});var s=JSON.parse('{"id":"api/classes/lexical_list.ListItemNode","title":"Class: ListItemNode","description":"@lexical/list.ListItemNode","source":"@site/docs/api/classes/lexical_list.ListItemNode.md","sourceDirName":"api/classes","slug":"/api/classes/lexical_list.ListItemNode","permalink":"/docs/api/classes/lexical_list.ListItemNode","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","frontMatter":{"id":"lexical_list.ListItemNode","title":"Class: ListItemNode","custom_edit_url":null},"sidebar":"api","previous":{"title":"LinkNode","permalink":"/docs/api/classes/lexical_link.LinkNode"},"next":{"title":"ListNode","permalink":"/docs/api/classes/lexical_list.ListNode"}}'),t=l(52322),n=l(22840);let d={id:"lexical_list.ListItemNode",title:"Class: ListItemNode",custom_edit_url:null},r=void 0,c={},a=[{value:"Hierarchy",id:"hierarchy",level:2},{value:"Constructors",id:"constructors",level:2},{value:"constructor",id:"constructor",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Overrides",id:"overrides",level:4},{value:"Defined in",id:"defined-in",level:4},{value:"Methods",id:"methods",level:2},{value:"afterCloneFrom",id:"afterclonefrom",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Overrides",id:"overrides-1",level:4},{value:"Defined in",id:"defined-in-1",level:4},{value:"append",id:"append",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-2",level:4},{value:"Overrides",id:"overrides-2",level:4},{value:"Defined in",id:"defined-in-2",level:4},{value:"canMergeWhenEmpty",id:"canmergewhenempty",level:3},{value:"Returns",id:"returns-3",level:4},{value:"Overrides",id:"overrides-3",level:4},{value:"Defined in",id:"defined-in-3",level:4},{value:"canMergeWith",id:"canmergewith",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-4",level:4},{value:"Overrides",id:"overrides-4",level:4},{value:"Defined in",id:"defined-in-4",level:4},{value:"collapseAtStart",id:"collapseatstart",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-5",level:4},{value:"Overrides",id:"overrides-5",level:4},{value:"Defined in",id:"defined-in-5",level:4},{value:"createDOM",id:"createdom",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-6",level:4},{value:"Overrides",id:"overrides-6",level:4},{value:"Defined in",id:"defined-in-6",level:4},{value:"createParentElementNode",id:"createparentelementnode",level:3},{value:"Returns",id:"returns-7",level:4},{value:"Overrides",id:"overrides-7",level:4},{value:"Defined in",id:"defined-in-7",level:4},{value:"exportDOM",id:"exportdom",level:3},{value:"Parameters",id:"parameters-6",level:4},{value:"Returns",id:"returns-8",level:4},{value:"Overrides",id:"overrides-8",level:4},{value:"Defined in",id:"defined-in-8",level:4},{value:"exportJSON",id:"exportjson",level:3},{value:"Returns",id:"returns-9",level:4},{value:"Overrides",id:"overrides-9",level:4},{value:"Defined in",id:"defined-in-9",level:4},{value:"extractWithChild",id:"extractwithchild",level:3},{value:"Parameters",id:"parameters-7",level:4},{value:"Returns",id:"returns-10",level:4},{value:"Overrides",id:"overrides-10",level:4},{value:"Defined in",id:"defined-in-10",level:4},{value:"getChecked",id:"getchecked",level:3},{value:"Returns",id:"returns-11",level:4},{value:"Defined in",id:"defined-in-11",level:4},{value:"getIndent",id:"getindent",level:3},{value:"Returns",id:"returns-12",level:4},{value:"Overrides",id:"overrides-11",level:4},{value:"Defined in",id:"defined-in-12",level:4},{value:"getValue",id:"getvalue",level:3},{value:"Returns",id:"returns-13",level:4},{value:"Defined in",id:"defined-in-13",level:4},{value:"insertAfter",id:"insertafter",level:3},{value:"Parameters",id:"parameters-8",level:4},{value:"Returns",id:"returns-14",level:4},{value:"Overrides",id:"overrides-12",level:4},{value:"Defined in",id:"defined-in-14",level:4},{value:"insertNewAfter",id:"insertnewafter",level:3},{value:"Parameters",id:"parameters-9",level:4},{value:"Returns",id:"returns-15",level:4},{value:"Overrides",id:"overrides-13",level:4},{value:"Defined in",id:"defined-in-15",level:4},{value:"isParentRequired",id:"isparentrequired",level:3},{value:"Returns",id:"returns-16",level:4},{value:"Overrides",id:"overrides-14",level:4},{value:"Defined in",id:"defined-in-16",level:4},{value:"remove",id:"remove",level:3},{value:"Parameters",id:"parameters-10",level:4},{value:"Returns",id:"returns-17",level:4},{value:"Overrides",id:"overrides-15",level:4},{value:"Defined in",id:"defined-in-17",level:4},{value:"replace",id:"replace",level:3},{value:"Type parameters",id:"type-parameters",level:4},{value:"Parameters",id:"parameters-11",level:4},{value:"Returns",id:"returns-18",level:4},{value:"Overrides",id:"overrides-16",level:4},{value:"Defined in",id:"defined-in-18",level:4},{value:"setChecked",id:"setchecked",level:3},{value:"Parameters",id:"parameters-12",level:4},{value:"Returns",id:"returns-19",level:4},{value:"Defined in",id:"defined-in-19",level:4},{value:"setIndent",id:"setindent",level:3},{value:"Parameters",id:"parameters-13",level:4},{value:"Returns",id:"returns-20",level:4},{value:"Overrides",id:"overrides-17",level:4},{value:"Defined in",id:"defined-in-20",level:4},{value:"setValue",id:"setvalue",level:3},{value:"Parameters",id:"parameters-14",level:4},{value:"Returns",id:"returns-21",level:4},{value:"Defined in",id:"defined-in-21",level:4},{value:"toggleChecked",id:"togglechecked",level:3},{value:"Returns",id:"returns-22",level:4},{value:"Defined in",id:"defined-in-22",level:4},{value:"updateDOM",id:"updatedom",level:3},{value:"Parameters",id:"parameters-15",level:4},{value:"Returns",id:"returns-23",level:4},{value:"Overrides",id:"overrides-18",level:4},{value:"Defined in",id:"defined-in-23",level:4},{value:"updateFromJSON",id:"updatefromjson",level:3},{value:"Parameters",id:"parameters-16",level:4},{value:"Returns",id:"returns-24",level:4},{value:"Overrides",id:"overrides-19",level:4},{value:"Defined in",id:"defined-in-24",level:4},{value:"updateListItemDOM",id:"updatelistitemdom",level:3},{value:"Parameters",id:"parameters-17",level:4},{value:"Returns",id:"returns-25",level:4},{value:"Defined in",id:"defined-in-25",level:4}];function h(e){let i={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,n.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.a,{href:"/docs/api/modules/lexical_list",children:"@lexical/list"}),".ListItemNode"]}),"\n",(0,t.jsx)(i.h2,{id:"hierarchy",children:"Hierarchy"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode",children:(0,t.jsx)(i.code,{children:"ElementNode"})})}),"\n",(0,t.jsxs)(i.p,{children:["\u21B3 ",(0,t.jsx)(i.strong,{children:(0,t.jsx)(i.code,{children:"ListItemNode"})})]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"constructors",children:"Constructors"}),"\n",(0,t.jsx)(i.h3,{id:"constructor",children:"constructor"}),"\n",(0,t.jsxs)(i.p,{children:["\u2022 ",(0,t.jsx)(i.strong,{children:"new ListItemNode"}),"(",(0,t.jsx)(i.code,{children:"value?"}),", ",(0,t.jsx)(i.code,{children:"checked?"}),", ",(0,t.jsx)(i.code,{children:"key?"}),"): ",(0,t.jsx)(i.a,{href:"/docs/api/classes/lexical_list.ListItemNode",children:(0,t.jsx)(i.code,{children:"ListItemNode"})})]}),"\n",(0,t.jsx)(i.h4,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsxs)(i.table,{children:[(0,t.jsx)(i.thead,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,t.jsx)(i.th,{style:{textAlign:"left"},children:"Type"}),(0,t.jsx)(i.th,{style:{textAlign:"left"},children:"Default value"})]})}),(0,t.jsxs)(i.tbody,{children:[(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"value"})}),(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"number"})}),(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"1"})})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"checked"})}),(0,t.jsxs)(i.td,{style:{textAlign:"left"},children:[(0,t.jsx)(i.code,{children:"undefined"})," | ",(0,t.jsx)(i.code,{children:"boolean"})]}),(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"undefined"})})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"key?"})}),(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"string"})}),(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"undefined"})})]})]})]}),"\n",(0,t.jsx)(i.h4,{id:"returns",children:"Returns"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"/docs/api/classes/lexical_list.ListItemNode",children:(0,t.jsx)(i.code,{children:"ListItemNode"})})}),"\n",(0,t.jsx)(i.h4,{id:"overrides",children:"Overrides"}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,t.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode#constructor",children:"constructor"})]}),"\n",(0,t.jsx)(i.h4,{id:"defined-in",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-list/src/LexicalListItemNode.ts#L106",children:"packages/lexical-list/src/LexicalListItemNode.ts:106"})}),"\n",(0,t.jsx)(i.h2,{id:"methods",children:"Methods"}),"\n",(0,t.jsx)(i.h3,{id:"afterclonefrom",children:"afterCloneFrom"}),"\n",(0,t.jsxs)(i.p,{children:["\u25B8 ",(0,t.jsx)(i.strong,{children:"afterCloneFrom"}),"(",(0,t.jsx)(i.code,{children:"prevNode"}),"): ",(0,t.jsx)(i.code,{children:"void"})]}),"\n",(0,t.jsxs)(i.p,{children:["Perform any state updates on the clone of prevNode that are not already\nhandled by the constructor call in the static clone method. If you have\nstate to update in your clone that is not handled directly by the\nconstructor, it is advisable to override this method but it is required\nto include a call to ",(0,t.jsx)(i.code,{children:"super.afterCloneFrom(prevNode)"})," in your\nimplementation. This is only intended to be called by\n",(0,t.jsx)(i.a,{href:"/docs/api/modules/lexical#clonewithproperties",children:"$cloneWithProperties"})," function or via a super call."]}),"\n",(0,t.jsx)(i.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,t.jsxs)(i.table,{children:[(0,t.jsx)(i.thead,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,t.jsx)(i.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,t.jsx)(i.tbody,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"prevNode"})}),(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"this"})})]})})]}),"\n",(0,t.jsx)(i.h4,{id:"returns-1",children:"Returns"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.code,{children:"void"})}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:(0,t.jsx)(i.code,{children:"Example"})})}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"class ClassesTextNode extends TextNode {\n  // Not shown: static getType, static importJSON, exportJSON, createDOM, updateDOM\n  __classes = new Set<string>();\n  static clone(node: ClassesTextNode): ClassesTextNode {\n    // The inherited TextNode constructor is used here, so\n    // classes is not set by this method.\n    return new ClassesTextNode(node.__text, node.__key);\n  }\n  afterCloneFrom(node: this): void {\n    // This calls TextNode.afterCloneFrom and LexicalNode.afterCloneFrom\n    // for necessary state updates\n    super.afterCloneFrom(node);\n    this.__addClasses(node.__classes);\n  }\n  // This method is a private implementation detail, it is not\n  // suitable for the public API because it does not call getWritable\n  __addClasses(classNames: Iterable<string>): this {\n    for (const className of classNames) {\n      this.__classes.add(className);\n    }\n    return this;\n  }\n  addClass(...classNames: string[]): this {\n    return this.getWritable().__addClasses(classNames);\n  }\n  removeClass(...classNames: string[]): this {\n    const node = this.getWritable();\n    for (const className of classNames) {\n      this.__classes.delete(className);\n    }\n    return this;\n  }\n  getClasses(): Set<string> {\n    return this.getLatest().__classes;\n  }\n}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"overrides-1",children:"Overrides"}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,t.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode#afterclonefrom",children:"afterCloneFrom"})]}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-1",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-list/src/LexicalListItemNode.ts#L116",children:"packages/lexical-list/src/LexicalListItemNode.ts:116"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"append",children:"append"}),"\n",(0,t.jsxs)(i.p,{children:["\u25B8 ",(0,t.jsx)(i.strong,{children:"append"}),"(",(0,t.jsx)(i.code,{children:"...nodes"}),"): ",(0,t.jsx)(i.code,{children:"this"})]}),"\n",(0,t.jsx)(i.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,t.jsxs)(i.table,{children:[(0,t.jsx)(i.thead,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,t.jsx)(i.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,t.jsx)(i.tbody,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"...nodes"})}),(0,t.jsxs)(i.td,{style:{textAlign:"left"},children:[(0,t.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,t.jsx)(i.code,{children:"LexicalNode"})}),"[]"]})]})})]}),"\n",(0,t.jsx)(i.h4,{id:"returns-2",children:"Returns"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.code,{children:"this"})}),"\n",(0,t.jsx)(i.h4,{id:"overrides-2",children:"Overrides"}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,t.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode#append",children:"append"})]}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-2",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-list/src/LexicalListItemNode.ts#L200",children:"packages/lexical-list/src/LexicalListItemNode.ts:200"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"canmergewhenempty",children:"canMergeWhenEmpty"}),"\n",(0,t.jsxs)(i.p,{children:["\u25B8 ",(0,t.jsx)(i.strong,{children:"canMergeWhenEmpty"}),"(): ",(0,t.jsx)(i.code,{children:"true"})]}),"\n",(0,t.jsx)(i.p,{children:"Determines whether this node, when empty, can merge with a first block\nof nodes being inserted."}),"\n",(0,t.jsxs)(i.p,{children:["This method is specifically called in ",(0,t.jsx)(i.a,{href:"/docs/api/classes/lexical.RangeSelection#insertnodes",children:"RangeSelection.insertNodes"}),"\nto determine merging behavior during nodes insertion."]}),"\n",(0,t.jsx)(i.h4,{id:"returns-3",children:"Returns"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.code,{children:"true"})}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:(0,t.jsx)(i.code,{children:"Example"})})}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"// In a ListItemNode or QuoteNode implementation:\ncanMergeWhenEmpty(): true {\n return true;\n}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"overrides-3",children:"Overrides"}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,t.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode#canmergewhenempty",children:"canMergeWhenEmpty"})]}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-3",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-list/src/LexicalListItemNode.ts#L466",children:"packages/lexical-list/src/LexicalListItemNode.ts:466"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"canmergewith",children:"canMergeWith"}),"\n",(0,t.jsxs)(i.p,{children:["\u25B8 ",(0,t.jsx)(i.strong,{children:"canMergeWith"}),"(",(0,t.jsx)(i.code,{children:"node"}),"): ",(0,t.jsx)(i.code,{children:"boolean"})]}),"\n",(0,t.jsx)(i.h4,{id:"parameters-3",children:"Parameters"}),"\n",(0,t.jsxs)(i.table,{children:[(0,t.jsx)(i.thead,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,t.jsx)(i.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,t.jsx)(i.tbody,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"node"})}),(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,t.jsx)(i.code,{children:"LexicalNode"})})})]})})]}),"\n",(0,t.jsx)(i.h4,{id:"returns-4",children:"Returns"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.code,{children:"boolean"})}),"\n",(0,t.jsx)(i.h4,{id:"overrides-4",children:"Overrides"}),"\n",(0,t.jsx)(i.p,{children:"ElementNode.canMergeWith"}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-4",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-list/src/LexicalListItemNode.ts#L439",children:"packages/lexical-list/src/LexicalListItemNode.ts:439"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"collapseatstart",children:"collapseAtStart"}),"\n",(0,t.jsxs)(i.p,{children:["\u25B8 ",(0,t.jsx)(i.strong,{children:"collapseAtStart"}),"(",(0,t.jsx)(i.code,{children:"selection"}),"): ",(0,t.jsx)(i.code,{children:"true"})]}),"\n",(0,t.jsx)(i.h4,{id:"parameters-4",children:"Parameters"}),"\n",(0,t.jsxs)(i.table,{children:[(0,t.jsx)(i.thead,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,t.jsx)(i.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,t.jsx)(i.tbody,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"selection"})}),(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.a,{href:"/docs/api/classes/lexical.RangeSelection",children:(0,t.jsx)(i.code,{children:"RangeSelection"})})})]})})]}),"\n",(0,t.jsx)(i.h4,{id:"returns-5",children:"Returns"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.code,{children:"true"})}),"\n",(0,t.jsx)(i.h4,{id:"overrides-5",children:"Overrides"}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,t.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode#collapseatstart",children:"collapseAtStart"})]}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-5",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-list/src/LexicalListItemNode.ts#L319",children:"packages/lexical-list/src/LexicalListItemNode.ts:319"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"createdom",children:"createDOM"}),"\n",(0,t.jsxs)(i.p,{children:["\u25B8 ",(0,t.jsx)(i.strong,{children:"createDOM"}),"(",(0,t.jsx)(i.code,{children:"config"}),"): ",(0,t.jsx)(i.code,{children:"HTMLElement"})]}),"\n",(0,t.jsx)(i.p,{children:"Called during the reconciliation process to determine which nodes\nto insert into the DOM for this Lexical Node."}),"\n",(0,t.jsx)(i.p,{children:"This method must return exactly one HTMLElement. Nested elements are not supported."}),"\n",(0,t.jsx)(i.p,{children:"Do not attempt to update the Lexical EditorState during this phase of the update lifecycle."}),"\n",(0,t.jsx)(i.h4,{id:"parameters-5",children:"Parameters"}),"\n",(0,t.jsxs)(i.table,{children:[(0,t.jsx)(i.thead,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,t.jsx)(i.th,{style:{textAlign:"left"},children:"Type"}),(0,t.jsx)(i.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,t.jsx)(i.tbody,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"config"})}),(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.a,{href:"/docs/api/modules/lexical#editorconfig",children:(0,t.jsx)(i.code,{children:"EditorConfig"})})}),(0,t.jsx)(i.td,{style:{textAlign:"left"},children:"allows access to things like the EditorTheme (to apply classes) during reconciliation."})]})})]}),"\n",(0,t.jsx)(i.h4,{id:"returns-6",children:"Returns"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.code,{children:"HTMLElement"})}),"\n",(0,t.jsx)(i.h4,{id:"overrides-6",children:"Overrides"}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,t.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode#createdom",children:"createDOM"})]}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-6",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-list/src/LexicalListItemNode.ts#L122",children:"packages/lexical-list/src/LexicalListItemNode.ts:122"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"createparentelementnode",children:"createParentElementNode"}),"\n",(0,t.jsxs)(i.p,{children:["\u25B8 ",(0,t.jsx)(i.strong,{children:"createParentElementNode"}),"(): ",(0,t.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode",children:(0,t.jsx)(i.code,{children:"ElementNode"})})]}),"\n",(0,t.jsxs)(i.p,{children:["The creation logic for any required parent. Should be implemented if ",(0,t.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode#isparentrequired",children:"isParentRequired"})," returns true."]}),"\n",(0,t.jsx)(i.h4,{id:"returns-7",children:"Returns"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode",children:(0,t.jsx)(i.code,{children:"ElementNode"})})}),"\n",(0,t.jsx)(i.h4,{id:"overrides-7",children:"Overrides"}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,t.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode#createparentelementnode",children:"createParentElementNode"})]}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-7",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-list/src/LexicalListItemNode.ts#L462",children:"packages/lexical-list/src/LexicalListItemNode.ts:462"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"exportdom",children:"exportDOM"}),"\n",(0,t.jsxs)(i.p,{children:["\u25B8 ",(0,t.jsx)(i.strong,{children:"exportDOM"}),"(",(0,t.jsx)(i.code,{children:"editor"}),"): ",(0,t.jsx)(i.a,{href:"/docs/api/modules/lexical#domexportoutput",children:(0,t.jsx)(i.code,{children:"DOMExportOutput"})})]}),"\n",(0,t.jsxs)(i.p,{children:["Controls how the this node is serialized to HTML. This is important for\ncopy and paste between Lexical and non-Lexical editors, or Lexical editors with different namespaces,\nin which case the primary transfer format is HTML. It's also important if you're serializing\nto HTML for any other reason via ",(0,t.jsx)(i.a,{href:"/docs/api/modules/lexical_html#generatehtmlfromnodes",children:"$generateHtmlFromNodes"}),". You could\nalso use this method to build your own HTML renderer."]}),"\n",(0,t.jsx)(i.h4,{id:"parameters-6",children:"Parameters"}),"\n",(0,t.jsxs)(i.table,{children:[(0,t.jsx)(i.thead,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,t.jsx)(i.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,t.jsx)(i.tbody,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"editor"})}),(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalEditor",children:(0,t.jsx)(i.code,{children:"LexicalEditor"})})})]})})]}),"\n",(0,t.jsx)(i.h4,{id:"returns-8",children:"Returns"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"/docs/api/modules/lexical#domexportoutput",children:(0,t.jsx)(i.code,{children:"DOMExportOutput"})})}),"\n",(0,t.jsx)(i.h4,{id:"overrides-8",children:"Overrides"}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,t.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode#exportdom",children:"exportDOM"})]}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-8",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-list/src/LexicalListItemNode.ts#L174",children:"packages/lexical-list/src/LexicalListItemNode.ts:174"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"exportjson",children:"exportJSON"}),"\n",(0,t.jsxs)(i.p,{children:["\u25B8 ",(0,t.jsx)(i.strong,{children:"exportJSON"}),"(): ",(0,t.jsx)(i.a,{href:"/docs/api/modules/lexical_list#serializedlistitemnode",children:(0,t.jsx)(i.code,{children:"SerializedListItemNode"})})]}),"\n",(0,t.jsxs)(i.p,{children:["Controls how the this node is serialized to JSON. This is important for\ncopy and paste between Lexical editors sharing the same namespace. It's also important\nif you're serializing to JSON for persistent storage somewhere.\nSee ",(0,t.jsx)(i.a,{href:"https://lexical.dev/docs/concepts/serialization#lexical---html",children:"Serialization & Deserialization"}),"."]}),"\n",(0,t.jsx)(i.h4,{id:"returns-9",children:"Returns"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"/docs/api/modules/lexical_list#serializedlistitemnode",children:(0,t.jsx)(i.code,{children:"SerializedListItemNode"})})}),"\n",(0,t.jsx)(i.h4,{id:"overrides-9",children:"Overrides"}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,t.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode#exportjson",children:"exportJSON"})]}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-9",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-list/src/LexicalListItemNode.ts#L192",children:"packages/lexical-list/src/LexicalListItemNode.ts:192"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"extractwithchild",children:"extractWithChild"}),"\n",(0,t.jsxs)(i.p,{children:["\u25B8 ",(0,t.jsx)(i.strong,{children:"extractWithChild"}),"(",(0,t.jsx)(i.code,{children:"child"}),", ",(0,t.jsx)(i.code,{children:"selection"}),"): ",(0,t.jsx)(i.code,{children:"boolean"})]}),"\n",(0,t.jsx)(i.h4,{id:"parameters-7",children:"Parameters"}),"\n",(0,t.jsxs)(i.table,{children:[(0,t.jsx)(i.thead,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,t.jsx)(i.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,t.jsxs)(i.tbody,{children:[(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"child"})}),(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,t.jsx)(i.code,{children:"LexicalNode"})})})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"selection"})}),(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.a,{href:"/docs/api/interfaces/lexical.BaseSelection",children:(0,t.jsx)(i.code,{children:"BaseSelection"})})})]})]})]}),"\n",(0,t.jsx)(i.h4,{id:"returns-10",children:"Returns"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.code,{children:"boolean"})}),"\n",(0,t.jsx)(i.h4,{id:"overrides-10",children:"Overrides"}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,t.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode#extractwithchild",children:"extractWithChild"})]}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-10",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-list/src/LexicalListItemNode.ts#L443",children:"packages/lexical-list/src/LexicalListItemNode.ts:443"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"getchecked",children:"getChecked"}),"\n",(0,t.jsxs)(i.p,{children:["\u25B8 ",(0,t.jsx)(i.strong,{children:"getChecked"}),"(): ",(0,t.jsx)(i.code,{children:"undefined"})," | ",(0,t.jsx)(i.code,{children:"boolean"})]}),"\n",(0,t.jsx)(i.h4,{id:"returns-11",children:"Returns"}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.code,{children:"undefined"})," | ",(0,t.jsx)(i.code,{children:"boolean"})]}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-11",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-list/src/LexicalListItemNode.ts#L370",children:"packages/lexical-list/src/LexicalListItemNode.ts:370"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"getindent",children:"getIndent"}),"\n",(0,t.jsxs)(i.p,{children:["\u25B8 ",(0,t.jsx)(i.strong,{children:"getIndent"}),"(): ",(0,t.jsx)(i.code,{children:"number"})]}),"\n",(0,t.jsx)(i.h4,{id:"returns-12",children:"Returns"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.code,{children:"number"})}),"\n",(0,t.jsx)(i.h4,{id:"overrides-11",children:"Overrides"}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,t.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode#getindent",children:"getIndent"})]}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-12",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-list/src/LexicalListItemNode.ts#L394",children:"packages/lexical-list/src/LexicalListItemNode.ts:394"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"getvalue",children:"getValue"}),"\n",(0,t.jsxs)(i.p,{children:["\u25B8 ",(0,t.jsx)(i.strong,{children:"getValue"}),"(): ",(0,t.jsx)(i.code,{children:"number"})]}),"\n",(0,t.jsx)(i.h4,{id:"returns-13",children:"Returns"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.code,{children:"number"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-13",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-list/src/LexicalListItemNode.ts#L358",children:"packages/lexical-list/src/LexicalListItemNode.ts:358"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"insertafter",children:"insertAfter"}),"\n",(0,t.jsxs)(i.p,{children:["\u25B8 ",(0,t.jsx)(i.strong,{children:"insertAfter"}),"(",(0,t.jsx)(i.code,{children:"node"}),", ",(0,t.jsx)(i.code,{children:"restoreSelection?"}),"): ",(0,t.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,t.jsx)(i.code,{children:"LexicalNode"})})]}),"\n",(0,t.jsx)(i.p,{children:"Inserts a node after this LexicalNode (as the next sibling)."}),"\n",(0,t.jsx)(i.h4,{id:"parameters-8",children:"Parameters"}),"\n",(0,t.jsxs)(i.table,{children:[(0,t.jsx)(i.thead,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,t.jsx)(i.th,{style:{textAlign:"left"},children:"Type"}),(0,t.jsx)(i.th,{style:{textAlign:"left"},children:"Default value"}),(0,t.jsx)(i.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,t.jsxs)(i.tbody,{children:[(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"node"})}),(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,t.jsx)(i.code,{children:"LexicalNode"})})}),(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"undefined"})}),(0,t.jsx)(i.td,{style:{textAlign:"left"},children:"The node to insert after this one."})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"restoreSelection"})}),(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"boolean"})}),(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"true"})}),(0,t.jsx)(i.td,{style:{textAlign:"left"},children:"Whether or not to attempt to resolve the selection to the appropriate place after the operation is complete."})]})]})]}),"\n",(0,t.jsx)(i.h4,{id:"returns-14",children:"Returns"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,t.jsx)(i.code,{children:"LexicalNode"})})}),"\n",(0,t.jsx)(i.h4,{id:"overrides-12",children:"Overrides"}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,t.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode#insertafter",children:"insertAfter"})]}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-14",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-list/src/LexicalListItemNode.ts#L260",children:"packages/lexical-list/src/LexicalListItemNode.ts:260"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"insertnewafter",children:"insertNewAfter"}),"\n",(0,t.jsxs)(i.p,{children:["\u25B8 ",(0,t.jsx)(i.strong,{children:"insertNewAfter"}),"(",(0,t.jsx)(i.code,{children:"_"}),", ",(0,t.jsx)(i.code,{children:"restoreSelection?"}),"): ",(0,t.jsx)(i.a,{href:"/docs/api/classes/lexical.ParagraphNode",children:(0,t.jsx)(i.code,{children:"ParagraphNode"})})," | ",(0,t.jsx)(i.a,{href:"/docs/api/classes/lexical_list.ListItemNode",children:(0,t.jsx)(i.code,{children:"ListItemNode"})})]}),"\n",(0,t.jsx)(i.h4,{id:"parameters-9",children:"Parameters"}),"\n",(0,t.jsxs)(i.table,{children:[(0,t.jsx)(i.thead,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,t.jsx)(i.th,{style:{textAlign:"left"},children:"Type"}),(0,t.jsx)(i.th,{style:{textAlign:"left"},children:"Default value"})]})}),(0,t.jsxs)(i.tbody,{children:[(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"_"})}),(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.a,{href:"/docs/api/classes/lexical.RangeSelection",children:(0,t.jsx)(i.code,{children:"RangeSelection"})})}),(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"undefined"})})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"restoreSelection"})}),(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"boolean"})}),(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"true"})})]})]})]}),"\n",(0,t.jsx)(i.h4,{id:"returns-15",children:"Returns"}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.a,{href:"/docs/api/classes/lexical.ParagraphNode",children:(0,t.jsx)(i.code,{children:"ParagraphNode"})})," | ",(0,t.jsx)(i.a,{href:"/docs/api/classes/lexical_list.ListItemNode",children:(0,t.jsx)(i.code,{children:"ListItemNode"})})]}),"\n",(0,t.jsx)(i.h4,{id:"overrides-13",children:"Overrides"}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,t.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode#insertnewafter",children:"insertNewAfter"})]}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-15",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-list/src/LexicalListItemNode.ts#L306",children:"packages/lexical-list/src/LexicalListItemNode.ts:306"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"isparentrequired",children:"isParentRequired"}),"\n",(0,t.jsxs)(i.p,{children:["\u25B8 ",(0,t.jsx)(i.strong,{children:"isParentRequired"}),"(): ",(0,t.jsx)(i.code,{children:"true"})]}),"\n",(0,t.jsx)(i.p,{children:"Whether or not this node has a required parent. Used during copy + paste operations\nto normalize nodes that would otherwise be orphaned. For example, ListItemNodes without\na ListNode parent or TextNodes with a ParagraphNode parent."}),"\n",(0,t.jsx)(i.h4,{id:"returns-16",children:"Returns"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.code,{children:"true"})}),"\n",(0,t.jsx)(i.h4,{id:"overrides-14",children:"Overrides"}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,t.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode#isparentrequired",children:"isParentRequired"})]}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-16",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-list/src/LexicalListItemNode.ts#L458",children:"packages/lexical-list/src/LexicalListItemNode.ts:458"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"remove",children:"remove"}),"\n",(0,t.jsxs)(i.p,{children:["\u25B8 ",(0,t.jsx)(i.strong,{children:"remove"}),"(",(0,t.jsx)(i.code,{children:"preserveEmptyParent?"}),"): ",(0,t.jsx)(i.code,{children:"void"})]}),"\n",(0,t.jsx)(i.p,{children:"Removes this LexicalNode from the EditorState. If the node isn't re-inserted\nsomewhere, the Lexical garbage collector will eventually clean it up."}),"\n",(0,t.jsx)(i.h4,{id:"parameters-10",children:"Parameters"}),"\n",(0,t.jsxs)(i.table,{children:[(0,t.jsx)(i.thead,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,t.jsx)(i.th,{style:{textAlign:"left"},children:"Type"}),(0,t.jsx)(i.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,t.jsx)(i.tbody,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"preserveEmptyParent?"})}),(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"boolean"})}),(0,t.jsxs)(i.td,{style:{textAlign:"left"},children:["If falsy, the node's parent will be removed if it's empty after the removal operation. This is the default behavior, subject to other node heuristics such as ",(0,t.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode#canbeempty",children:"ElementNode#canBeEmpty"})]})]})})]}),"\n",(0,t.jsx)(i.h4,{id:"returns-17",children:"Returns"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.code,{children:"void"})}),"\n",(0,t.jsx)(i.h4,{id:"overrides-15",children:"Overrides"}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,t.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode#remove",children:"remove"})]}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-17",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-list/src/LexicalListItemNode.ts#L290",children:"packages/lexical-list/src/LexicalListItemNode.ts:290"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"replace",children:"replace"}),"\n",(0,t.jsxs)(i.p,{children:["\u25B8 ",(0,t.jsx)(i.strong,{children:"replace"}),"<",(0,t.jsx)(i.code,{children:"N"}),">(",(0,t.jsx)(i.code,{children:"replaceWithNode"}),", ",(0,t.jsx)(i.code,{children:"includeChildren?"}),"): ",(0,t.jsx)(i.code,{children:"N"})]}),"\n",(0,t.jsx)(i.p,{children:"Replaces this LexicalNode with the provided node, optionally transferring the children\nof the replaced node to the replacing node."}),"\n",(0,t.jsx)(i.h4,{id:"type-parameters",children:"Type parameters"}),"\n",(0,t.jsxs)(i.table,{children:[(0,t.jsx)(i.thead,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,t.jsx)(i.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,t.jsx)(i.tbody,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"N"})}),(0,t.jsxs)(i.td,{style:{textAlign:"left"},children:["extends ",(0,t.jsx)(i.a,{href:"/docs/api/classes/lexical.LexicalNode",children:(0,t.jsx)(i.code,{children:"LexicalNode"})})]})]})})]}),"\n",(0,t.jsx)(i.h4,{id:"parameters-11",children:"Parameters"}),"\n",(0,t.jsxs)(i.table,{children:[(0,t.jsx)(i.thead,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,t.jsx)(i.th,{style:{textAlign:"left"},children:"Type"}),(0,t.jsx)(i.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,t.jsxs)(i.tbody,{children:[(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"replaceWithNode"})}),(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"N"})}),(0,t.jsx)(i.td,{style:{textAlign:"left"},children:"The node to replace this one with."})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"includeChildren?"})}),(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"boolean"})}),(0,t.jsx)(i.td,{style:{textAlign:"left"},children:"Whether or not to transfer the children of this node to the replacing node."})]})]})]}),"\n",(0,t.jsx)(i.h4,{id:"returns-18",children:"Returns"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.code,{children:"N"})}),"\n",(0,t.jsx)(i.h4,{id:"overrides-16",children:"Overrides"}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,t.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode#replace",children:"replace"})]}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-18",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-list/src/LexicalListItemNode.ts#L216",children:"packages/lexical-list/src/LexicalListItemNode.ts:216"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"setchecked",children:"setChecked"}),"\n",(0,t.jsxs)(i.p,{children:["\u25B8 ",(0,t.jsx)(i.strong,{children:"setChecked"}),"(",(0,t.jsx)(i.code,{children:"checked?"}),"): ",(0,t.jsx)(i.code,{children:"this"})]}),"\n",(0,t.jsx)(i.h4,{id:"parameters-12",children:"Parameters"}),"\n",(0,t.jsxs)(i.table,{children:[(0,t.jsx)(i.thead,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,t.jsx)(i.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,t.jsx)(i.tbody,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"checked?"})}),(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"boolean"})})]})})]}),"\n",(0,t.jsx)(i.h4,{id:"returns-19",children:"Returns"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.code,{children:"this"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-19",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-list/src/LexicalListItemNode.ts#L383",children:"packages/lexical-list/src/LexicalListItemNode.ts:383"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"setindent",children:"setIndent"}),"\n",(0,t.jsxs)(i.p,{children:["\u25B8 ",(0,t.jsx)(i.strong,{children:"setIndent"}),"(",(0,t.jsx)(i.code,{children:"indent"}),"): ",(0,t.jsx)(i.code,{children:"this"})]}),"\n",(0,t.jsx)(i.h4,{id:"parameters-13",children:"Parameters"}),"\n",(0,t.jsxs)(i.table,{children:[(0,t.jsx)(i.thead,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,t.jsx)(i.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,t.jsx)(i.tbody,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"indent"})}),(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"number"})})]})})]}),"\n",(0,t.jsx)(i.h4,{id:"returns-20",children:"Returns"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.code,{children:"this"})}),"\n",(0,t.jsx)(i.h4,{id:"overrides-17",children:"Overrides"}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,t.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode#setindent",children:"setIndent"})]}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-20",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-list/src/LexicalListItemNode.ts#L411",children:"packages/lexical-list/src/LexicalListItemNode.ts:411"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"setvalue",children:"setValue"}),"\n",(0,t.jsxs)(i.p,{children:["\u25B8 ",(0,t.jsx)(i.strong,{children:"setValue"}),"(",(0,t.jsx)(i.code,{children:"value"}),"): ",(0,t.jsx)(i.code,{children:"this"})]}),"\n",(0,t.jsx)(i.h4,{id:"parameters-14",children:"Parameters"}),"\n",(0,t.jsxs)(i.table,{children:[(0,t.jsx)(i.thead,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,t.jsx)(i.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,t.jsx)(i.tbody,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"value"})}),(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"number"})})]})})]}),"\n",(0,t.jsx)(i.h4,{id:"returns-21",children:"Returns"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.code,{children:"this"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-21",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-list/src/LexicalListItemNode.ts#L364",children:"packages/lexical-list/src/LexicalListItemNode.ts:364"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"togglechecked",children:"toggleChecked"}),"\n",(0,t.jsxs)(i.p,{children:["\u25B8 ",(0,t.jsx)(i.strong,{children:"toggleChecked"}),"(): ",(0,t.jsx)(i.code,{children:"this"})]}),"\n",(0,t.jsx)(i.h4,{id:"returns-22",children:"Returns"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.code,{children:"this"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-22",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-list/src/LexicalListItemNode.ts#L389",children:"packages/lexical-list/src/LexicalListItemNode.ts:389"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"updatedom",children:"updateDOM"}),"\n",(0,t.jsxs)(i.p,{children:["\u25B8 ",(0,t.jsx)(i.strong,{children:"updateDOM"}),"(",(0,t.jsx)(i.code,{children:"prevNode"}),", ",(0,t.jsx)(i.code,{children:"dom"}),", ",(0,t.jsx)(i.code,{children:"config"}),"): ",(0,t.jsx)(i.code,{children:"boolean"})]}),"\n",(0,t.jsx)(i.p,{children:"Called when a node changes and should update the DOM\nin whatever way is necessary to make it align with any changes that might\nhave happened during the update."}),"\n",(0,t.jsx)(i.p,{children:'Returning "true" here will cause lexical to unmount and recreate the DOM node\n(by calling createDOM). You would need to do this if the element tag changes,\nfor instance.'}),"\n",(0,t.jsx)(i.h4,{id:"parameters-15",children:"Parameters"}),"\n",(0,t.jsxs)(i.table,{children:[(0,t.jsx)(i.thead,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,t.jsx)(i.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,t.jsxs)(i.tbody,{children:[(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"prevNode"})}),(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.a,{href:"/docs/api/classes/lexical_list.ListItemNode",children:(0,t.jsx)(i.code,{children:"ListItemNode"})})})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"dom"})}),(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"HTMLElement"})})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"config"})}),(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.a,{href:"/docs/api/modules/lexical#editorconfig",children:(0,t.jsx)(i.code,{children:"EditorConfig"})})})]})]})]}),"\n",(0,t.jsx)(i.h4,{id:"returns-23",children:"Returns"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.code,{children:"boolean"})}),"\n",(0,t.jsx)(i.h4,{id:"overrides-18",children:"Overrides"}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,t.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode#updatedom",children:"updateDOM"})]}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-23",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-list/src/LexicalListItemNode.ts#L154",children:"packages/lexical-list/src/LexicalListItemNode.ts:154"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"updatefromjson",children:"updateFromJSON"}),"\n",(0,t.jsxs)(i.p,{children:["\u25B8 ",(0,t.jsx)(i.strong,{children:"updateFromJSON"}),"(",(0,t.jsx)(i.code,{children:"serializedNode"}),"): ",(0,t.jsx)(i.code,{children:"this"})]}),"\n",(0,t.jsx)(i.p,{children:"Update this LexicalNode instance from serialized JSON. It's recommended\nto implement as much logic as possible in this method instead of the\nstatic importJSON method, so that the functionality can be inherited in subclasses."}),"\n",(0,t.jsx)(i.p,{children:"The LexicalUpdateJSON utility type should be used to ignore any type, version,\nor children properties in the JSON so that the extended JSON from subclasses\nare acceptable parameters for the super call."}),"\n",(0,t.jsx)(i.p,{children:"If overridden, this method must call super."}),"\n",(0,t.jsx)(i.h4,{id:"parameters-16",children:"Parameters"}),"\n",(0,t.jsxs)(i.table,{children:[(0,t.jsx)(i.thead,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,t.jsx)(i.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,t.jsx)(i.tbody,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"serializedNode"})}),(0,t.jsxs)(i.td,{style:{textAlign:"left"},children:[(0,t.jsx)(i.a,{href:"/docs/api/modules/lexical#lexicalupdatejson",children:(0,t.jsx)(i.code,{children:"LexicalUpdateJSON"})}),"<",(0,t.jsx)(i.a,{href:"/docs/api/modules/lexical_list#serializedlistitemnode",children:(0,t.jsx)(i.code,{children:"SerializedListItemNode"})}),">"]})]})})]}),"\n",(0,t.jsx)(i.h4,{id:"returns-24",children:"Returns"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.code,{children:"this"})}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.strong,{children:(0,t.jsx)(i.code,{children:"Example"})})}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:"class MyTextNode extends TextNode {\n  // ...\n  static importJSON(serializedNode: SerializedMyTextNode): MyTextNode {\n    return $createMyTextNode()\n      .updateFromJSON(serializedNode);\n  }\n  updateFromJSON(\n    serializedNode: LexicalUpdateJSON<SerializedMyTextNode>,\n  ): this {\n    return super.updateFromJSON(serializedNode)\n      .setMyProperty(serializedNode.myProperty);\n  }\n}\n"})}),"\n",(0,t.jsx)(i.h4,{id:"overrides-19",children:"Overrides"}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode",children:"ElementNode"}),".",(0,t.jsx)(i.a,{href:"/docs/api/classes/lexical.ElementNode#updatefromjson",children:"updateFromJSON"})]}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-24",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-list/src/LexicalListItemNode.ts#L165",children:"packages/lexical-list/src/LexicalListItemNode.ts:165"})}),"\n",(0,t.jsx)(i.hr,{}),"\n",(0,t.jsx)(i.h3,{id:"updatelistitemdom",children:"updateListItemDOM"}),"\n",(0,t.jsxs)(i.p,{children:["\u25B8 ",(0,t.jsx)(i.strong,{children:"updateListItemDOM"}),"(",(0,t.jsx)(i.code,{children:"prevNode"}),", ",(0,t.jsx)(i.code,{children:"dom"}),", ",(0,t.jsx)(i.code,{children:"config"}),"): ",(0,t.jsx)(i.code,{children:"void"})]}),"\n",(0,t.jsx)(i.h4,{id:"parameters-17",children:"Parameters"}),"\n",(0,t.jsxs)(i.table,{children:[(0,t.jsx)(i.thead,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.th,{style:{textAlign:"left"},children:"Name"}),(0,t.jsx)(i.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,t.jsxs)(i.tbody,{children:[(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"prevNode"})}),(0,t.jsxs)(i.td,{style:{textAlign:"left"},children:[(0,t.jsx)(i.code,{children:"null"})," | ",(0,t.jsx)(i.a,{href:"/docs/api/classes/lexical_list.ListItemNode",children:(0,t.jsx)(i.code,{children:"ListItemNode"})})]})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"dom"})}),(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"HTMLLIElement"})})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.code,{children:"config"})}),(0,t.jsx)(i.td,{style:{textAlign:"left"},children:(0,t.jsx)(i.a,{href:"/docs/api/modules/lexical#editorconfig",children:(0,t.jsx)(i.code,{children:"EditorConfig"})})})]})]})]}),"\n",(0,t.jsx)(i.h4,{id:"returns-25",children:"Returns"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.code,{children:"void"})}),"\n",(0,t.jsx)(i.h4,{id:"defined-in-25",children:"Defined in"}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical-list/src/LexicalListItemNode.ts#L129",children:"packages/lexical-list/src/LexicalListItemNode.ts:129"})})]})}function x(e={}){let{wrapper:i}={...(0,n.a)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},22840:function(e,i,l){l.d(i,{Z:()=>r,a:()=>d});var s=l(2784);let t={},n=s.createContext(t);function d(e){let i=s.useContext(n);return s.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function r(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),s.createElement(n.Provider,{value:i},e.children)}}}]);