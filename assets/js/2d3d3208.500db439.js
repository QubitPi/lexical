"use strict";(self.webpackChunk_lexical_website=self.webpackChunk_lexical_website||[]).push([["2112"],{83165:function(e,l,t){t.r(l),t.d(l,{frontMatter:()=>c,default:()=>x,contentTitle:()=>d,assets:()=>r,toc:()=>a,metadata:()=>i});var i=JSON.parse('{"id":"api/interfaces/lexical.SplitAtPointCaretNextOptions","title":"Interface: SplitAtPointCaretNextOptions","description":"lexical.SplitAtPointCaretNextOptions","source":"@site/docs/api/interfaces/lexical.SplitAtPointCaretNextOptions.md","sourceDirName":"api/interfaces","slug":"/api/interfaces/lexical.SplitAtPointCaretNextOptions","permalink":"/lexical/docs/api/interfaces/lexical.SplitAtPointCaretNextOptions","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","frontMatter":{"id":"lexical.SplitAtPointCaretNextOptions","title":"Interface: SplitAtPointCaretNextOptions","custom_edit_url":null},"sidebar":"api","previous":{"title":"SiblingCaret","permalink":"/lexical/docs/api/interfaces/lexical.SiblingCaret"},"next":{"title":"StateValueConfig","permalink":"/lexical/docs/api/interfaces/lexical.StateValueConfig"}}'),n=t(52322),s=t(22840);let c={id:"lexical.SplitAtPointCaretNextOptions",title:"Interface: SplitAtPointCaretNextOptions",custom_edit_url:null},d=void 0,r={},a=[{value:"Properties",id:"properties",level:2},{value:"$copyElementNode",id:"copyelementnode",level:3},{value:"Type declaration",id:"type-declaration",level:4},{value:"Parameters",id:"parameters",level:5},{value:"Returns",id:"returns",level:5},{value:"Defined in",id:"defined-in",level:4},{value:"$shouldSplit",id:"shouldsplit",level:3},{value:"Type declaration",id:"type-declaration-1",level:4},{value:"Parameters",id:"parameters-1",level:5},{value:"Returns",id:"returns-1",level:5},{value:"Defined in",id:"defined-in-1",level:4},{value:"$splitTextPointCaretNext",id:"splittextpointcaretnext",level:3},{value:"Type declaration",id:"type-declaration-2",level:4},{value:"Parameters",id:"parameters-2",level:5},{value:"Returns",id:"returns-2",level:5},{value:"Defined in",id:"defined-in-2",level:4},{value:"rootMode",id:"rootmode",level:3},{value:"Defined in",id:"defined-in-3",level:4}];function o(e){let l={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",h5:"h5",hr:"hr",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical",children:"lexical"}),".SplitAtPointCaretNextOptions"]}),"\n",(0,n.jsx)(l.h2,{id:"properties",children:"Properties"}),"\n",(0,n.jsx)(l.h3,{id:"copyelementnode",children:"$copyElementNode"}),"\n",(0,n.jsxs)(l.p,{children:["\u2022 ",(0,n.jsx)(l.code,{children:"Optional"})," ",(0,n.jsx)(l.strong,{children:"$copyElementNode"}),": (",(0,n.jsx)(l.code,{children:"node"}),": ",(0,n.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:(0,n.jsx)(l.code,{children:"ElementNode"})}),") => ",(0,n.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:(0,n.jsx)(l.code,{children:"ElementNode"})})]}),"\n",(0,n.jsxs)(l.p,{children:["The function to create the right side of a split ElementNode (default ",(0,n.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#copynode",children:"$copyNode"}),")"]}),"\n",(0,n.jsx)(l.h4,{id:"type-declaration",children:"Type declaration"}),"\n",(0,n.jsxs)(l.p,{children:["\u25B8 (",(0,n.jsx)(l.code,{children:"node"}),"): ",(0,n.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:(0,n.jsx)(l.code,{children:"ElementNode"})})]}),"\n",(0,n.jsx)(l.h5,{id:"parameters",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(l.tbody,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"node"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:(0,n.jsx)(l.code,{children:"ElementNode"})})})]})})]}),"\n",(0,n.jsx)(l.h5,{id:"returns",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:(0,n.jsx)(l.code,{children:"ElementNode"})})}),"\n",(0,n.jsx)(l.h4,{id:"defined-in",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaretUtils.ts#L664",children:"packages/lexical/src/caret/LexicalCaretUtils.ts:664"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"shouldsplit",children:"$shouldSplit"}),"\n",(0,n.jsxs)(l.p,{children:["\u2022 ",(0,n.jsx)(l.code,{children:"Optional"})," ",(0,n.jsx)(l.strong,{children:"$shouldSplit"}),": (",(0,n.jsx)(l.code,{children:"node"}),": ",(0,n.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:(0,n.jsx)(l.code,{children:"ElementNode"})}),", ",(0,n.jsx)(l.code,{children:"edge"}),": ",(0,n.jsx)(l.code,{children:'"first"'})," | ",(0,n.jsx)(l.code,{children:'"last"'}),") => ",(0,n.jsx)(l.code,{children:"boolean"})]}),"\n",(0,n.jsxs)(l.p,{children:["If element.canBeEmpty() and would create an empty split, this function will be\ncalled with the element and 'first' | 'last'. If it returns false, the empty\nsplit will not be created. Default is ",(0,n.jsx)(l.code,{children:"() => true"})," to always split when possible."]}),"\n",(0,n.jsx)(l.h4,{id:"type-declaration-1",children:"Type declaration"}),"\n",(0,n.jsxs)(l.p,{children:["\u25B8 (",(0,n.jsx)(l.code,{children:"node"}),", ",(0,n.jsx)(l.code,{children:"edge"}),"): ",(0,n.jsx)(l.code,{children:"boolean"})]}),"\n",(0,n.jsx)(l.h5,{id:"parameters-1",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsxs)(l.tbody,{children:[(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"node"})}),(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.ElementNode",children:(0,n.jsx)(l.code,{children:"ElementNode"})})})]}),(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"edge"})}),(0,n.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,n.jsx)(l.code,{children:'"first"'})," | ",(0,n.jsx)(l.code,{children:'"last"'})]})]})]})]}),"\n",(0,n.jsx)(l.h5,{id:"returns-1",children:"Returns"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.code,{children:"boolean"})}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-1",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaretUtils.ts#L676",children:"packages/lexical/src/caret/LexicalCaretUtils.ts:676"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"splittextpointcaretnext",children:"$splitTextPointCaretNext"}),"\n",(0,n.jsxs)(l.p,{children:["\u2022 ",(0,n.jsx)(l.code,{children:"Optional"})," ",(0,n.jsx)(l.strong,{children:"$splitTextPointCaretNext"}),": (",(0,n.jsx)(l.code,{children:"caret"}),": ",(0,n.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.TextPointCaret",children:(0,n.jsx)(l.code,{children:"TextPointCaret"})}),"<",(0,n.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.TextNode",children:(0,n.jsx)(l.code,{children:"TextNode"})}),", ",(0,n.jsx)(l.code,{children:'"next"'}),">) => ",(0,n.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#nodecaret",children:(0,n.jsx)(l.code,{children:"NodeCaret"})}),"<",(0,n.jsx)(l.code,{children:'"next"'}),">"]}),"\n",(0,n.jsx)(l.p,{children:"The function to split a TextNode (default $splitTextPointCaret)"}),"\n",(0,n.jsx)(l.h4,{id:"type-declaration-2",children:"Type declaration"}),"\n",(0,n.jsxs)(l.p,{children:["\u25B8 (",(0,n.jsx)(l.code,{children:"caret"}),"): ",(0,n.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#nodecaret",children:(0,n.jsx)(l.code,{children:"NodeCaret"})}),"<",(0,n.jsx)(l.code,{children:'"next"'}),">"]}),"\n",(0,n.jsx)(l.h5,{id:"parameters-2",children:"Parameters"}),"\n",(0,n.jsxs)(l.table,{children:[(0,n.jsx)(l.thead,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Name"}),(0,n.jsx)(l.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,n.jsx)(l.tbody,{children:(0,n.jsxs)(l.tr,{children:[(0,n.jsx)(l.td,{style:{textAlign:"left"},children:(0,n.jsx)(l.code,{children:"caret"})}),(0,n.jsxs)(l.td,{style:{textAlign:"left"},children:[(0,n.jsx)(l.a,{href:"/lexical/docs/api/interfaces/lexical.TextPointCaret",children:(0,n.jsx)(l.code,{children:"TextPointCaret"})}),"<",(0,n.jsx)(l.a,{href:"/lexical/docs/api/classes/lexical.TextNode",children:(0,n.jsx)(l.code,{children:"TextNode"})}),", ",(0,n.jsx)(l.code,{children:'"next"'}),">"]})]})})]}),"\n",(0,n.jsx)(l.h5,{id:"returns-2",children:"Returns"}),"\n",(0,n.jsxs)(l.p,{children:[(0,n.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#nodecaret",children:(0,n.jsx)(l.code,{children:"NodeCaret"})}),"<",(0,n.jsx)(l.code,{children:'"next"'}),">"]}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-2",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaretUtils.ts#L666",children:"packages/lexical/src/caret/LexicalCaretUtils.ts:666"})}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h3,{id:"rootmode",children:"rootMode"}),"\n",(0,n.jsxs)(l.p,{children:["\u2022 ",(0,n.jsx)(l.code,{children:"Optional"})," ",(0,n.jsx)(l.strong,{children:"rootMode"}),": ",(0,n.jsx)(l.a,{href:"/lexical/docs/api/modules/lexical#rootmode",children:(0,n.jsx)(l.code,{children:"RootMode"})})]}),"\n",(0,n.jsx)(l.p,{children:"If the parent matches rootMode a split will not occur, default is 'shadowRoot'"}),"\n",(0,n.jsx)(l.h4,{id:"defined-in-3",children:"Defined in"}),"\n",(0,n.jsx)(l.p,{children:(0,n.jsx)(l.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaretUtils.ts#L670",children:"packages/lexical/src/caret/LexicalCaretUtils.ts:670"})})]})}function x(e={}){let{wrapper:l}={...(0,s.a)(),...e.components};return l?(0,n.jsx)(l,{...e,children:(0,n.jsx)(o,{...e})}):o(e)}},22840:function(e,l,t){t.d(l,{Z:()=>d,a:()=>c});var i=t(2784);let n={},s=i.createContext(n);function c(e){let l=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(l):{...l,...e}},[l,e])}function d(e){let l;return l=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:c(e.components),i.createElement(s.Provider,{value:l},e.children)}}}]);