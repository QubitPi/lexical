"use strict";(self.webpackChunk_lexical_website=self.webpackChunk_lexical_website||[]).push([["3612"],{11761:function(e,t,i){i.r(t),i.d(t,{frontMatter:()=>c,default:()=>h,contentTitle:()=>s,assets:()=>a,toc:()=>d,metadata:()=>n});var n=JSON.parse('{"id":"api/interfaces/lexical.TextPointCaretSlice","title":"Interface: TextPointCaretSlice<T, D>","description":"lexical.TextPointCaretSlice","source":"@site/docs/api/interfaces/lexical.TextPointCaretSlice.md","sourceDirName":"api/interfaces","slug":"/api/interfaces/lexical.TextPointCaretSlice","permalink":"/docs/api/interfaces/lexical.TextPointCaretSlice","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","frontMatter":{"id":"lexical.TextPointCaretSlice","title":"Interface: TextPointCaretSlice<T, D>","custom_edit_url":null},"sidebar":"api","previous":{"title":"TextPointCaret","permalink":"/docs/api/interfaces/lexical.TextPointCaret"},"next":{"title":"UpdateListenerPayload","permalink":"/docs/api/interfaces/lexical.UpdateListenerPayload"}}'),r=i(52322),l=i(22840);let c={id:"lexical.TextPointCaretSlice",title:"Interface: TextPointCaretSlice<T, D>",custom_edit_url:null},s=void 0,a={},d=[{value:"Type parameters",id:"type-parameters",level:2},{value:"Properties",id:"properties",level:2},{value:"caret",id:"caret",level:3},{value:"Defined in",id:"defined-in",level:4},{value:"distance",id:"distance",level:3},{value:"Defined in",id:"defined-in-1",level:4},{value:"getSliceIndices",id:"getsliceindices",level:3},{value:"Type declaration",id:"type-declaration",level:4},{value:"Returns",id:"returns",level:5},{value:"Defined in",id:"defined-in-2",level:4},{value:"getTextContent",id:"gettextcontent",level:3},{value:"Type declaration",id:"type-declaration-1",level:4},{value:"Returns",id:"returns-1",level:5},{value:"Defined in",id:"defined-in-3",level:4},{value:"getTextContentSize",id:"gettextcontentsize",level:3},{value:"Type declaration",id:"type-declaration-2",level:4},{value:"Returns",id:"returns-2",level:5},{value:"Defined in",id:"defined-in-4",level:4},{value:"type",id:"type",level:3},{value:"Defined in",id:"defined-in-5",level:4},{value:"Methods",id:"methods",level:2},{value:"removeTextSlice",id:"removetextslice",level:3},{value:"Returns",id:"returns-3",level:4},{value:"Defined in",id:"defined-in-6",level:4}];function x(e){let t={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",h5:"h5",hr:"hr",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,l.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.a,{href:"/docs/api/modules/lexical",children:"lexical"}),".TextPointCaretSlice"]}),"\n",(0,r.jsx)(t.p,{children:"A TextPointCaretSlice is a wrapper for a TextPointCaret that carries a signed\ndistance representing the direction and amount of text selected from the given\ncaret. A negative distance means that text before offset is selected, a\npositive distance means that text after offset is selected. The offset+distance\npair is not affected in any way by the direction of the caret."}),"\n",(0,r.jsx)(t.h2,{id:"type-parameters",children:"Type parameters"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"Name"}),(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"T"})}),(0,r.jsxs)(t.td,{style:{textAlign:"left"},children:["extends ",(0,r.jsx)(t.a,{href:"/docs/api/classes/lexical.TextNode",children:(0,r.jsx)(t.code,{children:"TextNode"})})," = ",(0,r.jsx)(t.a,{href:"/docs/api/classes/lexical.TextNode",children:(0,r.jsx)(t.code,{children:"TextNode"})})]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"D"})}),(0,r.jsxs)(t.td,{style:{textAlign:"left"},children:["extends ",(0,r.jsx)(t.a,{href:"/docs/api/modules/lexical#caretdirection",children:(0,r.jsx)(t.code,{children:"CaretDirection"})})," = ",(0,r.jsx)(t.a,{href:"/docs/api/modules/lexical#caretdirection",children:(0,r.jsx)(t.code,{children:"CaretDirection"})})]})]})]})]}),"\n",(0,r.jsx)(t.h2,{id:"properties",children:"Properties"}),"\n",(0,r.jsx)(t.h3,{id:"caret",children:"caret"}),"\n",(0,r.jsxs)(t.p,{children:["\u2022 ",(0,r.jsx)(t.code,{children:"Readonly"})," ",(0,r.jsx)(t.strong,{children:"caret"}),": ",(0,r.jsx)(t.a,{href:"/docs/api/interfaces/lexical.TextPointCaret",children:(0,r.jsx)(t.code,{children:"TextPointCaret"})}),"<",(0,r.jsx)(t.code,{children:"T"}),", ",(0,r.jsx)(t.code,{children:"D"}),">"]}),"\n",(0,r.jsx)(t.h4,{id:"defined-in",children:"Defined in"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L337",children:"packages/lexical/src/caret/LexicalCaret.ts:337"})}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h3,{id:"distance",children:"distance"}),"\n",(0,r.jsxs)(t.p,{children:["\u2022 ",(0,r.jsx)(t.code,{children:"Readonly"})," ",(0,r.jsx)(t.strong,{children:"distance"}),": ",(0,r.jsx)(t.code,{children:"number"})]}),"\n",(0,r.jsx)(t.h4,{id:"defined-in-1",children:"Defined in"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L338",children:"packages/lexical/src/caret/LexicalCaret.ts:338"})}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h3,{id:"getsliceindices",children:"getSliceIndices"}),"\n",(0,r.jsxs)(t.p,{children:["\u2022 ",(0,r.jsx)(t.strong,{children:"getSliceIndices"}),": () => [startIndex: number, endIndex: number]"]}),"\n",(0,r.jsx)(t.h4,{id:"type-declaration",children:"Type declaration"}),"\n",(0,r.jsx)(t.p,{children:"\u25B8 (): [startIndex: number, endIndex: number]"}),"\n",(0,r.jsx)(t.h5,{id:"returns",children:"Returns"}),"\n",(0,r.jsx)(t.p,{children:"[startIndex: number, endIndex: number]"}),"\n",(0,r.jsx)(t.h4,{id:"defined-in-2",children:"Defined in"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L342",children:"packages/lexical/src/caret/LexicalCaret.ts:342"})}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h3,{id:"gettextcontent",children:"getTextContent"}),"\n",(0,r.jsxs)(t.p,{children:["\u2022 ",(0,r.jsx)(t.strong,{children:"getTextContent"}),": () => ",(0,r.jsx)(t.code,{children:"string"})]}),"\n",(0,r.jsx)(t.h4,{id:"type-declaration-1",children:"Type declaration"}),"\n",(0,r.jsxs)(t.p,{children:["\u25B8 (): ",(0,r.jsx)(t.code,{children:"string"})]}),"\n",(0,r.jsx)(t.h5,{id:"returns-1",children:"Returns"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"string"})}),"\n",(0,r.jsx)(t.h4,{id:"defined-in-3",children:"Defined in"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L346",children:"packages/lexical/src/caret/LexicalCaret.ts:346"})}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h3,{id:"gettextcontentsize",children:"getTextContentSize"}),"\n",(0,r.jsxs)(t.p,{children:["\u2022 ",(0,r.jsx)(t.strong,{children:"getTextContentSize"}),": () => ",(0,r.jsx)(t.code,{children:"number"})]}),"\n",(0,r.jsx)(t.h4,{id:"type-declaration-2",children:"Type declaration"}),"\n",(0,r.jsxs)(t.p,{children:["\u25B8 (): ",(0,r.jsx)(t.code,{children:"number"})]}),"\n",(0,r.jsx)(t.h5,{id:"returns-2",children:"Returns"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.code,{children:"number"})}),"\n",(0,r.jsx)(t.h4,{id:"defined-in-4",children:"Defined in"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L350",children:"packages/lexical/src/caret/LexicalCaret.ts:350"})}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h3,{id:"type",children:"type"}),"\n",(0,r.jsxs)(t.p,{children:["\u2022 ",(0,r.jsx)(t.code,{children:"Readonly"})," ",(0,r.jsx)(t.strong,{children:"type"}),": ",(0,r.jsx)(t.code,{children:'"slice"'})]}),"\n",(0,r.jsx)(t.h4,{id:"defined-in-5",children:"Defined in"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L336",children:"packages/lexical/src/caret/LexicalCaret.ts:336"})}),"\n",(0,r.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,r.jsx)(t.h3,{id:"removetextslice",children:"removeTextSlice"}),"\n",(0,r.jsxs)(t.p,{children:["\u25B8 ",(0,r.jsx)(t.strong,{children:"removeTextSlice"}),"(): ",(0,r.jsx)(t.a,{href:"/docs/api/interfaces/lexical.TextPointCaret",children:(0,r.jsx)(t.code,{children:"TextPointCaret"})}),"<",(0,r.jsx)(t.code,{children:"T"}),", ",(0,r.jsx)(t.code,{children:"D"}),">"]}),"\n",(0,r.jsx)(t.p,{children:"Remove the slice of text from the contained caret, returning a new\nTextPointCaret without the wrapper (since the size would be zero)."}),"\n",(0,r.jsx)(t.p,{children:"Note that this is a lower-level utility that does not have any specific\nbehavior for 'segmented' or 'token' modes and it will not remove\nan empty TextNode."}),"\n",(0,r.jsx)(t.h4,{id:"returns-3",children:"Returns"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.a,{href:"/docs/api/interfaces/lexical.TextPointCaret",children:(0,r.jsx)(t.code,{children:"TextPointCaret"})}),"<",(0,r.jsx)(t.code,{children:"T"}),", ",(0,r.jsx)(t.code,{children:"D"}),">"]}),"\n",(0,r.jsx)(t.p,{children:"The inner TextPointCaret with the same offset and direction\nand the latest TextNode origin after mutation"}),"\n",(0,r.jsx)(t.h4,{id:"defined-in-6",children:"Defined in"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"https://github.com/QubitPi/lexical/tree/main/packages/lexical/src/caret/LexicalCaret.ts#L362",children:"packages/lexical/src/caret/LexicalCaret.ts:362"})})]})}function h(e={}){let{wrapper:t}={...(0,l.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(x,{...e})}):x(e)}},22840:function(e,t,i){i.d(t,{Z:()=>s,a:()=>c});var n=i(2784);let r={},l=n.createContext(r);function c(e){let t=n.useContext(l);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),n.createElement(l.Provider,{value:t},e.children)}}}]);